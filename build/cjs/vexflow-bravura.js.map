{"version":3,"file":"vexflow-bravura.js","mappings":"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","sources":["webpack://VexFlow/webpack/universalModuleDefinition","webpack://VexFlow/webpack/bootstrap","webpack://VexFlow/webpack/runtime/define property getters","webpack://VexFlow/webpack/runtime/global","webpack://VexFlow/webpack/runtime/hasOwnProperty shorthand","webpack://VexFlow/./src/typeguard.ts","webpack://VexFlow/./src/util.ts","webpack://VexFlow/./src/fraction.ts","webpack://VexFlow/./src/metrics.ts","webpack://VexFlow/./src/boundingbox.ts","webpack://VexFlow/./src/font.ts","webpack://VexFlow/./src/registry.ts","webpack://VexFlow/./src/element.ts","webpack://VexFlow/./src/modifier.ts","webpack://VexFlow/./src/glyphs.ts","webpack://VexFlow/./src/music.ts","webpack://VexFlow/./src/tables.ts","webpack://VexFlow/./src/accidental.ts","webpack://VexFlow/./src/annotation.ts","webpack://VexFlow/./src/stem.ts","webpack://VexFlow/./src/articulation.ts","webpack://VexFlow/./src/rendercontext.ts","webpack://VexFlow/./src/tickable.ts","webpack://VexFlow/./src/stavemodifier.ts","webpack://VexFlow/./src/stavebarline.ts","webpack://VexFlow/./src/chordsymbol.ts","webpack://VexFlow/./src/note.ts","webpack://VexFlow/./src/barnote.ts","webpack://VexFlow/./src/bend.ts","webpack://VexFlow/./src/dot.ts","webpack://VexFlow/./src/frethandfinger.ts","webpack://VexFlow/./src/notehead.ts","webpack://VexFlow/./src/stemmablenote.ts","webpack://VexFlow/./src/stavenote.ts","webpack://VexFlow/./src/stavetie.ts","webpack://VexFlow/./src/tabtie.ts","webpack://VexFlow/./src/voice.ts","webpack://VexFlow/./src/gracenotegroup.ts","webpack://VexFlow/./src/notesubgroup.ts","webpack://VexFlow/./src/ornament.ts","webpack://VexFlow/./src/parenthesis.ts","webpack://VexFlow/./src/web.ts","webpack://VexFlow/./src/canvascontext.ts","webpack://VexFlow/./src/svgcontext.ts","webpack://VexFlow/./src/renderer.ts","webpack://VexFlow/./src/stringnumber.ts","webpack://VexFlow/./src/strokes.ts","webpack://VexFlow/./src/vibrato.ts","webpack://VexFlow/./src/modifiercontext.ts","webpack://VexFlow/./src/clef.ts","webpack://VexFlow/./src/keysignature.ts","webpack://VexFlow/./src/staverepetition.ts","webpack://VexFlow/./src/stavesection.ts","webpack://VexFlow/./src/stavetempo.ts","webpack://VexFlow/./src/textnote.ts","webpack://VexFlow/./src/stavevolta.ts","webpack://VexFlow/./src/stavetext.ts","webpack://VexFlow/./src/timesignature.ts","webpack://VexFlow/./src/stave.ts","webpack://VexFlow/./src/staveconnector.ts","webpack://VexFlow/./src/tickcontext.ts","webpack://VexFlow/./src/formatter.ts","webpack://VexFlow/./src/tuplet.ts","webpack://VexFlow/./src/beam.ts","webpack://VexFlow/./src/clefnote.ts","webpack://VexFlow/./src/crescendo.ts","webpack://VexFlow/./src/curve.ts","webpack://VexFlow/./src/parser.ts","webpack://VexFlow/./src/easyscore.ts","webpack://VexFlow/./src/ghostnote.ts","webpack://VexFlow/./src/glyphnote.ts","webpack://VexFlow/./src/gracenote.ts","webpack://VexFlow/./src/keysignote.ts","webpack://VexFlow/./src/multimeasurerest.ts","webpack://VexFlow/./src/pedalmarking.ts","webpack://VexFlow/./src/repeatnote.ts","webpack://VexFlow/./src/staveline.ts","webpack://VexFlow/./src/system.ts","webpack://VexFlow/./src/tabnote.ts","webpack://VexFlow/./src/tabstave.ts","webpack://VexFlow/./src/textbracket.ts","webpack://VexFlow/./src/textdynamics.ts","webpack://VexFlow/./src/timesignote.ts","webpack://VexFlow/./src/vibratobracket.ts","webpack://VexFlow/./src/factory.ts","webpack://VexFlow/./src/stavehairpin.ts","webpack://VexFlow/./src/tabslide.ts","webpack://VexFlow/./src/tuning.ts","webpack://VexFlow/./src/vexflow.ts","webpack://VexFlow/./src/version.ts","webpack://VexFlow/./src/gracetabnote.ts","webpack://VexFlow/./src/keymanager.ts","webpack://VexFlow/./src/tremolo.ts","webpack://VexFlow/./src/fonts/academico.ts","webpack://VexFlow/./entry/vexflow-bravura.ts","webpack://VexFlow/./src/fonts/bravura.ts","webpack://VexFlow/./src/fonts/academicobold.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VexFlow\"] = factory();\n\telse\n\t\troot[\"VexFlow\"] = factory();\n})((typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object's CATEGORY matches the provided category.\n * @param category a string representing a category of VexFlow objects.\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` has a static `CATEGORY` property that matches `category`.\n */\nexport function isCategory(obj, category, checkAncestors = true) {\n    // obj is undefined, a number, a primitive string, or null.\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n    let constructorFcn = obj.constructor;\n    // Check if the object's static .CATEGORY matches the provided category.\n    if (checkAncestors) {\n        // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\n        while (obj !== null) {\n            constructorFcn = obj.constructor;\n            if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {\n                return true;\n            }\n            obj = Object.getPrototypeOf(obj);\n        }\n        return false;\n    }\n    else {\n        // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\n        return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;\n    }\n}\nexport const isAccidental = (obj) => isCategory(obj, Category.Accidental);\nexport const isAnnotation = (obj) => isCategory(obj, Category.Annotation);\nexport const isBarline = (obj) => isCategory(obj, Category.Barline);\nexport const isDot = (obj) => isCategory(obj, Category.Dot);\nexport const isGraceNote = (obj) => isCategory(obj, Category.GraceNote);\nexport const isGraceNoteGroup = (obj) => isCategory(obj, Category.GraceNoteGroup);\nexport const isNote = (obj) => isCategory(obj, Category.Note);\nexport const isRenderContext = (obj) => isCategory(obj, Category.RenderContext);\nexport const isStaveNote = (obj) => isCategory(obj, Category.StaveNote);\nexport const isStemmableNote = (obj) => isCategory(obj, Category.StemmableNote);\nexport const isTabNote = (obj) => isCategory(obj, Category.TabNote);\n// 'const' enums are erased by the TypeScript compiler. The string values are inlined at all the use sites.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#const-enums\nexport var Category;\n(function (Category) {\n    Category[\"Accidental\"] = \"Accidental\";\n    Category[\"Annotation\"] = \"Annotation\";\n    Category[\"Articulation\"] = \"Articulation\";\n    Category[\"Barline\"] = \"Barline\";\n    Category[\"BarNote\"] = \"BarNote\";\n    Category[\"Beam\"] = \"Beam\";\n    Category[\"Bend\"] = \"Bend\";\n    Category[\"ChordSymbol\"] = \"ChordSymbol\";\n    Category[\"Clef\"] = \"Clef\";\n    Category[\"ClefNote\"] = \"ClefNote\";\n    Category[\"Crescendo\"] = \"Crescendo\";\n    Category[\"Curve\"] = \"Curve\";\n    Category[\"Dot\"] = \"Dot\";\n    Category[\"Element\"] = \"Element\";\n    Category[\"Fraction\"] = \"Fraction\";\n    Category[\"FretHandFinger\"] = \"FretHandFinger\";\n    Category[\"GhostNote\"] = \"GhostNote\";\n    Category[\"Glyph\"] = \"Glyph\";\n    Category[\"GlyphNote\"] = \"GlyphNote\";\n    Category[\"GraceNote\"] = \"GraceNote\";\n    Category[\"GraceNoteGroup\"] = \"GraceNoteGroup\";\n    Category[\"GraceTabNote\"] = \"GraceTabNote\";\n    Category[\"KeySignature\"] = \"KeySignature\";\n    Category[\"KeySigNote\"] = \"KeySigNote\";\n    Category[\"Modifier\"] = \"Modifier\";\n    Category[\"MultiMeasureRest\"] = \"MultiMeasureRest\";\n    Category[\"Note\"] = \"Note\";\n    Category[\"NoteHead\"] = \"NoteHead\";\n    Category[\"NoteSubGroup\"] = \"NoteSubGroup\";\n    Category[\"Ornament\"] = \"Ornament\";\n    Category[\"Parenthesis\"] = \"Parenthesis\";\n    Category[\"PedalMarking\"] = \"PedalMarking\";\n    Category[\"RenderContext\"] = \"RenderContext\";\n    Category[\"RepeatNote\"] = \"RepeatNote\";\n    Category[\"Repetition\"] = \"Repetition\";\n    Category[\"Stave\"] = \"Stave\";\n    Category[\"StaveConnector\"] = \"StaveConnector\";\n    Category[\"StaveHairpin\"] = \"StaveHairpin\";\n    Category[\"StaveLine\"] = \"StaveLine\";\n    Category[\"StaveModifier\"] = \"StaveModifier\";\n    Category[\"StaveNote\"] = \"StaveNote\";\n    Category[\"StaveSection\"] = \"StaveSection\";\n    Category[\"StaveTempo\"] = \"StaveTempo\";\n    Category[\"StaveText\"] = \"StaveText\";\n    Category[\"StaveTie\"] = \"StaveTie\";\n    Category[\"Stem\"] = \"Stem\";\n    Category[\"StemmableNote\"] = \"StemmableNote\";\n    Category[\"StringNumber\"] = \"StringNumber\";\n    Category[\"Stroke\"] = \"Stroke\";\n    Category[\"System\"] = \"System\";\n    Category[\"TabNote\"] = \"TabNote\";\n    Category[\"TabSlide\"] = \"TabSlide\";\n    Category[\"TabStave\"] = \"TabStave\";\n    Category[\"TabTie\"] = \"TabTie\";\n    Category[\"TextBracket\"] = \"TextBracket\";\n    Category[\"TextDynamics\"] = \"TextDynamics\";\n    Category[\"TextNote\"] = \"TextNote\";\n    Category[\"Tickable\"] = \"Tickable\";\n    Category[\"TimeSignature\"] = \"TimeSignature\";\n    Category[\"TimeSigNote\"] = \"TimeSigNote\";\n    Category[\"Tremolo\"] = \"Tremolo\";\n    Category[\"Tuplet\"] = \"Tuplet\";\n    Category[\"Vibrato\"] = \"Vibrato\";\n    Category[\"VibratoBracket\"] = \"VibratoBracket\";\n    Category[\"Voice\"] = \"Voice\";\n    Category[\"Volta\"] = \"Volta\";\n})(Category || (Category = {}));\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// Note: Keep this module free of imports to reduce the chance of circular dependencies.\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n    constructor(code, message = '') {\n        super('[RuntimeError] ' + code + ': ' + message);\n        this.code = code;\n    }\n}\n/** VexFlow can be used outside of the browser (e.g., Node) where `window` may not be defined. */\n// eslint-disable-next-line\nexport function globalObject() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    return Function('return this')();\n}\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined(x, code = 'undefined', message = '') {\n    if (x === undefined) {\n        throw new RuntimeError(code, message);\n    }\n    return x;\n}\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block, ...args) {\n    if (!args)\n        return;\n    const line = Array.prototype.slice.call(args).join(' ');\n    globalObject().console.log(block + ': ' + line);\n}\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args) {\n    const line = args.join(' ');\n    const err = new Error();\n    globalObject().console.log('Warning: ', line, err.stack);\n}\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x, n) {\n    return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a, b) {\n    let midLine = b + (a - b) / 2;\n    if (midLine % 2 > 0) {\n        midLine = roundN(midLine * 10, 5) / 10;\n    }\n    return midLine;\n}\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text) {\n    return `vf-${text}`;\n}\n/**\n * @param s\n * @returns `s` with the first letter capitalized.\n */\nexport function upperFirst(s = '') {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n/**\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\n */\nexport function normalizeAngle(a) {\n    a = a % (2 * Math.PI);\n    if (a < 0) {\n        a += 2 * Math.PI;\n    }\n    return a;\n}\n/**\n * Return the sum of an array of numbers.\n */\nexport function sumArray(arr) {\n    return arr.reduce((a, b) => a + b, 0);\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// Moved from vex.ts to util.ts.\n/**\n * Take `arr` and return a new array consisting of the sorted, unique'd,\n * contents of arr. Does not modify `arr`.\n */\n// eslint-disable-next-line\n/*\n  static sortAndUnique(arr: any[], cmp: any, eq: any): any[] {\n    if (arr.length > 1) {\n      const newArr = [];\n      let last;\n      arr.sort(cmp);\n\n      for (let i = 0; i < arr.length; ++i) {\n        if (i === 0 || !eq(arr[i], last)) {\n          newArr.push(arr[i]);\n        }\n        last = arr[i];\n      }\n\n      return newArr;\n    } else {\n      return [].concat(arr); //\n    }\n  }\n  */\n// Get the 2D Canvas context from DOM element with id `canvasId`.\n/*\n  static getCanvasContext(canvasId: string): RenderingContext {\n    if (!canvasId) {\n      throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvasId);\n    }\n\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!(canvas && canvas.getContext)) {\n      throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n    }\n\n    return canvas.getContext('2d') as RenderingContext;\n  }\n  */\n/** Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds. */\n/*\n  static benchmark(s: any, f: any): void {\n    const startTime = new Date().getTime();\n    f();\n    const elapsed = new Date().getTime() - startTime;\n    log(s, elapsed + 'ms');\n  }\n  */\n// Get stack trace.\n/*\n  static stackTrace(): string | undefined {\n    const err = new Error();\n    return err.stack;\n  }\n  */\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// @author Joshua Koo / @zz85\n// @author @incompleteopus\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Fraction_fractionA, _Fraction_fractionB;\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/** Fraction represents a rational number. */\nexport class Fraction {\n    static get CATEGORY() {\n        return Category.Fraction;\n    }\n    /**\n     * GCD: Greatest common divisor using the Euclidean algorithm.\n     * Note: GCD(0, 0) => 0 and GCD(0, n) => n.\n     */\n    static GCD(a, b) {\n        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\n            throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n        }\n        let t;\n        while (b !== 0) {\n            t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n    /** LCM: Lowest common multiple. */\n    static LCM(a, b) {\n        return (a * b) / _a.GCD(a, b);\n    }\n    /** Lowest common multiple for more than two numbers. */\n    static LCMM(args) {\n        if (args.length === 0) {\n            return 0;\n        }\n        else if (args.length === 1) {\n            return args[0];\n        }\n        else if (args.length === 2) {\n            return _a.LCM(args[0], args[1]);\n        }\n        else {\n            // args.shift() removes the first number.\n            // LCM the first number with the rest of the numbers.\n            return _a.LCM(args.shift(), _a.LCMM(args));\n        }\n    }\n    /** Set the numerator and denominator. */\n    constructor(numerator, denominator) {\n        this.numerator = 1;\n        this.denominator = 1;\n        this.set(numerator, denominator);\n    }\n    /** Set the numerator and denominator. */\n    set(numerator = 1, denominator = 1) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n        return this;\n    }\n    /** Return the value of the fraction. */\n    value() {\n        return this.numerator / this.denominator;\n    }\n    /** Simplify numerator and denominator using GCD. */\n    simplify() {\n        let u = this.numerator;\n        let d = this.denominator;\n        const gcd = _a.GCD(u, d);\n        u /= gcd;\n        d /= gcd;\n        if (d < 0) {\n            d = -d;\n            u = -u;\n        }\n        return this.set(u, d);\n    }\n    /** Add value of another fraction. */\n    add(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = _a.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a + otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Substract value of another fraction. */\n    subtract(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = _a.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a - otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Multiply by value of another fraction. */\n    multiply(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n    }\n    /** Divide by value of another Fraction. */\n    divide(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n    }\n    /** Simplify both sides and check if they are equal. */\n    equals(compare) {\n        const a = __classPrivateFieldGet(_a, _a, \"f\", _Fraction_fractionA).copy(compare).simplify();\n        const b = __classPrivateFieldGet(_a, _a, \"f\", _Fraction_fractionB).copy(this).simplify();\n        return a.numerator === b.numerator && a.denominator === b.denominator;\n    }\n    /** Greater than operator. */\n    greaterThan(compare) {\n        const a = __classPrivateFieldGet(_a, _a, \"f\", _Fraction_fractionA).copy(this);\n        a.subtract(compare);\n        return a.numerator > 0;\n    }\n    /** Greater than or equals operator. */\n    greaterThanEquals(compare) {\n        const a = __classPrivateFieldGet(_a, _a, \"f\", _Fraction_fractionA).copy(this);\n        a.subtract(compare);\n        return a.numerator >= 0;\n    }\n    /** Less than operator. */\n    lessThan(compare) {\n        return !this.greaterThanEquals(compare);\n    }\n    /** Less than or equals operator. */\n    lessThanEquals(compare) {\n        return !this.greaterThan(compare);\n    }\n    /** Return a new copy with current values. */\n    clone() {\n        return new _a(this.numerator, this.denominator);\n    }\n    /** Copy value of another fraction. */\n    copy(other) {\n        if (typeof other === 'number') {\n            return this.set(other);\n        }\n        else {\n            return this.set(other.numerator, other.denominator);\n        }\n    }\n    /** Return the integer component (eg. 5/2 => 2). */\n    quotient() {\n        return Math.floor(this.numerator / this.denominator);\n    }\n    /** Return the remainder component (eg. 5/2 => 1). */\n    remainder() {\n        return this.numerator % this.denominator;\n    }\n    /** Calculate absolute value. */\n    makeAbs() {\n        this.denominator = Math.abs(this.denominator);\n        this.numerator = Math.abs(this.numerator);\n        return this;\n    }\n    /** Return a raw string representation (eg. \"5/2\"). */\n    toString() {\n        return `${this.numerator}/${this.denominator}`;\n    }\n    /** Return a simplified string respresentation. */\n    toSimplifiedString() {\n        return __classPrivateFieldGet(_a, _a, \"f\", _Fraction_fractionA).copy(this).simplify().toString();\n    }\n    /** Return string representation in mixed form. */\n    toMixedString() {\n        let s = '';\n        const q = this.quotient();\n        const f = __classPrivateFieldGet(_a, _a, \"f\", _Fraction_fractionA).copy(this);\n        if (q < 0) {\n            f.makeAbs();\n        }\n        if (q !== 0) {\n            s += q;\n            if (f.numerator !== 0) {\n                s += ` ${f.toSimplifiedString()}`;\n            }\n        }\n        else if (f.numerator === 0) {\n            s = '0';\n        }\n        else {\n            s = f.toSimplifiedString();\n        }\n        return s;\n    }\n    /** Parse a fraction string. */\n    parse(str) {\n        const i = str.split('/');\n        const n = parseInt(i[0], 10);\n        const d = i[1] ? parseInt(i[1], 10) : 1;\n        return this.set(n, d);\n    }\n}\n_a = Fraction;\n// Cached objects for comparisons.\n_Fraction_fractionA = { value: new _a() };\n_Fraction_fractionB = { value: new _a() };\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n, d = 1) {\n    if (typeof n === 'number') {\n        // Both params are numbers, so we return them as [numerator, denominator].\n        return [n, d];\n    }\n    else {\n        // First param is a Fraction object. We ignore the second param.\n        return [n.numerator, n.denominator];\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nexport class Metrics {\n    /** Use the provided key to look up a FontInfo in CommonMetrics. **/\n    static getFontInfo(key) {\n        return {\n            family: Metrics.get(`${key}.fontFamily`),\n            size: Metrics.get(`${key}.fontSize`) * Metrics.get(`${key}.fontScale`),\n            weight: Metrics.get(`${key}.fontWeight`),\n            style: Metrics.get(`${key}.fontStyle`),\n        };\n    }\n    /**\n     * Use the provided key to look up a value in CommonMetrics.\n     *\n     * @param key is a string separated by periods (e.g., `Stroke.text.fontFamily`).\n     * @param defaultValue is returned if the lookup fails.\n     * @returns the retrieved value (or `defaultValue` if the lookup fails).\n     *\n     * For the key `Stroke.text.fontFamily`, check all of the following in order:\n     *   1) CommonMetrics.fontFamily\n     *   2) CommonMetrics.Stroke.fontFamily\n     *   3) CommonMetrics.Stroke.text.fontFamily\n     * Retrieve the value from the most specific key (i.e., prefer #3 over #2 over #1 in the above example).\n     */\n    // eslint-disable-next-line\n    static get(key, defaultValue) {\n        var _a;\n        const keyParts = key.split('.');\n        const lastKeyPart = keyParts.pop(); // Use ! because keyParts is not empty, since ''.split('.') still returns [''].\n        // Start from root of CommonMetrics and go down as far as possible.\n        let curr = MetricsDefaults;\n        let retVal = defaultValue;\n        while (curr) {\n            // Update retVal whenever we find a value assigned to a more specific key.\n            retVal = (_a = curr[lastKeyPart]) !== null && _a !== void 0 ? _a : retVal;\n            const keyPart = keyParts.shift();\n            if (keyPart) {\n                curr = curr[keyPart]; // Go down one level.\n            }\n            else {\n                break;\n            }\n        }\n        return retVal;\n    }\n}\n// eslint-disable-next-line\nexport const MetricsDefaults = {\n    fontFamily: 'Bravura,Academico',\n    fontSize: 30,\n    fontScale: 1.0,\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    Accidental: {\n        cautionary: {\n            fontSize: 20,\n        },\n        grace: {\n            fontSize: 25,\n        },\n        noteheadAccidentalPadding: 1,\n        leftPadding: 2,\n        accidentalSpacing: 3,\n    },\n    Annotation: {\n        fontSize: 10,\n    },\n    Bend: {\n        fontSize: 10,\n    },\n    ChordSymbol: {\n        fontSize: 12,\n        spacing: 0.05,\n        subscriptOffset: 0.2,\n        superscriptOffset: -0.4,\n        superSubRatio: 0.6,\n    },\n    FretHandFinger: {\n        fontSize: 9,\n        fontWeight: 'bold',\n    },\n    GraceNote: {\n        fontScale: 2 / 3,\n    },\n    GraceTabNote: {\n        fontScale: 2 / 3,\n    },\n    NoteHead: {\n        minPadding: 2,\n    },\n    PedalMarking: {\n        text: {\n            fontSize: 12,\n            fontStyle: 'italic',\n        },\n    },\n    Repetition: {\n        text: {\n            fontSize: 12,\n            fontWeight: 'bold',\n            offsetX: 12,\n            offsetY: 25,\n            spacing: 5,\n        },\n        coda: {\n            offsetY: 25,\n        },\n        segno: {\n            offsetY: 10,\n        },\n    },\n    Stave: {\n        fontSize: 8,\n        padding: 12,\n        endPaddingMax: 10,\n        endPaddingMin: 5,\n        unalignedNotePadding: 10,\n    },\n    StaveConnector: {\n        text: {\n            fontSize: 16,\n        },\n    },\n    StaveLine: {\n        fontSize: 10,\n    },\n    StaveSection: {\n        fontSize: 10,\n        fontWeight: 'bold',\n    },\n    StaveTempo: {\n        fontSize: 14,\n        glyph: {\n            fontSize: 25,\n        },\n        name: {\n            fontWeight: 'bold',\n        },\n    },\n    StaveText: {\n        fontSize: 16,\n    },\n    StaveTie: {\n        fontSize: 10,\n    },\n    StringNumber: {\n        fontSize: 10,\n        fontWeight: 'bold',\n        verticalPadding: 8,\n        stemPadding: 2,\n        leftPadding: 5,\n        rightPadding: 6,\n    },\n    Stroke: {\n        text: {\n            fontSize: 10,\n            fontStyle: 'italic',\n            fontWeight: 'bold',\n        },\n    },\n    TabNote: {\n        text: {\n            fontSize: 9,\n        },\n    },\n    TabSlide: {\n        fontSize: 10,\n        fontStyle: 'italic',\n        fontWeight: 'bold',\n    },\n    TabTie: {\n        fontSize: 10,\n    },\n    TextBracket: {\n        fontSize: 15,\n        fontStyle: 'italic',\n    },\n    TextNote: {\n        text: {\n            fontSize: 12,\n        },\n    },\n    Tremolo: {\n        spacing: 7,\n    },\n    Volta: {\n        fontSize: 9,\n        fontWeight: 'bold',\n    },\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nexport class BoundingBox {\n    /**\n     * Create a new copy.\n     */\n    static copy(that) {\n        return new BoundingBox(that.x, that.y, that.w, that.h);\n    }\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    /** Get x position. */\n    getX() {\n        return this.x;\n    }\n    /** Get y position. */\n    getY() {\n        return this.y;\n    }\n    /** Get width. */\n    getW() {\n        return this.w;\n    }\n    /** Get height. */\n    getH() {\n        return this.h;\n    }\n    /** Set x position. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Set y position. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Set width. */\n    setW(w) {\n        this.w = w;\n        return this;\n    }\n    /** Set height. */\n    setH(h) {\n        this.h = h;\n        return this;\n    }\n    /** Move to position. */\n    move(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n    /** Clone. */\n    clone() {\n        return BoundingBox.copy(this);\n    }\n    /**\n     * Merge my box with given box. Creates a bigger bounding box unless\n     * the given box is contained in this one.\n     */\n    mergeWith(boundingBox) {\n        const that = boundingBox;\n        const newX = this.x < that.x ? this.x : that.x;\n        const newY = this.y < that.y ? this.y : that.y;\n        const newW = Math.max(this.x + this.w, that.x + that.w) - newX;\n        const newH = Math.max(this.y + this.h, that.y + that.h) - newY;\n        this.x = newX;\n        this.y = newY;\n        this.w = newW;\n        this.h = newH;\n        return this;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Metrics } from './metrics';\nexport var FontWeight;\n(function (FontWeight) {\n    FontWeight[\"NORMAL\"] = \"normal\";\n    FontWeight[\"BOLD\"] = \"bold\";\n})(FontWeight || (FontWeight = {}));\nexport var FontStyle;\n(function (FontStyle) {\n    FontStyle[\"NORMAL\"] = \"normal\";\n    FontStyle[\"ITALIC\"] = \"italic\";\n})(FontStyle || (FontStyle = {}));\n// Internal <span></span> element for parsing CSS font shorthand strings.\nlet fontParser;\nexport class Font {\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of pixels that is equivalent to `fontSize`\n     */\n    static convertSizeToPixelValue(fontSize) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize * Font.scaleToPxFrom.pt;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of points that is equivalent to `fontSize`\n     */\n    static convertSizeToPointValue(fontSize) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param f\n     * @param size\n     * @param weight\n     * @param style\n     * @returns the `size` field will include the units (e.g., '12pt', '16px').\n     */\n    static validate(f, size, weight, style) {\n        // If f is a string but all other arguments are undefined, we assume that\n        // f is CSS font shorthand (e.g., 'italic bold 10pt Arial').\n        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\n            return Font.fromCSSString(f);\n        }\n        let family;\n        if (typeof f === 'object') {\n            // f is a FontInfo object, so we extract its fields.\n            family = f.family;\n            size = f.size;\n            weight = f.weight;\n            style = f.style;\n        }\n        else {\n            // f is a string representing the font family name or undefined.\n            family = f;\n        }\n        family = family !== null && family !== void 0 ? family : Metrics.get('fontFamily');\n        size = size !== null && size !== void 0 ? size : Metrics.get('fontSize') + 'pt';\n        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\n        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\n        if (weight === '') {\n            weight = FontWeight.NORMAL;\n        }\n        if (style === '') {\n            style = FontStyle.NORMAL;\n        }\n        // If size is a number, we assume the unit is `pt`.\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        // If weight is a number (e.g., 900), turn it into a string representation of that number.\n        if (typeof weight === 'number') {\n            weight = weight.toString();\n        }\n        // At this point, `family`, `size`, `weight`, and `style` are all strings.\n        return { family, size, weight, style };\n    }\n    /**\n     * @param cssFontShorthand a string formatted as CSS font shorthand (e.g., 'italic bold 15pt Arial').\n     */\n    static fromCSSString(cssFontShorthand) {\n        // Let the browser parse this string for us.\n        // First, create a span element.\n        // Then, set its style.font and extract it back out.\n        if (!fontParser) {\n            fontParser = document.createElement('span');\n        }\n        fontParser.style.font = cssFontShorthand;\n        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;\n        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };\n    }\n    /**\n     * @returns a CSS font shorthand string of the form `italic bold 16pt Arial`.\n     */\n    static toCSSString(fontInfo) {\n        var _a;\n        if (!fontInfo) {\n            return '';\n        }\n        let style;\n        const st = fontInfo.style;\n        if (st === FontStyle.NORMAL || st === '' || st === undefined) {\n            style = ''; // no space! Omit the style section.\n        }\n        else {\n            style = st.trim() + ' ';\n        }\n        let weight;\n        const wt = fontInfo.weight;\n        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\n            weight = ''; // no space! Omit the weight section.\n        }\n        else if (typeof wt === 'number') {\n            weight = wt + ' ';\n        }\n        else {\n            weight = wt.trim() + ' ';\n        }\n        let size;\n        const sz = fontInfo.size;\n        if (sz === undefined) {\n            size = Metrics.get('fontSize') + 'pt';\n        }\n        else if (typeof sz === 'number') {\n            size = sz + 'pt ';\n        }\n        else {\n            // size is already a string.\n            size = sz.trim() + ' ';\n        }\n        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Metrics.get('fontFamily');\n        return `${style}${weight}${size}${family}`;\n    }\n    /**\n     * @param fontSize a number representing a font size, or a string font size with units.\n     * @param scaleFactor multiply the size by this factor.\n     * @returns size * scaleFactor (e.g., 16pt * 3 = 48pt, 8px * 0.5 = 4px, 24 * 2 = 48).\n     * If the fontSize argument was a number, the return value will be a number.\n     * If the fontSize argument was a string, the return value will be a string.\n     */\n    static scaleSize(fontSize, scaleFactor) {\n        if (typeof fontSize === 'number') {\n            return (fontSize * scaleFactor);\n        }\n        else {\n            const value = parseFloat(fontSize);\n            const unit = fontSize.replace(/[\\d.\\s]/g, ''); // Remove all numbers, dots, spaces.\n            return `${value * scaleFactor}${unit}`;\n        }\n    }\n    /**\n     * @param weight a string (e.g., 'bold') or a number (e.g., 600 / semi-bold in the OpenType spec).\n     * @returns true if the font weight indicates bold.\n     */\n    static isBold(weight) {\n        if (!weight) {\n            return false;\n        }\n        else if (typeof weight === 'number') {\n            return weight >= 600;\n        }\n        else {\n            // a string can be 'bold' or '700'\n            const parsedWeight = parseInt(weight, 10);\n            if (isNaN(parsedWeight)) {\n                return weight.toLowerCase() === 'bold';\n            }\n            else {\n                return parsedWeight >= 600;\n            }\n        }\n    }\n    /**\n     * @param style\n     * @returns true if the font style indicates 'italic'.\n     */\n    static isItalic(style) {\n        if (!style) {\n            return false;\n        }\n        else {\n            return style.toLowerCase() === FontStyle.ITALIC;\n        }\n    }\n    /**\n     * This method is asynchronous, so you should use await or .then() to wait for the fonts to load before proceeding.\n     *\n     * @param fontName\n     * @param url The absolute or relative URL to the woff2/otf file. It can also be a data URI.\n     * @param descriptors See: https://developer.mozilla.org/en-US/docs/Web/API/FontFace/FontFace#descriptors\n     */\n    static load(fontName, url, descriptors) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof FontFace === 'undefined') {\n                return Promise.reject(new Error('FontFace API is not available in this environment. Cannot load fonts.'));\n            }\n            // If url is not specified, we load the font from the jsDelivr CDN.\n            if (url === undefined) {\n                const files = Font.FILES;\n                if (!(fontName in files)) {\n                    return Promise.reject(new Error(`Font ${fontName} not found in Font.FILES`));\n                }\n                url = Font.HOST_URL + files[fontName];\n            }\n            const fontFace = new FontFace(fontName, `url(${url})`, descriptors);\n            const fontFaceLoadPromise = fontFace.load();\n            // https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet\n            let fontFaceSet;\n            if (typeof document !== 'undefined') {\n                fontFaceSet = document.fonts;\n            }\n            else if (typeof self !== 'undefined' && 'fonts' in self) {\n                // Workers do not have a document object.\n                // https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/fonts\n                // eslint-disable-next-line\n                fontFaceSet = self.fonts;\n            }\n            fontFaceSet === null || fontFaceSet === void 0 ? void 0 : fontFaceSet.add(fontFace);\n            return fontFaceLoadPromise;\n        });\n    }\n    static getURLForFont(fontName) {\n        const files = Font.FILES;\n        if (!(fontName in files)) {\n            return undefined;\n        }\n        return Font.HOST_URL + files[fontName];\n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// STATIC MEMBERS\n// CSS Font Sizes: 36pt == 48px == 3em == 300% == 0.5in\n/** Given a length (for units: pt, px, em, %, in, mm, cm) what is the scale factor to convert it to px? */\nFont.scaleToPxFrom = {\n    pt: 4 / 3,\n    px: 1,\n    em: 16,\n    '%': 4 / 25,\n    in: 96,\n    mm: 96 / 25.4,\n    cm: 96 / 2.54,\n};\n/**\n * Customize this field to specify a different CDN for delivering web fonts.\n * Discussion on GDPR concerns:\n * https://www.jsdelivr.com/blog/how-the-german-courts-ruling-on-google-fonts-affects-jsdelivr-and-why-it-is-safe-to-use/\n *\n * You can also self host, and specify your own server URL here.\n */\nFont.HOST_URL = 'https://cdn.jsdelivr.net/npm/@vexflow-fonts/';\n/**\n * These font files will be loaded from the CDN specified by `Font.HOST_URL`.\n * `await VexFlow.loadFonts()` loads all of the fonts below. Useful during debugging.\n * `await VexFlow.loadFonts(FontName1, FontName2)` loads only the specified fonts.\n */\nFont.FILES = {\n    Academico: 'academico/academico.woff2',\n    Bravura: 'bravura/bravura.woff2',\n    'Bravura Text': 'bravuratext/bravuratext.woff2',\n    Edwin: 'edwin/edwin-roman.woff2',\n    'Finale Ash': 'finaleash/finaleash.woff2',\n    'Finale Ash Text': 'finaleashtext/finaleashtext.woff2',\n    'Finale Broadway': 'finalebroadway/finalebroadway.woff2',\n    'Finale Broadway Text': 'finalebroadwaytext/finalebroadwaytext.woff2',\n    'Finale Jazz': 'finalejazz/finalejazz.woff2',\n    'Finale Jazz Text': 'finalejazztext/finalejazztext.woff2',\n    'Finale Maestro': 'finalemaestro/finalemaestro.woff2',\n    'Finale Maestro Text': 'finalemaestrotext/finalemaestrotext-regular.woff2',\n    Gonville: 'gonville/gonville.woff2',\n    Gootville: 'gootville/gootville.woff2',\n    'Gootville Text': 'gootvilletext/gootvilletext.woff2',\n    Leipzig: 'leipzig/leipzig.woff2',\n    Leland: 'leland/leland.woff2',\n    'Leland Text': 'lelandtext/lelandtext.woff2',\n    MuseJazz: 'musejazz/musejazz.woff2',\n    'MuseJazz Text': 'musejazztext/musejazztext.woff2',\n    Nepomuk: 'nepomuk/nepomuk.woff2',\n    Petaluma: 'petaluma/petaluma.woff2',\n    'Petaluma Script': 'petalumascript/petalumascript.woff2',\n    'Petaluma Text': 'petalumatext/petalumatext.woff2',\n    'Roboto Slab': 'robotoslab/robotoslab-regular-400.woff2',\n    Sebastian: 'sebastian/sebastian.woff2',\n    'Sebastian Text': 'sebastiantext/sebastiantext.woff2',\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _a, _Registry_defaultRegistry;\nimport { RuntimeError } from './util';\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n    constructor() {\n        this.id = {};\n        this.type = {};\n        this.class = {};\n    }\n}\nexport class Registry {\n    static getDefaultRegistry() {\n        return __classPrivateFieldGet(_a, _a, \"f\", _Registry_defaultRegistry);\n    }\n    // If you call `enableDefaultRegistry`, any new elements will auto-register with\n    // the provided registry as soon as they're constructed.\n    static enableDefaultRegistry(registry) {\n        __classPrivateFieldSet(_a, _a, registry, \"f\", _Registry_defaultRegistry);\n    }\n    static disableDefaultRegistry() {\n        __classPrivateFieldSet(_a, _a, undefined, \"f\", _Registry_defaultRegistry);\n    }\n    constructor() {\n        this.index = new Index();\n    }\n    clear() {\n        this.index = new Index();\n        return this;\n    }\n    setIndexValue(name, value, id, elem) {\n        const index = this.index;\n        if (!index[name][value]) {\n            index[name][value] = {};\n        }\n        index[name][value][id] = elem;\n    }\n    // Updates the indexes for element 'id'. If an element's attribute changes\n    // from A -> B, make sure to remove the element from A.\n    updateIndex({ id, name, value, oldValue }) {\n        const elem = this.getElementById(id);\n        if (oldValue !== undefined && this.index[name][oldValue]) {\n            delete this.index[name][oldValue][id];\n        }\n        if (value && elem) {\n            this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n        }\n    }\n    /**\n     * Register element `elem` with this registry.\n     * This adds the element to its index and watches it for attribute changes.\n     * @param elem\n     * @param id\n     * @returns this\n     */\n    register(elem, id) {\n        id = id || elem.getAttribute('id');\n        if (!id) {\n            throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n        }\n        // Manually add id to index, then update other indexes.\n        elem.setAttribute('id', id);\n        this.setIndexValue('id', id, id, elem);\n        this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n        elem.onRegister(this);\n        return this;\n    }\n    getElementById(id) {\n        var _b, _c;\n        return (_c = (_b = this.index.id) === null || _b === void 0 ? void 0 : _b[id]) === null || _c === void 0 ? void 0 : _c[id]; // return undefined if the id is not found.\n    }\n    getElementsByAttribute(attribute, value) {\n        const indexAttr = this.index[attribute];\n        if (indexAttr) {\n            const indexAttrVal = indexAttr[value];\n            if (indexAttrVal) {\n                const keys = Object.keys(indexAttrVal);\n                return keys.map((k) => indexAttrVal[k]);\n            }\n        }\n        return [];\n    }\n    getElementsByType(type) {\n        return this.getElementsByAttribute('type', type);\n    }\n    getElementsByClass(className) {\n        return this.getElementsByAttribute('class', className);\n    }\n    // This is called by the element when an attribute value changes. If an indexed\n    // attribute changes, then update the local index.\n    onUpdate(info) {\n        const allowedNames = ['id', 'type', 'class'];\n        if (allowedNames.includes(info.name)) {\n            this.updateIndex(info);\n        }\n        return this;\n    }\n}\n_a = Registry;\n_Registry_defaultRegistry = { value: void 0 };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Element_txtCanvas, _Element_context, _Element_attrs, _Element_fontInfo, _Element_fontScale, _Element_text, _Element_metricsValid, _Element_textMetrics, _Element_height, _Element_width;\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Registry } from './registry';\nimport { Category } from './typeguard';\nimport { defined, prefix, RuntimeError } from './util';\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n *\n * The Element handles style and font properties for the Element and any child\n * elements, along with working with the Registry to create unique ids.\n *\n * The `text` is a series of unicode characters (including SMuFL codes).\n * The `textFont` property contains information required to style the text (i.e., font family, size, weight, and style).\n * This font family is a comma separated list of fonts.\n * The method `measureText` calculates the `textMetrics`, `boundingBox`, `height` and `width` of the `text`.\n * The method `renderText(...)` will render the text using the provided context and coordinates,\n * taking `xShift` and `yShift` into account.\n */\nexport class Element {\n    static get CATEGORY() {\n        return Category.Element;\n    }\n    static newID() {\n        return `auto${_a.ID++}`;\n    }\n    // Note: Canvas is node-canvas.\n    // https://www.npmjs.com/package/canvas\n    static setTextMeasurementCanvas(canvas /* | Canvas */) {\n        __classPrivateFieldSet(_a, _a, canvas, \"f\", _Element_txtCanvas);\n    }\n    static getTextMeasurementCanvas() {\n        let txtCanvas = __classPrivateFieldGet(_a, _a, \"f\", _Element_txtCanvas);\n        // Create the canvas element that will be used to measure text.\n        if (!txtCanvas) {\n            if (typeof document !== 'undefined') {\n                txtCanvas = document.createElement('canvas'); // Defaults to 300 x 150. See: https://www.w3.org/TR/2012/WD-html5-author-20120329/the-canvas-element.html#the-canvas-element\n            }\n            else if (typeof OffscreenCanvas !== 'undefined') {\n                txtCanvas = new OffscreenCanvas(300, 150);\n            }\n            __classPrivateFieldSet(_a, _a, txtCanvas, \"f\", _Element_txtCanvas);\n        }\n        return txtCanvas;\n    }\n    constructor(category) {\n        var _b;\n        // Element objects keep a list of children that they are responsible for.\n        // Children inherit the style from their parents (see: setGroupStyle(s)).\n        this.children = [];\n        _Element_context.set(this, void 0);\n        _Element_attrs.set(this, void 0);\n        _Element_fontInfo.set(this, void 0);\n        _Element_fontScale.set(this, void 0);\n        _Element_text.set(this, '');\n        _Element_metricsValid.set(this, false);\n        _Element_textMetrics.set(this, {\n            fontBoundingBoxAscent: 0,\n            fontBoundingBoxDescent: 0,\n            actualBoundingBoxAscent: 0,\n            actualBoundingBoxDescent: 0,\n            actualBoundingBoxLeft: 0,\n            actualBoundingBoxRight: 0,\n            width: 0,\n            alphabeticBaseline: 0,\n            emHeightAscent: 0,\n            emHeightDescent: 0,\n            hangingBaseline: 0,\n            ideographicBaseline: 0,\n        });\n        _Element_height.set(this, 0);\n        _Element_width.set(this, 0);\n        this.xShift = 0;\n        this.yShift = 0;\n        this.x = 0;\n        this.y = 0;\n        __classPrivateFieldSet(this, _Element_attrs, {\n            id: _a.newID(),\n            type: category !== null && category !== void 0 ? category : this.constructor.CATEGORY,\n            class: '',\n        }, \"f\");\n        this.rendered = false;\n        __classPrivateFieldSet(this, _Element_fontInfo, Metrics.getFontInfo(__classPrivateFieldGet(this, _Element_attrs, \"f\").type), \"f\");\n        __classPrivateFieldSet(this, _Element_fontScale, Metrics.get(`${__classPrivateFieldGet(this, _Element_attrs, \"f\").type}.fontScale`), \"f\");\n        // If a default registry exist, then register with it right away.\n        (_b = Registry.getDefaultRegistry()) === null || _b === void 0 ? void 0 : _b.register(this);\n    }\n    /**\n     * Adds a child Element to the Element, which lets it inherit the\n     * same style as the parent when setGroupStyle() is called.\n     *\n     * Examples of children are noteheads and stems.  Modifiers such\n     * as Accidentals are generally not set as children.\n     *\n     * Note that StaveNote calls setGroupStyle() when setStyle() is called.\n     */\n    addChildElement(child) {\n        this.children.push(child);\n        return this;\n    }\n    getCategory() {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\").type;\n    }\n    /**\n     * Set the element style used to render.\n     *\n     * Example:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.draw();\n     * ```\n     * Note: If the element draws additional sub-elements (ie.: Modifiers in a Stave),\n     * the style can be applied to all of them by means of the context:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.getContext().setFillStyle('red');\n     * element.getContext().setStrokeStyle('red');\n     * element.draw();\n     * ```\n     * or using drawWithStyle:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.drawWithStyle();\n     * ```\n     */\n    setStyle(style) {\n        this.style = style;\n        return this;\n    }\n    /** Set the element & associated children style used for rendering. */\n    setGroupStyle(style) {\n        this.style = style;\n        this.children.forEach((child) => child.setGroupStyle(style));\n        return this;\n    }\n    /** Get the element style used for rendering. */\n    getStyle() {\n        return this.style;\n    }\n    /** Apply the element style to `context`. */\n    applyStyle(context = __classPrivateFieldGet(this, _Element_context, \"f\"), style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.save();\n        if (style.shadowColor)\n            context.setShadowColor(style.shadowColor);\n        if (style.shadowBlur)\n            context.setShadowBlur(style.shadowBlur);\n        if (style.fillStyle)\n            context.setFillStyle(style.fillStyle);\n        if (style.strokeStyle)\n            context.setStrokeStyle(style.strokeStyle);\n        if (style.lineWidth)\n            context.setLineWidth(style.lineWidth);\n        if (style.lineDash)\n            context.setLineDash(style.lineDash.split(' ').map(Number));\n        return this;\n    }\n    /** Restore the style of `context`. */\n    restoreStyle(context = __classPrivateFieldGet(this, _Element_context, \"f\"), style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.restore();\n        return this;\n    }\n    /**\n     * Draw the element and all its sub-elements (ie.: Modifiers in a Stave)\n     * with the element's style (see `getStyle()` and `setStyle()`)\n     */\n    drawWithStyle() {\n        this.checkContext();\n        this.applyStyle();\n        this.draw();\n        this.restoreStyle();\n    }\n    /** Draw an element. */\n    draw() {\n        throw new RuntimeError('Element', 'Draw not defined');\n    }\n    /** Check if it has a class label (An element can have multiple class labels). */\n    hasClass(className) {\n        var _b;\n        if (!__classPrivateFieldGet(this, _Element_attrs, \"f\").class)\n            return false;\n        return ((_b = __classPrivateFieldGet(this, _Element_attrs, \"f\").class) === null || _b === void 0 ? void 0 : _b.split(' ').indexOf(className)) !== -1;\n    }\n    /** Add a class label (An element can have multiple class labels). */\n    addClass(className) {\n        var _b;\n        if (this.hasClass(className))\n            return this;\n        if (!__classPrivateFieldGet(this, _Element_attrs, \"f\").class)\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = `${className}`;\n        else\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = `${__classPrivateFieldGet(this, _Element_attrs, \"f\").class} ${className}`;\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({\n            id: __classPrivateFieldGet(this, _Element_attrs, \"f\").id,\n            name: 'class',\n            value: className,\n            oldValue: undefined,\n        });\n        return this;\n    }\n    /** Remove a class label (An element can have multiple class labels). */\n    removeClass(className) {\n        var _b, _c;\n        if (!this.hasClass(className))\n            return this;\n        const arr = (_b = __classPrivateFieldGet(this, _Element_attrs, \"f\").class) === null || _b === void 0 ? void 0 : _b.split(' ');\n        if (arr) {\n            arr.splice(arr.indexOf(className));\n            __classPrivateFieldGet(this, _Element_attrs, \"f\").class = arr.join(' ');\n        }\n        (_c = this.registry) === null || _c === void 0 ? void 0 : _c.onUpdate({\n            id: __classPrivateFieldGet(this, _Element_attrs, \"f\").id,\n            name: 'class',\n            value: undefined,\n            oldValue: className,\n        });\n        return this;\n    }\n    /** Call back from registry after the element is registered. */\n    onRegister(registry) {\n        this.registry = registry;\n        return this;\n    }\n    /** Return the rendered status. */\n    isRendered() {\n        return this.rendered;\n    }\n    /** Set the rendered status. */\n    setRendered(rendered = true) {\n        this.rendered = rendered;\n        return this;\n    }\n    /** Return the element attributes. */\n    getAttributes() {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\");\n    }\n    /** Return an attribute, such as 'id', 'type' or 'class'. */\n    // eslint-disable-next-line\n    getAttribute(name) {\n        return __classPrivateFieldGet(this, _Element_attrs, \"f\")[name];\n    }\n    /** Return associated SVGElement. */\n    getSVGElement(suffix = '') {\n        const id = prefix(__classPrivateFieldGet(this, _Element_attrs, \"f\").id + suffix);\n        const element = document.getElementById(id);\n        if (element)\n            return element;\n    }\n    /** Set an attribute such as 'id', 'class', or 'type'. */\n    setAttribute(name, value) {\n        var _b;\n        const oldID = __classPrivateFieldGet(this, _Element_attrs, \"f\").id;\n        const oldValue = __classPrivateFieldGet(this, _Element_attrs, \"f\")[name];\n        __classPrivateFieldGet(this, _Element_attrs, \"f\")[name] = value;\n        // Register with old id to support id changes.\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({ id: oldID, name, value, oldValue });\n        return this;\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        return new BoundingBox(this.x + this.xShift, this.y + this.yShift - this.textMetrics.actualBoundingBoxAscent, this.width, this.height);\n    }\n    /** Return the context, such as an SVGContext or CanvasContext object. */\n    getContext() {\n        return __classPrivateFieldGet(this, _Element_context, \"f\");\n    }\n    /** Set the context to an SVGContext or CanvasContext object */\n    setContext(context) {\n        __classPrivateFieldSet(this, _Element_context, context, \"f\");\n        return this;\n    }\n    /** Validate and return the rendering context. */\n    checkContext() {\n        return defined(__classPrivateFieldGet(this, _Element_context, \"f\"), 'NoContext', 'No rendering context attached to instance.');\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // Font Handling\n    /**\n     * Provide a CSS compatible font string (e.g., 'bold 16px Arial') that will be applied\n     * to text (not glyphs).\n     */\n    set font(f) {\n        this.setFont(f);\n    }\n    /** Returns the CSS compatible font string for the text font. */\n    get font() {\n        return Font.toCSSString(__classPrivateFieldGet(this, _Element_fontInfo, \"f\"));\n    }\n    /**\n     * Set the element's text font family, size, weight, style\n     * (e.g., `Arial`, `10pt`, `bold`, `italic`).\n     *\n     * This attribute does not determine the font used for musical Glyphs like treble clefs.\n     *\n     * @param font is 1) a `FontInfo` object or\n     *                2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *                3) a string representing the font family (at least one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     * If no arguments are provided, then the font is set to the default font.\n     * Each Element subclass may specify its own default by overriding the static `TEXT_FONT` property.\n     */\n    setFont(font, size, weight, style) {\n        const defaultTextFont = Metrics.getFontInfo(__classPrivateFieldGet(this, _Element_attrs, \"f\").type);\n        const fontIsObject = typeof font === 'object';\n        const fontIsString = typeof font === 'string';\n        const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;\n        __classPrivateFieldSet(this, _Element_metricsValid, false, \"f\");\n        if (fontIsObject) {\n            // `font` is case 1) a FontInfo object\n            __classPrivateFieldSet(this, _Element_fontInfo, Object.assign(Object.assign({}, defaultTextFont), font), \"f\");\n        }\n        else if (fontIsString && sizeWeightStyleAreUndefined) {\n            // `font` is case 2) CSS font shorthand.\n            __classPrivateFieldSet(this, _Element_fontInfo, Font.fromCSSString(font), \"f\");\n        }\n        else {\n            // `font` is case 3) a font family string (e.g., 'Times New Roman').\n            // The other parameters represent the size, weight, and style.\n            // It is okay for `font` to be undefined while one or more of the other arguments is provided.\n            // Following CSS conventions, unspecified params are reset to the default.\n            __classPrivateFieldSet(this, _Element_fontInfo, Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style), \"f\");\n        }\n        return this;\n    }\n    /**\n     * Get the css string describing this Element's text font. e.g.,\n     * 'bold 10pt Arial'.\n     */\n    getFont() {\n        return Font.toCSSString(__classPrivateFieldGet(this, _Element_fontInfo, \"f\"));\n    }\n    /** Return a copy of the current FontInfo object. */\n    get fontInfo() {\n        // We can cast to Required<FontInfo> here, because\n        // we just called resetFont() above to ensure this.fontInfo is set.\n        return __classPrivateFieldGet(this, _Element_fontInfo, \"f\");\n    }\n    /** Set the current FontInfo object. */\n    set fontInfo(fontInfo) {\n        this.setFont(fontInfo);\n    }\n    /** Change the font size, while keeping everything else the same. */\n    setFontSize(size) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);\n        return this;\n    }\n    /**\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\n     * See Element.fontSizeInPixels or Element.fontSizeInPoints if you need to get a number for calculation purposes.\n     */\n    getFontSize() {\n        return this.fontSize;\n    }\n    getFontScale() {\n        return __classPrivateFieldGet(this, _Element_fontScale, \"f\");\n    }\n    /**\n     * The size is 1) a string of the form '10pt' or '16px', compatible with the CSS font-size property.\n     *          or 2) a number, which is interpreted as a point size (i.e. 12 == '12pt').\n     */\n    set fontSize(size) {\n        this.setFontSize(size);\n    }\n    /** @returns a CSS font-size string (e.g., '18pt', '12px', '1em'). */\n    get fontSize() {\n        let size = this.fontInfo.size;\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        return size;\n    }\n    /** @returns the font size in `pt`. */\n    get fontSizeInPoints() {\n        return Font.convertSizeToPointValue(this.fontSize);\n    }\n    /** @returns the font size in `px`. */\n    get fontSizeInPixels() {\n        return Font.convertSizeToPixelValue(this.fontSize);\n    }\n    /** @returns a CSS font-style string (e.g., 'italic'). */\n    get fontStyle() {\n        return this.fontInfo.style;\n    }\n    /** Set the font style. */\n    set fontStyle(style) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);\n    }\n    /**\n     * @returns a CSS font-weight string (e.g., 'bold').\n     * As in CSS, font-weight is always returned as a string, even if it was set as a number.\n     */\n    get fontWeight() {\n        return this.fontInfo.weight + '';\n    }\n    /** Set the font weight. */\n    set fontWeight(weight) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);\n    }\n    /** Get element width. */\n    getWidth() {\n        return this.width;\n    }\n    get width() {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        return __classPrivateFieldGet(this, _Element_width, \"f\");\n    }\n    /** Set element width. */\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    set width(width) {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        __classPrivateFieldSet(this, _Element_width, width, \"f\");\n    }\n    /** Set the X coordinate. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Get the X coordinate. */\n    getX() {\n        return this.x;\n    }\n    /** Get the Y coordinate. */\n    getY() {\n        return this.y;\n    }\n    /** Set the Y coordinate. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Shift element down `yShift` pixels. Negative values shift up. */\n    setYShift(yShift) {\n        this.yShift = yShift;\n        return this;\n    }\n    /** Get shift element `yShift`. */\n    getYShift() {\n        return this.yShift;\n    }\n    /** Set shift element right `xShift` pixels. Negative values shift left. */\n    setXShift(xShift) {\n        this.xShift = xShift;\n        return this;\n    }\n    /** Get shift element `xShift`. */\n    getXShift() {\n        return this.xShift;\n    }\n    /** Set element text. */\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    set text(text) {\n        __classPrivateFieldSet(this, _Element_metricsValid, false, \"f\");\n        __classPrivateFieldSet(this, _Element_text, text, \"f\");\n    }\n    /** Get element text. */\n    getText() {\n        return __classPrivateFieldGet(this, _Element_text, \"f\");\n    }\n    get text() {\n        return __classPrivateFieldGet(this, _Element_text, \"f\");\n    }\n    /** Render the element text. */\n    renderText(ctx, xPos, yPos) {\n        ctx.save();\n        ctx.setFont(__classPrivateFieldGet(this, _Element_fontInfo, \"f\"));\n        ctx.fillText(__classPrivateFieldGet(this, _Element_text, \"f\"), xPos + this.x + this.xShift, yPos + this.y + this.yShift);\n        this.children.forEach((child) => {\n            ctx.setFont(__classPrivateFieldGet(child, _Element_fontInfo, \"f\"));\n            ctx.fillText(__classPrivateFieldGet(child, _Element_text, \"f\"), xPos + child.x + child.xShift, yPos + child.y + child.yShift);\n        });\n        ctx.restore();\n    }\n    /** Measure the text using the textFont. */\n    measureText() {\n        var _b;\n        // TODO: What about SVG.getBBox()?\n        // https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement/getBBox\n        const context = (_b = _a.getTextMeasurementCanvas()) === null || _b === void 0 ? void 0 : _b.getContext('2d');\n        if (!context) {\n            // eslint-disable-next-line no-console\n            console.warn('Element: No context for txtCanvas. Returning empty text metrics.');\n            return __classPrivateFieldGet(this, _Element_textMetrics, \"f\");\n        }\n        context.font = Font.toCSSString(Font.validate(__classPrivateFieldGet(this, _Element_fontInfo, \"f\")));\n        __classPrivateFieldSet(this, _Element_textMetrics, context.measureText(__classPrivateFieldGet(this, _Element_text, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _Element_height, __classPrivateFieldGet(this, _Element_textMetrics, \"f\").actualBoundingBoxAscent + __classPrivateFieldGet(this, _Element_textMetrics, \"f\").actualBoundingBoxDescent, \"f\");\n        __classPrivateFieldSet(this, _Element_width, __classPrivateFieldGet(this, _Element_textMetrics, \"f\").width, \"f\");\n        __classPrivateFieldSet(this, _Element_metricsValid, true, \"f\");\n        return __classPrivateFieldGet(this, _Element_textMetrics, \"f\");\n    }\n    /** Measure the text using the FontInfo related with key. */\n    static measureWidth(text, key = '') {\n        var _b;\n        const context = (_b = _a.getTextMeasurementCanvas()) === null || _b === void 0 ? void 0 : _b.getContext('2d');\n        if (!context) {\n            // eslint-disable-next-line no-console\n            console.warn('Element: No context for txtCanvas. Returning empty text metrics.');\n            return 0;\n        }\n        context.font = Font.toCSSString(Metrics.getFontInfo(key));\n        return context.measureText(text).width;\n    }\n    /** Get the text metrics. */\n    getTextMetrics() {\n        return this.textMetrics;\n    }\n    get textMetrics() {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        return __classPrivateFieldGet(this, _Element_textMetrics, \"f\");\n    }\n    /** Get the text height. */\n    getHeight() {\n        return this.height;\n    }\n    get height() {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        return __classPrivateFieldGet(this, _Element_height, \"f\");\n    }\n    set height(height) {\n        if (!__classPrivateFieldGet(this, _Element_metricsValid, \"f\"))\n            this.measureText();\n        __classPrivateFieldSet(this, _Element_height, height, \"f\");\n    }\n    setOriginX(x) {\n        const bbox = this.getBoundingBox();\n        const originX = Math.abs((bbox.getX() - this.xShift) / bbox.getW());\n        const xShift = (x - originX) * bbox.getW();\n        this.xShift = -xShift;\n    }\n    setOriginY(y) {\n        const bbox = this.getBoundingBox();\n        const originY = Math.abs((bbox.getY() - this.yShift) / bbox.getH());\n        const yShift = (y - originY) * bbox.getH();\n        this.yShift = -yShift;\n    }\n    setOrigin(x, y) {\n        this.setOriginX(x);\n        this.setOriginY(y);\n    }\n}\n_a = Element, _Element_context = new WeakMap(), _Element_attrs = new WeakMap(), _Element_fontInfo = new WeakMap(), _Element_fontScale = new WeakMap(), _Element_text = new WeakMap(), _Element_metricsValid = new WeakMap(), _Element_textMetrics = new WeakMap(), _Element_height = new WeakMap(), _Element_width = new WeakMap();\nElement.ID = 1000;\n/** Canvas used to measure text. See measureText(): TextMetrics. */\n_Element_txtCanvas = { value: void 0 };\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Modifier_spacingFromNextModifier, _Modifier_modifierContext;\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var ModifierPosition;\n(function (ModifierPosition) {\n    ModifierPosition[ModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    ModifierPosition[ModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    ModifierPosition[ModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    ModifierPosition[ModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    ModifierPosition[ModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n})(ModifierPosition || (ModifierPosition = {}));\n// To enable logging for this class. Set `VexFlow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('VexFlow.Modifier', args); }\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n    /**\n     * Modifiers category string. Every modifier has a different category.\n     * The `ModifierContext` uses this to determine the type and order of the modifiers.\n     */\n    static get CATEGORY() {\n        return Category.Modifier;\n    }\n    /** Modifiers can be positioned almost anywhere, relative to a note. */\n    static get Position() {\n        return ModifierPosition;\n    }\n    static get PositionString() {\n        return {\n            center: ModifierPosition.CENTER,\n            above: ModifierPosition.ABOVE,\n            below: ModifierPosition.BELOW,\n            left: ModifierPosition.LEFT,\n            right: ModifierPosition.RIGHT,\n        };\n    }\n    constructor() {\n        super();\n        _Modifier_spacingFromNextModifier.set(this, void 0);\n        _Modifier_modifierContext.set(this, void 0);\n        this.width = 0;\n        // The `textLine` is reserved space above or below a stave.\n        this.textLine = 0;\n        this.position = Modifier.Position.LEFT;\n        __classPrivateFieldSet(this, _Modifier_spacingFromNextModifier, 0, \"f\");\n    }\n    /** Called when position changes. */\n    reset() {\n        // DO NOTHING.\n    }\n    /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n    getNote() {\n        return defined(this.note, 'NoNote', 'Modifier has no note.');\n    }\n    /**\n     * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n     * Also verifies that the index is valid.\n     */\n    checkAttachedNote() {\n        const category = this.getCategory();\n        defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n        return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n    }\n    /**\n     * Set attached note.\n     * @param note (`StaveNote`, `TabNote`, etc.)\n     */\n    setNote(note) {\n        this.note = note;\n        return this;\n    }\n    /** Get note index, which is a specific note in a chord. */\n    getIndex() {\n        return this.index;\n    }\n    /** Check and get note index, which is a specific note in a chord. */\n    checkIndex() {\n        return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n    }\n    /** Set note index, which is a specific note in a chord. */\n    setIndex(index) {\n        this.index = index;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return __classPrivateFieldGet(this, _Modifier_modifierContext, \"f\");\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(__classPrivateFieldGet(this, _Modifier_modifierContext, \"f\"), 'NoModifierContext', 'Modifier Context Required');\n    }\n    /** Every modifier must be part of a `ModifierContext`. */\n    setModifierContext(c) {\n        __classPrivateFieldSet(this, _Modifier_modifierContext, c, \"f\");\n        return this;\n    }\n    /** Get position. */\n    getPosition() {\n        return this.position;\n    }\n    /**\n     * Set position.\n     * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n     */\n    setPosition(position) {\n        this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n        this.reset();\n        return this;\n    }\n    /** Set the `textLine` for the modifier. */\n    setTextLine(line) {\n        this.textLine = line;\n        return this;\n    }\n    /** Shift modifier down `y` pixels. Negative values shift up. */\n    setYShift(y) {\n        this.yShift = y;\n        return this;\n    }\n    /** Set spacing from next modifier. */\n    setSpacingFromNextModifier(x) {\n        __classPrivateFieldSet(this, _Modifier_spacingFromNextModifier, x, \"f\");\n    }\n    /** Get spacing from next modifier. */\n    getSpacingFromNextModifier() {\n        return __classPrivateFieldGet(this, _Modifier_spacingFromNextModifier, \"f\");\n    }\n    /**\n     * Shift modifier `x` pixels in the direction of the modifier. Negative values\n     * shift reverse.\n     */\n    setXShift(x) {\n        this.xShift = 0;\n        if (this.position === Modifier.Position.LEFT) {\n            this.xShift -= x;\n        }\n        else {\n            this.xShift += x;\n        }\n        return this;\n    }\n    /** Get shift modifier `x` */\n    getXShift() {\n        return this.xShift;\n    }\n    /** Render the modifier onto the canvas. */\n    draw() {\n        this.checkContext();\n        throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n    }\n    // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n    alignSubNotesWithNote(subNotes, note) {\n        // Shift over the tick contexts of each note\n        const tickContext = note.getTickContext();\n        const metrics = tickContext.getMetrics();\n        const stave = note.getStave();\n        const subNoteXOffset = tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n        subNotes.forEach((subNote) => {\n            const subTickContext = subNote.getTickContext();\n            if (stave)\n                subNote.setStave(stave);\n            subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n        });\n    }\n}\n_Modifier_spacingFromNextModifier = new WeakMap(), _Modifier_modifierContext = new WeakMap();\n","// This file was generated by `glyph_codes.js'\n// The enum includes all SMuFL glyphs, and a few others that VexFlow uses.\n// See the list of SMuFL glyphs:\n//   https://w3c.github.io/smufl/latest/tables/\n//   https://raw.githubusercontent.com/w3c/smufl/gh-pages/metadata/glyphnames.json\n// We renamed the two SMuFL names that start with a digit:\n//   4stringTabClef => fourStringTabClef\n//   6stringTabClef => sixStringTabClef\n//\nexport var Glyphs;\n(function (Glyphs) {\n    ////// SPECIAL GLYPHS ///////////////////////////////////////\n    // Null character\n    Glyphs[\"null\"] = \"\\0\";\n    ////// SMuFL GLYPHS /////////////////////////////////////////\n    // U+E06E  4-string tab clef\n    Glyphs[\"fourStringTabClef\"] = \"\\uE06E\";\n    // U+E06D  6-string tab clef\n    Glyphs[\"sixStringTabClef\"] = \"\\uE06D\";\n    // U+E30D  11 large diesis down, 3° down [46 EDO]\n    Glyphs[\"accSagittal11LargeDiesisDown\"] = \"\\uE30D\";\n    // U+E30C  11 large diesis up, (11L), (sharp less 11M), 3° up [46 EDO]\n    Glyphs[\"accSagittal11LargeDiesisUp\"] = \"\\uE30C\";\n    // U+E30B  11 medium diesis down, 1°[17 31] 2°46 down, 1/4-tone down\n    Glyphs[\"accSagittal11MediumDiesisDown\"] = \"\\uE30B\";\n    // U+E30A  11 medium diesis up, (11M), 1°[17 31] 2°46 up, 1/4-tone up\n    Glyphs[\"accSagittal11MediumDiesisUp\"] = \"\\uE30A\";\n    // U+E3AB  11:19 large diesis down\n    Glyphs[\"accSagittal11v19LargeDiesisDown\"] = \"\\uE3AB\";\n    // U+E3AA  11:19 large diesis up, (11:19L, apotome less 11:19M)\n    Glyphs[\"accSagittal11v19LargeDiesisUp\"] = \"\\uE3AA\";\n    // U+E3A3  11:19 medium diesis down\n    Glyphs[\"accSagittal11v19MediumDiesisDown\"] = \"\\uE3A3\";\n    // U+E3A2  11:19 medium diesis up, (11:19M, 11M plus 19s)\n    Glyphs[\"accSagittal11v19MediumDiesisUp\"] = \"\\uE3A2\";\n    // U+E397  11:49 comma down\n    Glyphs[\"accSagittal11v49CommaDown\"] = \"\\uE397\";\n    // U+E396  11:49 comma up, (11:49C, 11M less 49C)\n    Glyphs[\"accSagittal11v49CommaUp\"] = \"\\uE396\";\n    // U+E395  143 comma down\n    Glyphs[\"accSagittal143CommaDown\"] = \"\\uE395\";\n    // U+E394  143 comma up, (143C, 13L less 11M)\n    Glyphs[\"accSagittal143CommaUp\"] = \"\\uE394\";\n    // U+E343  17 comma down\n    Glyphs[\"accSagittal17CommaDown\"] = \"\\uE343\";\n    // U+E342  17 comma up, (17C)\n    Glyphs[\"accSagittal17CommaUp\"] = \"\\uE342\";\n    // U+E393  17 kleisma down\n    Glyphs[\"accSagittal17KleismaDown\"] = \"\\uE393\";\n    // U+E392  17 kleisma up, (17k)\n    Glyphs[\"accSagittal17KleismaUp\"] = \"\\uE392\";\n    // U+E399  19 comma down\n    Glyphs[\"accSagittal19CommaDown\"] = \"\\uE399\";\n    // U+E398  19 comma up, (19C)\n    Glyphs[\"accSagittal19CommaUp\"] = \"\\uE398\";\n    // U+E391  19 schisma down\n    Glyphs[\"accSagittal19SchismaDown\"] = \"\\uE391\";\n    // U+E390  19 schisma up, (19s)\n    Glyphs[\"accSagittal19SchismaUp\"] = \"\\uE390\";\n    // U+E3F5  1 mina down, 1/(5⋅7⋅13)-schismina down, 0.42 cents down\n    Glyphs[\"accSagittal1MinaDown\"] = \"\\uE3F5\";\n    // U+E3F4  1 mina up, 1/(5⋅7⋅13)-schismina up, 0.42 cents up\n    Glyphs[\"accSagittal1MinaUp\"] = \"\\uE3F4\";\n    // U+E3F9  1 tina down, 7²⋅11⋅19/5-schismina down, 0.17 cents down\n    Glyphs[\"accSagittal1TinaDown\"] = \"\\uE3F9\";\n    // U+E3F8  1 tina up, 7²⋅11⋅19/5-schismina up, 0.17 cents up\n    Glyphs[\"accSagittal1TinaUp\"] = \"\\uE3F8\";\n    // U+E371  23 comma down, 2° down [96 EDO], 1/8-tone down\n    Glyphs[\"accSagittal23CommaDown\"] = \"\\uE371\";\n    // U+E370  23 comma up, (23C), 2° up [96 EDO], 1/8-tone up\n    Glyphs[\"accSagittal23CommaUp\"] = \"\\uE370\";\n    // U+E39F  23 small diesis down\n    Glyphs[\"accSagittal23SmallDiesisDown\"] = \"\\uE39F\";\n    // U+E39E  23 small diesis up, (23S)\n    Glyphs[\"accSagittal23SmallDiesisUp\"] = \"\\uE39E\";\n    // U+E307  25 small diesis down, 2° down [53 EDO]\n    Glyphs[\"accSagittal25SmallDiesisDown\"] = \"\\uE307\";\n    // U+E306  25 small diesis up, (25S, ~5:13S, ~37S, 5C plus 5C), 2° up [53 EDO]\n    Glyphs[\"accSagittal25SmallDiesisUp\"] = \"\\uE306\";\n    // U+E3F7  2 minas down, 65/77-schismina down, 0.83 cents down\n    Glyphs[\"accSagittal2MinasDown\"] = \"\\uE3F7\";\n    // U+E3F6  2 minas up, 65/77-schismina up, 0.83 cents up\n    Glyphs[\"accSagittal2MinasUp\"] = \"\\uE3F6\";\n    // U+E3FB  2 tinas down, 1/(7³⋅17)-schismina down, 0.30 cents down\n    Glyphs[\"accSagittal2TinasDown\"] = \"\\uE3FB\";\n    // U+E3FA  2 tinas up, 1/(7³⋅17)-schismina up, 0.30 cents up\n    Glyphs[\"accSagittal2TinasUp\"] = \"\\uE3FA\";\n    // U+E30F  35 large diesis down, 2° down [50 EDO], 5/18-tone down\n    Glyphs[\"accSagittal35LargeDiesisDown\"] = \"\\uE30F\";\n    // U+E30E  35 large diesis up, (35L, ~13L, ~125L, sharp less 35M), 2°50 up\n    Glyphs[\"accSagittal35LargeDiesisUp\"] = \"\\uE30E\";\n    // U+E309  35 medium diesis down, 1°[50] 2°[27] down, 2/9-tone down\n    Glyphs[\"accSagittal35MediumDiesisDown\"] = \"\\uE309\";\n    // U+E308  35 medium diesis up, (35M, ~13M, ~125M, 5C plus 7C), 2/9-tone up\n    Glyphs[\"accSagittal35MediumDiesisUp\"] = \"\\uE308\";\n    // U+E3FD  3 tinas down, 1 mina down, 1/(5⋅7⋅13)-schismina down, 0.42 cents down\n    Glyphs[\"accSagittal3TinasDown\"] = \"\\uE3FD\";\n    // U+E3FC  3 tinas up, 1 mina up, 1/(5⋅7⋅13)-schismina up, 0.42 cents up\n    Glyphs[\"accSagittal3TinasUp\"] = \"\\uE3FC\";\n    // U+E3A9  49 large diesis down\n    Glyphs[\"accSagittal49LargeDiesisDown\"] = \"\\uE3A9\";\n    // U+E3A8  49 large diesis up, (49L, ~31L, apotome less 49M)\n    Glyphs[\"accSagittal49LargeDiesisUp\"] = \"\\uE3A8\";\n    // U+E3A5  49 medium diesis down\n    Glyphs[\"accSagittal49MediumDiesisDown\"] = \"\\uE3A5\";\n    // U+E3A4  49 medium diesis up, (49M, ~31M, 7C plus 7C)\n    Glyphs[\"accSagittal49MediumDiesisUp\"] = \"\\uE3A4\";\n    // U+E39D  49 small diesis down\n    Glyphs[\"accSagittal49SmallDiesisDown\"] = \"\\uE39D\";\n    // U+E39C  49 small diesis up, (49S, ~31S)\n    Glyphs[\"accSagittal49SmallDiesisUp\"] = \"\\uE39C\";\n    // U+E3FF  4 tinas down, 5²⋅11²/7-schismina down, 0.57 cents down\n    Glyphs[\"accSagittal4TinasDown\"] = \"\\uE3FF\";\n    // U+E3FE  4 tinas up, 5²⋅11²/7-schismina up, 0.57 cents up\n    Glyphs[\"accSagittal4TinasUp\"] = \"\\uE3FE\";\n    // U+E345  55 comma down, 3° down [96 EDO], 3/16-tone down\n    Glyphs[\"accSagittal55CommaDown\"] = \"\\uE345\";\n    // U+E344  55 comma up, (55C, 11M less 5C), 3°up [96 EDO], 3/16-tone up\n    Glyphs[\"accSagittal55CommaUp\"] = \"\\uE344\";\n    // U+E303  5 comma down, 1° down [22 27 29 34 41 46 53 96 EDOs], 1/12-tone down\n    Glyphs[\"accSagittal5CommaDown\"] = \"\\uE303\";\n    // U+E302  5 comma up, (5C), 1° up [22 27 29 34 41 46 53 96 EDOs], 1/12-tone up\n    Glyphs[\"accSagittal5CommaUp\"] = \"\\uE302\";\n    // U+E401  5 tinas down, 7⁴/25-schismina down, 0.72 cents down\n    Glyphs[\"accSagittal5TinasDown\"] = \"\\uE401\";\n    // U+E400  5 tinas up, 7⁴/25-schismina up, 0.72 cents up\n    Glyphs[\"accSagittal5TinasUp\"] = \"\\uE400\";\n    // U+E349  5:11 small diesis down\n    Glyphs[\"accSagittal5v11SmallDiesisDown\"] = \"\\uE349\";\n    // U+E348  5:11 small diesis up, (5:11S, ~7:13S, ~11:17S, 5:7k plus 7:11C)\n    Glyphs[\"accSagittal5v11SmallDiesisUp\"] = \"\\uE348\";\n    // U+E3AD  5:13 large diesis down\n    Glyphs[\"accSagittal5v13LargeDiesisDown\"] = \"\\uE3AD\";\n    // U+E3AC  5:13 large diesis up, (5:13L, ~37L, apotome less 5:13M)\n    Glyphs[\"accSagittal5v13LargeDiesisUp\"] = \"\\uE3AC\";\n    // U+E3A1  5:13 medium diesis down\n    Glyphs[\"accSagittal5v13MediumDiesisDown\"] = \"\\uE3A1\";\n    // U+E3A0  5:13 medium diesis up, (5:13M, ~37M, 5C plus 13C)\n    Glyphs[\"accSagittal5v13MediumDiesisUp\"] = \"\\uE3A0\";\n    // U+E373  5:19 comma down, 1/20-tone down\n    Glyphs[\"accSagittal5v19CommaDown\"] = \"\\uE373\";\n    // U+E372  5:19 comma up, (5:19C, 5C plus 19s), 1/20-tone up\n    Glyphs[\"accSagittal5v19CommaUp\"] = \"\\uE372\";\n    // U+E375  5:23 small diesis down, 2° down [60 EDO], 1/5-tone down\n    Glyphs[\"accSagittal5v23SmallDiesisDown\"] = \"\\uE375\";\n    // U+E374  5:23 small diesis up, (5:23S, 5C plus 23C), 2° up [60 EDO], 1/5-tone up\n    Glyphs[\"accSagittal5v23SmallDiesisUp\"] = \"\\uE374\";\n    // U+E3A7  5:49 medium diesis down\n    Glyphs[\"accSagittal5v49MediumDiesisDown\"] = \"\\uE3A7\";\n    // U+E3A6  5:49 medium diesis up, (5:49M, half apotome)\n    Glyphs[\"accSagittal5v49MediumDiesisUp\"] = \"\\uE3A6\";\n    // U+E301  5:7 kleisma down\n    Glyphs[\"accSagittal5v7KleismaDown\"] = \"\\uE301\";\n    // U+E300  5:7 kleisma up, (5:7k, ~11:13k, 7C less 5C)\n    Glyphs[\"accSagittal5v7KleismaUp\"] = \"\\uE300\";\n    // U+E403  6 tinas down, 2 minas down, 65/77-schismina down, 0.83 cents down\n    Glyphs[\"accSagittal6TinasDown\"] = \"\\uE403\";\n    // U+E402  6 tinas up, 2 minas up, 65/77-schismina up, 0.83 cents up\n    Glyphs[\"accSagittal6TinasUp\"] = \"\\uE402\";\n    // U+E305  7 comma down, 1° down [43 EDO], 2° down [72 EDO], 1/6-tone down\n    Glyphs[\"accSagittal7CommaDown\"] = \"\\uE305\";\n    // U+E304  7 comma up, (7C), 1° up [43 EDO], 2° up [72 EDO], 1/6-tone up\n    Glyphs[\"accSagittal7CommaUp\"] = \"\\uE304\";\n    // U+E405  7 tinas down, 7/(5²⋅17)-schismina down, 1.02 cents down\n    Glyphs[\"accSagittal7TinasDown\"] = \"\\uE405\";\n    // U+E404  7 tinas up, 7/(5²⋅17)-schismina up, 1.02 cents up\n    Glyphs[\"accSagittal7TinasUp\"] = \"\\uE404\";\n    // U+E347  7:11 comma down, 1° down [60 EDO], 1/10-tone down\n    Glyphs[\"accSagittal7v11CommaDown\"] = \"\\uE347\";\n    // U+E346  7:11 comma up, (7:11C, ~13:17S, ~29S, 11L less 7C), 1° up [60 EDO]\n    Glyphs[\"accSagittal7v11CommaUp\"] = \"\\uE346\";\n    // U+E341  7:11 kleisma down\n    Glyphs[\"accSagittal7v11KleismaDown\"] = \"\\uE341\";\n    // U+E340  7:11 kleisma up, (7:11k, ~29k)\n    Glyphs[\"accSagittal7v11KleismaUp\"] = \"\\uE340\";\n    // U+E39B  7:19 comma down\n    Glyphs[\"accSagittal7v19CommaDown\"] = \"\\uE39B\";\n    // U+E39A  7:19 comma up, (7:19C, 7C less 19s)\n    Glyphs[\"accSagittal7v19CommaUp\"] = \"\\uE39A\";\n    // U+E407  8 tinas down, 11⋅17/(5²⋅7)-schismina down, 1.14 cents down\n    Glyphs[\"accSagittal8TinasDown\"] = \"\\uE407\";\n    // U+E406  8 tinas up, 11⋅17/(5²⋅7)-schismina up, 1.14 cents up\n    Glyphs[\"accSagittal8TinasUp\"] = \"\\uE406\";\n    // U+E409  9 tinas down, 1/(7²⋅11)-schismina down, 1.26 cents down\n    Glyphs[\"accSagittal9TinasDown\"] = \"\\uE409\";\n    // U+E408  9 tinas up, 1/(7²⋅11)-schismina up, 1.26 cents up\n    Glyphs[\"accSagittal9TinasUp\"] = \"\\uE408\";\n    // U+E3F2  Acute, 5 schisma up (5s), 2 cents up\n    Glyphs[\"accSagittalAcute\"] = \"\\uE3F2\";\n    // U+E335  Double flat, (2 apotomes down)[almost all EDOs], whole-tone down\n    Glyphs[\"accSagittalDoubleFlat\"] = \"\\uE335\";\n    // U+E3E9  Double flat 11:49C-up\n    Glyphs[\"accSagittalDoubleFlat11v49CUp\"] = \"\\uE3E9\";\n    // U+E3EB  Double flat 143C-up\n    Glyphs[\"accSagittalDoubleFlat143CUp\"] = \"\\uE3EB\";\n    // U+E365  Double flat 17C-up\n    Glyphs[\"accSagittalDoubleFlat17CUp\"] = \"\\uE365\";\n    // U+E3ED  Double flat 17k-up\n    Glyphs[\"accSagittalDoubleFlat17kUp\"] = \"\\uE3ED\";\n    // U+E3E7  Double flat 19C-up\n    Glyphs[\"accSagittalDoubleFlat19CUp\"] = \"\\uE3E7\";\n    // U+E3EF  Double flat 19s-up\n    Glyphs[\"accSagittalDoubleFlat19sUp\"] = \"\\uE3EF\";\n    // U+E387  Double flat 23C-up, 14° down [96 EDO], 7/8-tone down\n    Glyphs[\"accSagittalDoubleFlat23CUp\"] = \"\\uE387\";\n    // U+E3E1  Double flat 23S-up\n    Glyphs[\"accSagittalDoubleFlat23SUp\"] = \"\\uE3E1\";\n    // U+E32D  Double flat 25S-up, 8°down [53 EDO]\n    Glyphs[\"accSagittalDoubleFlat25SUp\"] = \"\\uE32D\";\n    // U+E3E3  Double flat 49S-up\n    Glyphs[\"accSagittalDoubleFlat49SUp\"] = \"\\uE3E3\";\n    // U+E363  Double flat 55C-up, 13° down [96 EDO], 13/16-tone down\n    Glyphs[\"accSagittalDoubleFlat55CUp\"] = \"\\uE363\";\n    // U+E331  Double flat 5C-up, 5°[22 29] 7°[34 41] 9°53 down, 11/12 tone down\n    Glyphs[\"accSagittalDoubleFlat5CUp\"] = \"\\uE331\";\n    // U+E35F  Double flat 5:11S-up\n    Glyphs[\"accSagittalDoubleFlat5v11SUp\"] = \"\\uE35F\";\n    // U+E385  Double flat 5:19C-up, 19/20-tone down\n    Glyphs[\"accSagittalDoubleFlat5v19CUp\"] = \"\\uE385\";\n    // U+E383  Double flat 5:23S-up, 8° down [60 EDO], 4/5-tone down\n    Glyphs[\"accSagittalDoubleFlat5v23SUp\"] = \"\\uE383\";\n    // U+E333  Double flat 5:7k-up\n    Glyphs[\"accSagittalDoubleFlat5v7kUp\"] = \"\\uE333\";\n    // U+E32F  Double flat 7C-up, 5° down [43 EDO], 10° down [72 EDO], 5/6-tone down\n    Glyphs[\"accSagittalDoubleFlat7CUp\"] = \"\\uE32F\";\n    // U+E361  Double flat 7:11C-up, 9° down [60 EDO], 9/10-tone down\n    Glyphs[\"accSagittalDoubleFlat7v11CUp\"] = \"\\uE361\";\n    // U+E367  Double flat 7:11k-up\n    Glyphs[\"accSagittalDoubleFlat7v11kUp\"] = \"\\uE367\";\n    // U+E3E5  Double flat 7:19C-up\n    Glyphs[\"accSagittalDoubleFlat7v19CUp\"] = \"\\uE3E5\";\n    // U+E334  Double sharp, (2 apotomes up)[almost all EDOs], whole-tone up\n    Glyphs[\"accSagittalDoubleSharp\"] = \"\\uE334\";\n    // U+E3E8  Double sharp 11:49C-down\n    Glyphs[\"accSagittalDoubleSharp11v49CDown\"] = \"\\uE3E8\";\n    // U+E3EA  Double sharp 143C-down\n    Glyphs[\"accSagittalDoubleSharp143CDown\"] = \"\\uE3EA\";\n    // U+E364  Double sharp 17C-down\n    Glyphs[\"accSagittalDoubleSharp17CDown\"] = \"\\uE364\";\n    // U+E3EC  Double sharp 17k-down\n    Glyphs[\"accSagittalDoubleSharp17kDown\"] = \"\\uE3EC\";\n    // U+E3E6  Double sharp 19C-down\n    Glyphs[\"accSagittalDoubleSharp19CDown\"] = \"\\uE3E6\";\n    // U+E3EE  Double sharp 19s-down\n    Glyphs[\"accSagittalDoubleSharp19sDown\"] = \"\\uE3EE\";\n    // U+E386  Double sharp 23C-down, 14°up [96 EDO], 7/8-tone up\n    Glyphs[\"accSagittalDoubleSharp23CDown\"] = \"\\uE386\";\n    // U+E3E0  Double sharp 23S-down\n    Glyphs[\"accSagittalDoubleSharp23SDown\"] = \"\\uE3E0\";\n    // U+E32C  Double sharp 25S-down, 8°up [53 EDO]\n    Glyphs[\"accSagittalDoubleSharp25SDown\"] = \"\\uE32C\";\n    // U+E3E2  Double sharp 49S-down\n    Glyphs[\"accSagittalDoubleSharp49SDown\"] = \"\\uE3E2\";\n    // U+E362  Double sharp 55C-down, 13° up [96 EDO], 13/16-tone up\n    Glyphs[\"accSagittalDoubleSharp55CDown\"] = \"\\uE362\";\n    // U+E330  Double sharp 5C-down, 5°[22 29] 7°[34 41] 9°53 up, 11/12 tone up\n    Glyphs[\"accSagittalDoubleSharp5CDown\"] = \"\\uE330\";\n    // U+E35E  Double sharp 5:11S-down\n    Glyphs[\"accSagittalDoubleSharp5v11SDown\"] = \"\\uE35E\";\n    // U+E384  Double sharp 5:19C-down, 19/20-tone up\n    Glyphs[\"accSagittalDoubleSharp5v19CDown\"] = \"\\uE384\";\n    // U+E382  Double sharp 5:23S-down, 8° up [60 EDO], 4/5-tone up\n    Glyphs[\"accSagittalDoubleSharp5v23SDown\"] = \"\\uE382\";\n    // U+E332  Double sharp 5:7k-down\n    Glyphs[\"accSagittalDoubleSharp5v7kDown\"] = \"\\uE332\";\n    // U+E32E  Double sharp 7C-down, 5°[43] 10°[72] up, 5/6-tone up\n    Glyphs[\"accSagittalDoubleSharp7CDown\"] = \"\\uE32E\";\n    // U+E360  Double sharp 7:11C-down, 9° up [60 EDO], 9/10-tone up\n    Glyphs[\"accSagittalDoubleSharp7v11CDown\"] = \"\\uE360\";\n    // U+E366  Double sharp 7:11k-down\n    Glyphs[\"accSagittalDoubleSharp7v11kDown\"] = \"\\uE366\";\n    // U+E3E4  Double sharp 7:19C-down\n    Glyphs[\"accSagittalDoubleSharp7v19CDown\"] = \"\\uE3E4\";\n    // U+E319  Flat, (apotome down)[almost all EDOs], 1/2-tone down\n    Glyphs[\"accSagittalFlat\"] = \"\\uE319\";\n    // U+E329  Flat 11L-down, 8° up [46 EDO]\n    Glyphs[\"accSagittalFlat11LDown\"] = \"\\uE329\";\n    // U+E327  Flat 11M-down, 3° down [17 31 EDOs], 7° down [46 EDO], 3/4-tone down\n    Glyphs[\"accSagittalFlat11MDown\"] = \"\\uE327\";\n    // U+E3DB  Flat 11:19L-down\n    Glyphs[\"accSagittalFlat11v19LDown\"] = \"\\uE3DB\";\n    // U+E3D3  Flat 11:19M-down\n    Glyphs[\"accSagittalFlat11v19MDown\"] = \"\\uE3D3\";\n    // U+E3C7  Flat 11:49C-down\n    Glyphs[\"accSagittalFlat11v49CDown\"] = \"\\uE3C7\";\n    // U+E3B9  Flat 11:49C-up\n    Glyphs[\"accSagittalFlat11v49CUp\"] = \"\\uE3B9\";\n    // U+E3C5  Flat 143C-down\n    Glyphs[\"accSagittalFlat143CDown\"] = \"\\uE3C5\";\n    // U+E3BB  Flat 143C-up\n    Glyphs[\"accSagittalFlat143CUp\"] = \"\\uE3BB\";\n    // U+E357  Flat 17C-down\n    Glyphs[\"accSagittalFlat17CDown\"] = \"\\uE357\";\n    // U+E351  Flat 17C-up\n    Glyphs[\"accSagittalFlat17CUp\"] = \"\\uE351\";\n    // U+E3C3  Flat 17k-down\n    Glyphs[\"accSagittalFlat17kDown\"] = \"\\uE3C3\";\n    // U+E3BD  Flat 17k-up\n    Glyphs[\"accSagittalFlat17kUp\"] = \"\\uE3BD\";\n    // U+E3C9  Flat 19C-down\n    Glyphs[\"accSagittalFlat19CDown\"] = \"\\uE3C9\";\n    // U+E3B7  Flat 19C-up\n    Glyphs[\"accSagittalFlat19CUp\"] = \"\\uE3B7\";\n    // U+E3C1  Flat 19s-down\n    Glyphs[\"accSagittalFlat19sDown\"] = \"\\uE3C1\";\n    // U+E3BF  Flat 19s-up\n    Glyphs[\"accSagittalFlat19sUp\"] = \"\\uE3BF\";\n    // U+E37D  Flat 23C-down, 10° down [96 EDO], 5/8-tone down\n    Glyphs[\"accSagittalFlat23CDown\"] = \"\\uE37D\";\n    // U+E37B  Flat 23C-up, 6° down [96 EDO], 3/8-tone down\n    Glyphs[\"accSagittalFlat23CUp\"] = \"\\uE37B\";\n    // U+E3CF  Flat 23S-down\n    Glyphs[\"accSagittalFlat23SDown\"] = \"\\uE3CF\";\n    // U+E3B1  Flat 23S-up\n    Glyphs[\"accSagittalFlat23SUp\"] = \"\\uE3B1\";\n    // U+E323  Flat 25S-down, 7° down [53 EDO]\n    Glyphs[\"accSagittalFlat25SDown\"] = \"\\uE323\";\n    // U+E311  Flat 25S-up, 3° down [53 EDO]\n    Glyphs[\"accSagittalFlat25SUp\"] = \"\\uE311\";\n    // U+E32B  Flat 35L-down, 5° down [50 EDO]\n    Glyphs[\"accSagittalFlat35LDown\"] = \"\\uE32B\";\n    // U+E325  Flat 35M-down, 4° down [50 EDO], 6° down [27 EDO], 13/18-tone down\n    Glyphs[\"accSagittalFlat35MDown\"] = \"\\uE325\";\n    // U+E3D9  Flat 49L-down\n    Glyphs[\"accSagittalFlat49LDown\"] = \"\\uE3D9\";\n    // U+E3D5  Flat 49M-down\n    Glyphs[\"accSagittalFlat49MDown\"] = \"\\uE3D5\";\n    // U+E3CD  Flat 49S-down\n    Glyphs[\"accSagittalFlat49SDown\"] = \"\\uE3CD\";\n    // U+E3B3  Flat 49S-up\n    Glyphs[\"accSagittalFlat49SUp\"] = \"\\uE3B3\";\n    // U+E359  Flat 55C-down, 11° down [96 EDO], 11/16-tone down\n    Glyphs[\"accSagittalFlat55CDown\"] = \"\\uE359\";\n    // U+E34F  Flat 55C-up, 5° down [96 EDO], 5/16-tone down\n    Glyphs[\"accSagittalFlat55CUp\"] = \"\\uE34F\";\n    // U+E31F  Flat 5C-down, 4°[22 29] 5°[27 34 41] 6°[39 46 53] down, 7/12-tone down\n    Glyphs[\"accSagittalFlat5CDown\"] = \"\\uE31F\";\n    // U+E315  Flat 5C-up, 2°[22 29] 3°[27 34 41] 4°[39 46 53] 5°72 7°[96] down, 5/12-tone down\n    Glyphs[\"accSagittalFlat5CUp\"] = \"\\uE315\";\n    // U+E35D  Flat 5:11S-down\n    Glyphs[\"accSagittalFlat5v11SDown\"] = \"\\uE35D\";\n    // U+E34B  Flat 5:11S-up\n    Glyphs[\"accSagittalFlat5v11SUp\"] = \"\\uE34B\";\n    // U+E3DD  Flat 5:13L-down\n    Glyphs[\"accSagittalFlat5v13LDown\"] = \"\\uE3DD\";\n    // U+E3D1  Flat 5:13M-down\n    Glyphs[\"accSagittalFlat5v13MDown\"] = \"\\uE3D1\";\n    // U+E37F  Flat 5:19C-down, 11/20-tone down\n    Glyphs[\"accSagittalFlat5v19CDown\"] = \"\\uE37F\";\n    // U+E379  Flat 5:19C-up, 9/20-tone down\n    Glyphs[\"accSagittalFlat5v19CUp\"] = \"\\uE379\";\n    // U+E381  Flat 5:23S-down, 7° down [60 EDO], 7/10-tone down\n    Glyphs[\"accSagittalFlat5v23SDown\"] = \"\\uE381\";\n    // U+E377  Flat 5:23S-up, 3° down [60 EDO], 3/10-tone down\n    Glyphs[\"accSagittalFlat5v23SUp\"] = \"\\uE377\";\n    // U+E3D7  Flat 5:49M-down\n    Glyphs[\"accSagittalFlat5v49MDown\"] = \"\\uE3D7\";\n    // U+E31D  Flat 5:7k-down\n    Glyphs[\"accSagittalFlat5v7kDown\"] = \"\\uE31D\";\n    // U+E317  Flat 5:7k-up\n    Glyphs[\"accSagittalFlat5v7kUp\"] = \"\\uE317\";\n    // U+E321  Flat 7C-down, 4° down [43 EDO], 8° down [72 EDO], 2/3-tone down\n    Glyphs[\"accSagittalFlat7CDown\"] = \"\\uE321\";\n    // U+E313  Flat 7C-up, 2° down [43 EDO], 4° down [72 EDO], 1/3-tone down\n    Glyphs[\"accSagittalFlat7CUp\"] = \"\\uE313\";\n    // U+E35B  Flat 7:11C-down, 6° down [60 EDO], 3/5- tone down\n    Glyphs[\"accSagittalFlat7v11CDown\"] = \"\\uE35B\";\n    // U+E34D  Flat 7:11C-up, 4° down [60 EDO], 2/5-tone down\n    Glyphs[\"accSagittalFlat7v11CUp\"] = \"\\uE34D\";\n    // U+E355  Flat 7:11k-down\n    Glyphs[\"accSagittalFlat7v11kDown\"] = \"\\uE355\";\n    // U+E353  Flat 7:11k-up\n    Glyphs[\"accSagittalFlat7v11kUp\"] = \"\\uE353\";\n    // U+E3CB  Flat 7:19C-down\n    Glyphs[\"accSagittalFlat7v19CDown\"] = \"\\uE3CB\";\n    // U+E3B5  Flat 7:19C-up\n    Glyphs[\"accSagittalFlat7v19CUp\"] = \"\\uE3B5\";\n    // U+E40B  Fractional tina down, 77/(5⋅37)-schismina down, 0.08 cents down\n    Glyphs[\"accSagittalFractionalTinaDown\"] = \"\\uE40B\";\n    // U+E40A  Fractional tina up, 77/(5⋅37)-schismina up, 0.08 cents up\n    Glyphs[\"accSagittalFractionalTinaUp\"] = \"\\uE40A\";\n    // U+E3F3  Grave, 5 schisma down, 2 cents down\n    Glyphs[\"accSagittalGrave\"] = \"\\uE3F3\";\n    // U+E3F1  Shaft down, (natural for use with only diacritics down)\n    Glyphs[\"accSagittalShaftDown\"] = \"\\uE3F1\";\n    // U+E3F0  Shaft up, (natural for use with only diacritics up)\n    Glyphs[\"accSagittalShaftUp\"] = \"\\uE3F0\";\n    // U+E318  Sharp, (apotome up)[almost all EDOs], 1/2-tone up\n    Glyphs[\"accSagittalSharp\"] = \"\\uE318\";\n    // U+E328  Sharp 11L-up, 8° up [46 EDO]\n    Glyphs[\"accSagittalSharp11LUp\"] = \"\\uE328\";\n    // U+E326  Sharp 11M-up, 3° up [17 31 EDOs], 7° up [46 EDO], 3/4-tone up\n    Glyphs[\"accSagittalSharp11MUp\"] = \"\\uE326\";\n    // U+E3DA  Sharp 11:19L-up\n    Glyphs[\"accSagittalSharp11v19LUp\"] = \"\\uE3DA\";\n    // U+E3D2  Sharp 11:19M-up\n    Glyphs[\"accSagittalSharp11v19MUp\"] = \"\\uE3D2\";\n    // U+E3B8  Sharp 11:49C-down\n    Glyphs[\"accSagittalSharp11v49CDown\"] = \"\\uE3B8\";\n    // U+E3C6  Sharp 11:49C-up\n    Glyphs[\"accSagittalSharp11v49CUp\"] = \"\\uE3C6\";\n    // U+E3BA  Sharp 143C-down\n    Glyphs[\"accSagittalSharp143CDown\"] = \"\\uE3BA\";\n    // U+E3C4  Sharp 143C-up\n    Glyphs[\"accSagittalSharp143CUp\"] = \"\\uE3C4\";\n    // U+E350  Sharp 17C-down\n    Glyphs[\"accSagittalSharp17CDown\"] = \"\\uE350\";\n    // U+E356  Sharp 17C-up\n    Glyphs[\"accSagittalSharp17CUp\"] = \"\\uE356\";\n    // U+E3BC  Sharp 17k-down\n    Glyphs[\"accSagittalSharp17kDown\"] = \"\\uE3BC\";\n    // U+E3C2  Sharp 17k-up\n    Glyphs[\"accSagittalSharp17kUp\"] = \"\\uE3C2\";\n    // U+E3B6  Sharp 19C-down\n    Glyphs[\"accSagittalSharp19CDown\"] = \"\\uE3B6\";\n    // U+E3C8  Sharp 19C-up\n    Glyphs[\"accSagittalSharp19CUp\"] = \"\\uE3C8\";\n    // U+E3BE  Sharp 19s-down\n    Glyphs[\"accSagittalSharp19sDown\"] = \"\\uE3BE\";\n    // U+E3C0  Sharp 19s-up\n    Glyphs[\"accSagittalSharp19sUp\"] = \"\\uE3C0\";\n    // U+E37A  Sharp 23C-down, 6° up [96 EDO], 3/8-tone up\n    Glyphs[\"accSagittalSharp23CDown\"] = \"\\uE37A\";\n    // U+E37C  Sharp 23C-up, 10° up [96 EDO], 5/8-tone up\n    Glyphs[\"accSagittalSharp23CUp\"] = \"\\uE37C\";\n    // U+E3B0  Sharp 23S-down\n    Glyphs[\"accSagittalSharp23SDown\"] = \"\\uE3B0\";\n    // U+E3CE  Sharp 23S-up\n    Glyphs[\"accSagittalSharp23SUp\"] = \"\\uE3CE\";\n    // U+E310  Sharp 25S-down, 3° up [53 EDO]\n    Glyphs[\"accSagittalSharp25SDown\"] = \"\\uE310\";\n    // U+E322  Sharp 25S-up, 7° up [53 EDO]\n    Glyphs[\"accSagittalSharp25SUp\"] = \"\\uE322\";\n    // U+E32A  Sharp 35L-up, 5° up [50 EDO]\n    Glyphs[\"accSagittalSharp35LUp\"] = \"\\uE32A\";\n    // U+E324  Sharp 35M-up, 4° up [50 EDO], 6° up [27 EDO], 13/18-tone up\n    Glyphs[\"accSagittalSharp35MUp\"] = \"\\uE324\";\n    // U+E3D8  Sharp 49L-up\n    Glyphs[\"accSagittalSharp49LUp\"] = \"\\uE3D8\";\n    // U+E3D4  Sharp 49M-up\n    Glyphs[\"accSagittalSharp49MUp\"] = \"\\uE3D4\";\n    // U+E3B2  Sharp 49S-down\n    Glyphs[\"accSagittalSharp49SDown\"] = \"\\uE3B2\";\n    // U+E3CC  Sharp 49S-up\n    Glyphs[\"accSagittalSharp49SUp\"] = \"\\uE3CC\";\n    // U+E34E  Sharp 55C-down, 5° up [96 EDO], 5/16-tone up\n    Glyphs[\"accSagittalSharp55CDown\"] = \"\\uE34E\";\n    // U+E358  Sharp 55C-up, 11° up [96 EDO], 11/16-tone up\n    Glyphs[\"accSagittalSharp55CUp\"] = \"\\uE358\";\n    // U+E314  Sharp 5C-down, 2°[22 29] 3°[27 34 41] 4°[39 46 53] 5°[72] 7°[96] up, 5/12-tone up\n    Glyphs[\"accSagittalSharp5CDown\"] = \"\\uE314\";\n    // U+E31E  Sharp 5C-up, 4°[22 29] 5°[27 34 41] 6°[39 46 53] up, 7/12-tone up\n    Glyphs[\"accSagittalSharp5CUp\"] = \"\\uE31E\";\n    // U+E34A  Sharp 5:11S-down\n    Glyphs[\"accSagittalSharp5v11SDown\"] = \"\\uE34A\";\n    // U+E35C  Sharp 5:11S-up\n    Glyphs[\"accSagittalSharp5v11SUp\"] = \"\\uE35C\";\n    // U+E3DC  Sharp 5:13L-up\n    Glyphs[\"accSagittalSharp5v13LUp\"] = \"\\uE3DC\";\n    // U+E3D0  Sharp 5:13M-up\n    Glyphs[\"accSagittalSharp5v13MUp\"] = \"\\uE3D0\";\n    // U+E378  Sharp 5:19C-down, 9/20-tone up\n    Glyphs[\"accSagittalSharp5v19CDown\"] = \"\\uE378\";\n    // U+E37E  Sharp 5:19C-up, 11/20-tone up\n    Glyphs[\"accSagittalSharp5v19CUp\"] = \"\\uE37E\";\n    // U+E376  Sharp 5:23S-down, 3° up [60 EDO], 3/10-tone up\n    Glyphs[\"accSagittalSharp5v23SDown\"] = \"\\uE376\";\n    // U+E380  Sharp 5:23S-up, 7° up [60 EDO], 7/10-tone up\n    Glyphs[\"accSagittalSharp5v23SUp\"] = \"\\uE380\";\n    // U+E3D6  Sharp 5:49M-up, (one and a half apotomes)\n    Glyphs[\"accSagittalSharp5v49MUp\"] = \"\\uE3D6\";\n    // U+E316  Sharp 5:7k-down\n    Glyphs[\"accSagittalSharp5v7kDown\"] = \"\\uE316\";\n    // U+E31C  Sharp 5:7k-up\n    Glyphs[\"accSagittalSharp5v7kUp\"] = \"\\uE31C\";\n    // U+E312  Sharp 7C-down, 2° up [43 EDO], 4° up [72 EDO], 1/3-tone up\n    Glyphs[\"accSagittalSharp7CDown\"] = \"\\uE312\";\n    // U+E320  Sharp 7C-up, 4° up [43 EDO], 8° up [72 EDO], 2/3-tone up\n    Glyphs[\"accSagittalSharp7CUp\"] = \"\\uE320\";\n    // U+E34C  Sharp 7:11C-down, 4° up [60 EDO], 2/5-tone up\n    Glyphs[\"accSagittalSharp7v11CDown\"] = \"\\uE34C\";\n    // U+E35A  Sharp 7:11C-up, 6° up [60 EDO], 3/5- tone up\n    Glyphs[\"accSagittalSharp7v11CUp\"] = \"\\uE35A\";\n    // U+E352  Sharp 7:11k-down\n    Glyphs[\"accSagittalSharp7v11kDown\"] = \"\\uE352\";\n    // U+E354  Sharp 7:11k-up\n    Glyphs[\"accSagittalSharp7v11kUp\"] = \"\\uE354\";\n    // U+E3B4  Sharp 7:19C-down\n    Glyphs[\"accSagittalSharp7v19CDown\"] = \"\\uE3B4\";\n    // U+E3CA  Sharp 7:19C-up\n    Glyphs[\"accSagittalSharp7v19CUp\"] = \"\\uE3CA\";\n    // U+E31A  Unused\n    Glyphs[\"accSagittalUnused1\"] = \"\\uE31A\";\n    // U+E31B  Unused\n    Glyphs[\"accSagittalUnused2\"] = \"\\uE31B\";\n    // U+E3DE  Unused\n    Glyphs[\"accSagittalUnused3\"] = \"\\uE3DE\";\n    // U+E3DF  Unused\n    Glyphs[\"accSagittalUnused4\"] = \"\\uE3DF\";\n    // U+E8CA  Combining accordion coupler dot\n    Glyphs[\"accdnCombDot\"] = \"\\uE8CA\";\n    // U+E8C8  Combining left hand, 2 ranks, empty\n    Glyphs[\"accdnCombLH2RanksEmpty\"] = \"\\uE8C8\";\n    // U+E8C9  Combining left hand, 3 ranks, empty (square)\n    Glyphs[\"accdnCombLH3RanksEmptySquare\"] = \"\\uE8C9\";\n    // U+E8C6  Combining right hand, 3 ranks, empty\n    Glyphs[\"accdnCombRH3RanksEmpty\"] = \"\\uE8C6\";\n    // U+E8C7  Combining right hand, 4 ranks, empty\n    Glyphs[\"accdnCombRH4RanksEmpty\"] = \"\\uE8C7\";\n    // U+E079  Diatonic accordion clef\n    Glyphs[\"accdnDiatonicClef\"] = \"\\uE079\";\n    // U+E8BC  Left hand, 2 ranks, 16' stop (round)\n    Glyphs[\"accdnLH2Ranks16Round\"] = \"\\uE8BC\";\n    // U+E8BD  Left hand, 2 ranks, 8' stop + 16' stop (round)\n    Glyphs[\"accdnLH2Ranks8Plus16Round\"] = \"\\uE8BD\";\n    // U+E8BB  Left hand, 2 ranks, 8' stop (round)\n    Glyphs[\"accdnLH2Ranks8Round\"] = \"\\uE8BB\";\n    // U+E8C0  Left hand, 2 ranks, full master (round)\n    Glyphs[\"accdnLH2RanksFullMasterRound\"] = \"\\uE8C0\";\n    // U+E8BF  Left hand, 2 ranks, master + 16' stop (round)\n    Glyphs[\"accdnLH2RanksMasterPlus16Round\"] = \"\\uE8BF\";\n    // U+E8BE  Left hand, 2 ranks, master (round)\n    Glyphs[\"accdnLH2RanksMasterRound\"] = \"\\uE8BE\";\n    // U+E8C4  Left hand, 3 ranks, 2' stop + 8' stop (square)\n    Glyphs[\"accdnLH3Ranks2Plus8Square\"] = \"\\uE8C4\";\n    // U+E8C2  Left hand, 3 ranks, 2' stop (square)\n    Glyphs[\"accdnLH3Ranks2Square\"] = \"\\uE8C2\";\n    // U+E8C1  Left hand, 3 ranks, 8' stop (square)\n    Glyphs[\"accdnLH3Ranks8Square\"] = \"\\uE8C1\";\n    // U+E8C3  Left hand, 3 ranks, double 8' stop (square)\n    Glyphs[\"accdnLH3RanksDouble8Square\"] = \"\\uE8C3\";\n    // U+E8C5  Left hand, 3 ranks, 2' stop + double 8' stop (tutti) (square)\n    Glyphs[\"accdnLH3RanksTuttiSquare\"] = \"\\uE8C5\";\n    // U+E8CC  Pull\n    Glyphs[\"accdnPull\"] = \"\\uE8CC\";\n    // U+E8CB  Push\n    Glyphs[\"accdnPush\"] = \"\\uE8CB\";\n    // U+E8AC  Right hand, 3 ranks, 8' stop + upper tremolo 8' stop + 16' stop (accordion)\n    Glyphs[\"accdnRH3RanksAccordion\"] = \"\\uE8AC\";\n    // U+E8A8  Right hand, 3 ranks, lower tremolo 8' stop + 8' stop + upper tremolo 8' stop (authentic musette)\n    Glyphs[\"accdnRH3RanksAuthenticMusette\"] = \"\\uE8A8\";\n    // U+E8AB  Right hand, 3 ranks, 8' stop + 16' stop (bandoneón)\n    Glyphs[\"accdnRH3RanksBandoneon\"] = \"\\uE8AB\";\n    // U+E8A4  Right hand, 3 ranks, 16' stop (bassoon)\n    Glyphs[\"accdnRH3RanksBassoon\"] = \"\\uE8A4\";\n    // U+E8A1  Right hand, 3 ranks, 8' stop (clarinet)\n    Glyphs[\"accdnRH3RanksClarinet\"] = \"\\uE8A1\";\n    // U+E8B1  Right hand, 3 ranks, lower tremolo 8' stop + 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksDoubleTremoloLower8ve\"] = \"\\uE8B1\";\n    // U+E8B2  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksDoubleTremoloUpper8ve\"] = \"\\uE8B2\";\n    // U+E8B3  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksFullFactory\"] = \"\\uE8B3\";\n    // U+E8AA  Right hand, 3 ranks, 4' stop + 8' stop + 16' stop (harmonium)\n    Glyphs[\"accdnRH3RanksHarmonium\"] = \"\\uE8AA\";\n    // U+E8A7  Right hand, 3 ranks, 4' stop + 8' stop + upper tremolo 8' stop (imitation musette)\n    Glyphs[\"accdnRH3RanksImitationMusette\"] = \"\\uE8A7\";\n    // U+E8A3  Right hand, 3 ranks, lower tremolo 8' stop\n    Glyphs[\"accdnRH3RanksLowerTremolo8\"] = \"\\uE8A3\";\n    // U+E8AD  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + upper tremolo 8' stop + 16' stop (master)\n    Glyphs[\"accdnRH3RanksMaster\"] = \"\\uE8AD\";\n    // U+E8A5  Right hand, 3 ranks, 4' stop + 8' stop (oboe)\n    Glyphs[\"accdnRH3RanksOboe\"] = \"\\uE8A5\";\n    // U+E8A9  Right hand, 3 ranks, 4' stop + 16' stop (organ)\n    Glyphs[\"accdnRH3RanksOrgan\"] = \"\\uE8A9\";\n    // U+E8A0  Right hand, 3 ranks, 4' stop (piccolo)\n    Glyphs[\"accdnRH3RanksPiccolo\"] = \"\\uE8A0\";\n    // U+E8AF  Right hand, 3 ranks, lower tremolo 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksTremoloLower8ve\"] = \"\\uE8AF\";\n    // U+E8B0  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksTremoloUpper8ve\"] = \"\\uE8B0\";\n    // U+E8AE  Right hand, 3 ranks, lower tremolo 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksTwoChoirs\"] = \"\\uE8AE\";\n    // U+E8A2  Right hand, 3 ranks, upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksUpperTremolo8\"] = \"\\uE8A2\";\n    // U+E8A6  Right hand, 3 ranks, 8' stop + upper tremolo 8' stop (violin)\n    Glyphs[\"accdnRH3RanksViolin\"] = \"\\uE8A6\";\n    // U+E8B5  Right hand, 4 ranks, alto\n    Glyphs[\"accdnRH4RanksAlto\"] = \"\\uE8B5\";\n    // U+E8BA  Right hand, 4 ranks, bass/alto\n    Glyphs[\"accdnRH4RanksBassAlto\"] = \"\\uE8BA\";\n    // U+E8B7  Right hand, 4 ranks, master\n    Glyphs[\"accdnRH4RanksMaster\"] = \"\\uE8B7\";\n    // U+E8B8  Right hand, 4 ranks, soft bass\n    Glyphs[\"accdnRH4RanksSoftBass\"] = \"\\uE8B8\";\n    // U+E8B9  Right hand, 4 ranks, soft tenor\n    Glyphs[\"accdnRH4RanksSoftTenor\"] = \"\\uE8B9\";\n    // U+E8B4  Right hand, 4 ranks, soprano\n    Glyphs[\"accdnRH4RanksSoprano\"] = \"\\uE8B4\";\n    // U+E8B6  Right hand, 4 ranks, tenor\n    Glyphs[\"accdnRH4RanksTenor\"] = \"\\uE8B6\";\n    // U+E8CD  Ricochet (2 tones)\n    Glyphs[\"accdnRicochet2\"] = \"\\uE8CD\";\n    // U+E8CE  Ricochet (3 tones)\n    Glyphs[\"accdnRicochet3\"] = \"\\uE8CE\";\n    // U+E8CF  Ricochet (4 tones)\n    Glyphs[\"accdnRicochet4\"] = \"\\uE8CF\";\n    // U+E8D0  Ricochet (5 tones)\n    Glyphs[\"accdnRicochet5\"] = \"\\uE8D0\";\n    // U+E8D1  Ricochet (6 tones)\n    Glyphs[\"accdnRicochet6\"] = \"\\uE8D1\";\n    // U+E8D2  Combining ricochet for stem (2 tones)\n    Glyphs[\"accdnRicochetStem2\"] = \"\\uE8D2\";\n    // U+E8D3  Combining ricochet for stem (3 tones)\n    Glyphs[\"accdnRicochetStem3\"] = \"\\uE8D3\";\n    // U+E8D4  Combining ricochet for stem (4 tones)\n    Glyphs[\"accdnRicochetStem4\"] = \"\\uE8D4\";\n    // U+E8D5  Combining ricochet for stem (5 tones)\n    Glyphs[\"accdnRicochetStem5\"] = \"\\uE8D5\";\n    // U+E8D6  Combining ricochet for stem (6 tones)\n    Glyphs[\"accdnRicochetStem6\"] = \"\\uE8D6\";\n    // U+E454  1-comma flat\n    Glyphs[\"accidental1CommaFlat\"] = \"\\uE454\";\n    // U+E450  1-comma sharp\n    Glyphs[\"accidental1CommaSharp\"] = \"\\uE450\";\n    // U+E455  2-comma flat\n    Glyphs[\"accidental2CommaFlat\"] = \"\\uE455\";\n    // U+E451  2-comma sharp\n    Glyphs[\"accidental2CommaSharp\"] = \"\\uE451\";\n    // U+E456  3-comma flat\n    Glyphs[\"accidental3CommaFlat\"] = \"\\uE456\";\n    // U+E452  3-comma sharp\n    Glyphs[\"accidental3CommaSharp\"] = \"\\uE452\";\n    // U+E457  4-comma flat\n    Glyphs[\"accidental4CommaFlat\"] = \"\\uE457\";\n    // U+E453  5-comma sharp\n    Glyphs[\"accidental5CommaSharp\"] = \"\\uE453\";\n    // U+E27B  Arrow down (lower by one quarter-tone)\n    Glyphs[\"accidentalArrowDown\"] = \"\\uE27B\";\n    // U+E27A  Arrow up (raise by one quarter-tone)\n    Glyphs[\"accidentalArrowUp\"] = \"\\uE27A\";\n    // U+E442  Bakiye (flat)\n    Glyphs[\"accidentalBakiyeFlat\"] = \"\\uE442\";\n    // U+E445  Bakiye (sharp)\n    Glyphs[\"accidentalBakiyeSharp\"] = \"\\uE445\";\n    // U+E26C  Accidental bracket, left\n    Glyphs[\"accidentalBracketLeft\"] = \"\\uE26C\";\n    // U+E26D  Accidental bracket, right\n    Glyphs[\"accidentalBracketRight\"] = \"\\uE26D\";\n    // U+E440  Büyük mücenneb (flat)\n    Glyphs[\"accidentalBuyukMucennebFlat\"] = \"\\uE440\";\n    // U+E447  Büyük mücenneb (sharp)\n    Glyphs[\"accidentalBuyukMucennebSharp\"] = \"\\uE447\";\n    // U+E2EF  Combining close curly brace\n    Glyphs[\"accidentalCombiningCloseCurlyBrace\"] = \"\\uE2EF\";\n    // U+E2E6  Combining lower by one 17-limit schisma\n    Glyphs[\"accidentalCombiningLower17Schisma\"] = \"\\uE2E6\";\n    // U+E2E8  Combining lower by one 19-limit schisma\n    Glyphs[\"accidentalCombiningLower19Schisma\"] = \"\\uE2E8\";\n    // U+E2EA  Combining lower by one 23-limit comma\n    Glyphs[\"accidentalCombiningLower23Limit29LimitComma\"] = \"\\uE2EA\";\n    // U+EE50  Combining lower by one 29-limit comma\n    Glyphs[\"accidentalCombiningLower29LimitComma\"] = \"\\uEE50\";\n    // U+E2EC  Combining lower by one 31-limit schisma\n    Glyphs[\"accidentalCombiningLower31Schisma\"] = \"\\uE2EC\";\n    // U+EE52  Combining lower by one 37-limit quartertone\n    Glyphs[\"accidentalCombiningLower37Quartertone\"] = \"\\uEE52\";\n    // U+EE54  Combining lower by one 41-limit comma\n    Glyphs[\"accidentalCombiningLower41Comma\"] = \"\\uEE54\";\n    // U+EE56  Combining lower by one 43-limit comma\n    Glyphs[\"accidentalCombiningLower43Comma\"] = \"\\uEE56\";\n    // U+EE58  Combining lower by one 47-limit quartertone\n    Glyphs[\"accidentalCombiningLower47Quartertone\"] = \"\\uEE58\";\n    // U+E2F7  Combining lower by one 53-limit comma\n    Glyphs[\"accidentalCombiningLower53LimitComma\"] = \"\\uE2F7\";\n    // U+E2EE  Combining open curly brace\n    Glyphs[\"accidentalCombiningOpenCurlyBrace\"] = \"\\uE2EE\";\n    // U+E2E7  Combining raise by one 17-limit schisma\n    Glyphs[\"accidentalCombiningRaise17Schisma\"] = \"\\uE2E7\";\n    // U+E2E9  Combining raise by one 19-limit schisma\n    Glyphs[\"accidentalCombiningRaise19Schisma\"] = \"\\uE2E9\";\n    // U+E2EB  Combining raise by one 23-limit comma\n    Glyphs[\"accidentalCombiningRaise23Limit29LimitComma\"] = \"\\uE2EB\";\n    // U+EE51  Combining raise by one 29-limit comma\n    Glyphs[\"accidentalCombiningRaise29LimitComma\"] = \"\\uEE51\";\n    // U+E2ED  Combining raise by one 31-limit schisma\n    Glyphs[\"accidentalCombiningRaise31Schisma\"] = \"\\uE2ED\";\n    // U+EE53  Combining raise by one 37-limit quartertone\n    Glyphs[\"accidentalCombiningRaise37Quartertone\"] = \"\\uEE53\";\n    // U+EE55  Combining raise by one 41-limit comma\n    Glyphs[\"accidentalCombiningRaise41Comma\"] = \"\\uEE55\";\n    // U+EE57  Combining raise by one 43-limit comma\n    Glyphs[\"accidentalCombiningRaise43Comma\"] = \"\\uEE57\";\n    // U+EE59  Combining raise by one 47-limit quartertone\n    Glyphs[\"accidentalCombiningRaise47Quartertone\"] = \"\\uEE59\";\n    // U+E2F8  Combining raise by one 53-limit comma\n    Glyphs[\"accidentalCombiningRaise53LimitComma\"] = \"\\uE2F8\";\n    // U+E47A  Syntonic/Didymus comma (80:81) down (Bosanquet)\n    Glyphs[\"accidentalCommaSlashDown\"] = \"\\uE47A\";\n    // U+E479  Syntonic/Didymus comma (80:81) up (Bosanquet)\n    Glyphs[\"accidentalCommaSlashUp\"] = \"\\uE479\";\n    // U+E264  Double flat\n    Glyphs[\"accidentalDoubleFlat\"] = \"\\uE264\";\n    // U+ED30  Arabic double flat\n    Glyphs[\"accidentalDoubleFlatArabic\"] = \"\\uED30\";\n    // U+E2F0  Double flat equal tempered semitone\n    Glyphs[\"accidentalDoubleFlatEqualTempered\"] = \"\\uE2F0\";\n    // U+E2C0  Double flat lowered by one syntonic comma\n    Glyphs[\"accidentalDoubleFlatOneArrowDown\"] = \"\\uE2C0\";\n    // U+E2C5  Double flat raised by one syntonic comma\n    Glyphs[\"accidentalDoubleFlatOneArrowUp\"] = \"\\uE2C5\";\n    // U+E483  Reversed double flat\n    Glyphs[\"accidentalDoubleFlatReversed\"] = \"\\uE483\";\n    // U+E2D4  Double flat lowered by three syntonic commas\n    Glyphs[\"accidentalDoubleFlatThreeArrowsDown\"] = \"\\uE2D4\";\n    // U+E2D9  Double flat raised by three syntonic commas\n    Glyphs[\"accidentalDoubleFlatThreeArrowsUp\"] = \"\\uE2D9\";\n    // U+E485  Turned double flat\n    Glyphs[\"accidentalDoubleFlatTurned\"] = \"\\uE485\";\n    // U+E2CA  Double flat lowered by two syntonic commas\n    Glyphs[\"accidentalDoubleFlatTwoArrowsDown\"] = \"\\uE2CA\";\n    // U+E2CF  Double flat raised by two syntonic commas\n    Glyphs[\"accidentalDoubleFlatTwoArrowsUp\"] = \"\\uE2CF\";\n    // U+E263  Double sharp\n    Glyphs[\"accidentalDoubleSharp\"] = \"\\uE263\";\n    // U+ED38  Arabic double sharp\n    Glyphs[\"accidentalDoubleSharpArabic\"] = \"\\uED38\";\n    // U+E2F4  Double sharp equal tempered semitone\n    Glyphs[\"accidentalDoubleSharpEqualTempered\"] = \"\\uE2F4\";\n    // U+E2C4  Double sharp lowered by one syntonic comma\n    Glyphs[\"accidentalDoubleSharpOneArrowDown\"] = \"\\uE2C4\";\n    // U+E2C9  Double sharp raised by one syntonic comma\n    Glyphs[\"accidentalDoubleSharpOneArrowUp\"] = \"\\uE2C9\";\n    // U+E2D8  Double sharp lowered by three syntonic commas\n    Glyphs[\"accidentalDoubleSharpThreeArrowsDown\"] = \"\\uE2D8\";\n    // U+E2DD  Double sharp raised by three syntonic commas\n    Glyphs[\"accidentalDoubleSharpThreeArrowsUp\"] = \"\\uE2DD\";\n    // U+E2CE  Double sharp lowered by two syntonic commas\n    Glyphs[\"accidentalDoubleSharpTwoArrowsDown\"] = \"\\uE2CE\";\n    // U+E2D3  Double sharp raised by two syntonic commas\n    Glyphs[\"accidentalDoubleSharpTwoArrowsUp\"] = \"\\uE2D3\";\n    // U+E2FA  Enharmonically reinterpret accidental almost equal to\n    Glyphs[\"accidentalEnharmonicAlmostEqualTo\"] = \"\\uE2FA\";\n    // U+E2FB  Enharmonically reinterpret accidental equals\n    Glyphs[\"accidentalEnharmonicEquals\"] = \"\\uE2FB\";\n    // U+E2F9  Enharmonically reinterpret accidental tilde\n    Glyphs[\"accidentalEnharmonicTilde\"] = \"\\uE2F9\";\n    // U+E296  Filled reversed flat and flat\n    Glyphs[\"accidentalFilledReversedFlatAndFlat\"] = \"\\uE296\";\n    // U+E298  Filled reversed flat and flat with arrow down\n    Glyphs[\"accidentalFilledReversedFlatAndFlatArrowDown\"] = \"\\uE298\";\n    // U+E297  Filled reversed flat and flat with arrow up\n    Glyphs[\"accidentalFilledReversedFlatAndFlatArrowUp\"] = \"\\uE297\";\n    // U+E293  Filled reversed flat with arrow down\n    Glyphs[\"accidentalFilledReversedFlatArrowDown\"] = \"\\uE293\";\n    // U+E292  Filled reversed flat with arrow up\n    Glyphs[\"accidentalFilledReversedFlatArrowUp\"] = \"\\uE292\";\n    // U+E279  Five-quarter-tones flat\n    Glyphs[\"accidentalFiveQuarterTonesFlatArrowDown\"] = \"\\uE279\";\n    // U+E276  Five-quarter-tones sharp\n    Glyphs[\"accidentalFiveQuarterTonesSharpArrowUp\"] = \"\\uE276\";\n    // U+E260  Flat\n    Glyphs[\"accidentalFlat\"] = \"\\uE260\";\n    // U+ED32  Arabic half-tone flat\n    Glyphs[\"accidentalFlatArabic\"] = \"\\uED32\";\n    // U+E2F1  Flat equal tempered semitone\n    Glyphs[\"accidentalFlatEqualTempered\"] = \"\\uE2F1\";\n    // U+ED53  Lowered flat (Stockhausen)\n    Glyphs[\"accidentalFlatLoweredStockhausen\"] = \"\\uED53\";\n    // U+E2C1  Flat lowered by one syntonic comma\n    Glyphs[\"accidentalFlatOneArrowDown\"] = \"\\uE2C1\";\n    // U+E2C6  Flat raised by one syntonic comma\n    Glyphs[\"accidentalFlatOneArrowUp\"] = \"\\uE2C6\";\n    // U+ED52  Raised flat (Stockhausen)\n    Glyphs[\"accidentalFlatRaisedStockhausen\"] = \"\\uED52\";\n    // U+ED5C  Repeated flat, note on line (Stockhausen)\n    Glyphs[\"accidentalFlatRepeatedLineStockhausen\"] = \"\\uED5C\";\n    // U+ED5B  Repeated flat, note in space (Stockhausen)\n    Glyphs[\"accidentalFlatRepeatedSpaceStockhausen\"] = \"\\uED5B\";\n    // U+E2D5  Flat lowered by three syntonic commas\n    Glyphs[\"accidentalFlatThreeArrowsDown\"] = \"\\uE2D5\";\n    // U+E2DA  Flat raised by three syntonic commas\n    Glyphs[\"accidentalFlatThreeArrowsUp\"] = \"\\uE2DA\";\n    // U+E484  Turned flat\n    Glyphs[\"accidentalFlatTurned\"] = \"\\uE484\";\n    // U+E2CB  Flat lowered by two syntonic commas\n    Glyphs[\"accidentalFlatTwoArrowsDown\"] = \"\\uE2CB\";\n    // U+E2D0  Flat raised by two syntonic commas\n    Glyphs[\"accidentalFlatTwoArrowsUp\"] = \"\\uE2D0\";\n    // U+EE65  Quarter-tone higher (Alois Hába)\n    Glyphs[\"accidentalHabaFlatQuarterToneHigher\"] = \"\\uEE65\";\n    // U+EE69  Three quarter-tones lower (Alois Hába)\n    Glyphs[\"accidentalHabaFlatThreeQuarterTonesLower\"] = \"\\uEE69\";\n    // U+EE64  Quarter-tone higher (Alois Hába)\n    Glyphs[\"accidentalHabaQuarterToneHigher\"] = \"\\uEE64\";\n    // U+EE67  Quarter-tone lower (Alois Hába)\n    Glyphs[\"accidentalHabaQuarterToneLower\"] = \"\\uEE67\";\n    // U+EE68  Quarter-tone lower (Alois Hába)\n    Glyphs[\"accidentalHabaSharpQuarterToneLower\"] = \"\\uEE68\";\n    // U+EE66  Three quarter-tones higher (Alois Hába)\n    Glyphs[\"accidentalHabaSharpThreeQuarterTonesHigher\"] = \"\\uEE66\";\n    // U+E29A  Half sharp with arrow down\n    Glyphs[\"accidentalHalfSharpArrowDown\"] = \"\\uE29A\";\n    // U+E299  Half sharp with arrow up\n    Glyphs[\"accidentalHalfSharpArrowUp\"] = \"\\uE299\";\n    // U+E2B6  Thirteen (raise by 65:64)\n    Glyphs[\"accidentalJohnston13\"] = \"\\uE2B6\";\n    // U+E2B7  Inverted 13 (lower by 65:64)\n    Glyphs[\"accidentalJohnston31\"] = \"\\uE2B7\";\n    // U+E2B5  Down arrow (lower by 33:32)\n    Glyphs[\"accidentalJohnstonDown\"] = \"\\uE2B5\";\n    // U+E2B2  Inverted seven (raise by 36:35)\n    Glyphs[\"accidentalJohnstonEl\"] = \"\\uE2B2\";\n    // U+E2B1  Minus (lower by 81:80)\n    Glyphs[\"accidentalJohnstonMinus\"] = \"\\uE2B1\";\n    // U+E2B0  Plus (raise by 81:80)\n    Glyphs[\"accidentalJohnstonPlus\"] = \"\\uE2B0\";\n    // U+E2B3  Seven (lower by 36:35)\n    Glyphs[\"accidentalJohnstonSeven\"] = \"\\uE2B3\";\n    // U+E2B4  Up arrow (raise by 33:32)\n    Glyphs[\"accidentalJohnstonUp\"] = \"\\uE2B4\";\n    // U+E443  Koma (flat)\n    Glyphs[\"accidentalKomaFlat\"] = \"\\uE443\";\n    // U+E444  Koma (sharp)\n    Glyphs[\"accidentalKomaSharp\"] = \"\\uE444\";\n    // U+E460  Koron (quarter tone flat)\n    Glyphs[\"accidentalKoron\"] = \"\\uE460\";\n    // U+E441  Küçük mücenneb (flat)\n    Glyphs[\"accidentalKucukMucennebFlat\"] = \"\\uE441\";\n    // U+E446  Küçük mücenneb (sharp)\n    Glyphs[\"accidentalKucukMucennebSharp\"] = \"\\uE446\";\n    // U+E47D  Large double sharp\n    Glyphs[\"accidentalLargeDoubleSharp\"] = \"\\uE47D\";\n    // U+E2DE  Lower by one septimal comma\n    Glyphs[\"accidentalLowerOneSeptimalComma\"] = \"\\uE2DE\";\n    // U+E2E4  Lower by one tridecimal quartertone\n    Glyphs[\"accidentalLowerOneTridecimalQuartertone\"] = \"\\uE2E4\";\n    // U+E2E2  Lower by one undecimal quartertone\n    Glyphs[\"accidentalLowerOneUndecimalQuartertone\"] = \"\\uE2E2\";\n    // U+E2E0  Lower by two septimal commas\n    Glyphs[\"accidentalLowerTwoSeptimalCommas\"] = \"\\uE2E0\";\n    // U+ED51  Lowered (Stockhausen)\n    Glyphs[\"accidentalLoweredStockhausen\"] = \"\\uED51\";\n    // U+E284  Narrow reversed flat(quarter-tone flat)\n    Glyphs[\"accidentalNarrowReversedFlat\"] = \"\\uE284\";\n    // U+E285  Narrow reversed flat and flat(three-quarter-tones flat)\n    Glyphs[\"accidentalNarrowReversedFlatAndFlat\"] = \"\\uE285\";\n    // U+E261  Natural\n    Glyphs[\"accidentalNatural\"] = \"\\uE261\";\n    // U+ED34  Arabic natural\n    Glyphs[\"accidentalNaturalArabic\"] = \"\\uED34\";\n    // U+E2F2  Natural equal tempered semitone\n    Glyphs[\"accidentalNaturalEqualTempered\"] = \"\\uE2F2\";\n    // U+E267  Natural flat\n    Glyphs[\"accidentalNaturalFlat\"] = \"\\uE267\";\n    // U+ED55  Lowered natural (Stockhausen)\n    Glyphs[\"accidentalNaturalLoweredStockhausen\"] = \"\\uED55\";\n    // U+E2C2  Natural lowered by one syntonic comma\n    Glyphs[\"accidentalNaturalOneArrowDown\"] = \"\\uE2C2\";\n    // U+E2C7  Natural raised by one syntonic comma\n    Glyphs[\"accidentalNaturalOneArrowUp\"] = \"\\uE2C7\";\n    // U+ED54  Raised natural (Stockhausen)\n    Glyphs[\"accidentalNaturalRaisedStockhausen\"] = \"\\uED54\";\n    // U+E482  Reversed natural\n    Glyphs[\"accidentalNaturalReversed\"] = \"\\uE482\";\n    // U+E268  Natural sharp\n    Glyphs[\"accidentalNaturalSharp\"] = \"\\uE268\";\n    // U+E2D6  Natural lowered by three syntonic commas\n    Glyphs[\"accidentalNaturalThreeArrowsDown\"] = \"\\uE2D6\";\n    // U+E2DB  Natural raised by three syntonic commas\n    Glyphs[\"accidentalNaturalThreeArrowsUp\"] = \"\\uE2DB\";\n    // U+E2CC  Natural lowered by two syntonic commas\n    Glyphs[\"accidentalNaturalTwoArrowsDown\"] = \"\\uE2CC\";\n    // U+E2D1  Natural raised by two syntonic commas\n    Glyphs[\"accidentalNaturalTwoArrowsUp\"] = \"\\uE2D1\";\n    // U+E29C  One and a half sharps with arrow down\n    Glyphs[\"accidentalOneAndAHalfSharpsArrowDown\"] = \"\\uE29C\";\n    // U+E29B  One and a half sharps with arrow up\n    Glyphs[\"accidentalOneAndAHalfSharpsArrowUp\"] = \"\\uE29B\";\n    // U+E48F  One-quarter-tone flat (Ferneyhough)\n    Glyphs[\"accidentalOneQuarterToneFlatFerneyhough\"] = \"\\uE48F\";\n    // U+ED59  One-quarter-tone flat (Stockhausen)\n    Glyphs[\"accidentalOneQuarterToneFlatStockhausen\"] = \"\\uED59\";\n    // U+E48E  One-quarter-tone sharp (Ferneyhough)\n    Glyphs[\"accidentalOneQuarterToneSharpFerneyhough\"] = \"\\uE48E\";\n    // U+ED58  One-quarter-tone sharp (Stockhausen)\n    Glyphs[\"accidentalOneQuarterToneSharpStockhausen\"] = \"\\uED58\";\n    // U+E48B  One-third-tone flat (Ferneyhough)\n    Glyphs[\"accidentalOneThirdToneFlatFerneyhough\"] = \"\\uE48B\";\n    // U+E48A  One-third-tone sharp (Ferneyhough)\n    Glyphs[\"accidentalOneThirdToneSharpFerneyhough\"] = \"\\uE48A\";\n    // U+E26A  Accidental parenthesis, left\n    Glyphs[\"accidentalParensLeft\"] = \"\\uE26A\";\n    // U+E26B  Accidental parenthesis, right\n    Glyphs[\"accidentalParensRight\"] = \"\\uE26B\";\n    // U+E2F5  Lower by one equal tempered quarter-tone\n    Glyphs[\"accidentalQuarterFlatEqualTempered\"] = \"\\uE2F5\";\n    // U+E2F6  Raise by one equal tempered quarter tone\n    Glyphs[\"accidentalQuarterSharpEqualTempered\"] = \"\\uE2F6\";\n    // U+E47F  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlat4\"] = \"\\uE47F\";\n    // U+ED33  Arabic quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArabic\"] = \"\\uED33\";\n    // U+E270  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArrowUp\"] = \"\\uE270\";\n    // U+E480  Filled reversed flat (quarter-tone flat)\n    Glyphs[\"accidentalQuarterToneFlatFilledReversed\"] = \"\\uE480\";\n    // U+E273  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatNaturalArrowDown\"] = \"\\uE273\";\n    // U+E478  Quarter tone flat (Penderecki)\n    Glyphs[\"accidentalQuarterToneFlatPenderecki\"] = \"\\uE478\";\n    // U+E280  Reversed flat (quarter-tone flat) (Stein)\n    Glyphs[\"accidentalQuarterToneFlatStein\"] = \"\\uE280\";\n    // U+E488  Quarter-tone flat (van Blankenburg)\n    Glyphs[\"accidentalQuarterToneFlatVanBlankenburg\"] = \"\\uE488\";\n    // U+E47E  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharp4\"] = \"\\uE47E\";\n    // U+ED35  Arabic quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArabic\"] = \"\\uED35\";\n    // U+E275  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArrowDown\"] = \"\\uE275\";\n    // U+E472  Quarter tone sharp (Bussotti)\n    Glyphs[\"accidentalQuarterToneSharpBusotti\"] = \"\\uE472\";\n    // U+E272  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpNaturalArrowUp\"] = \"\\uE272\";\n    // U+E282  Half sharp (quarter-tone sharp) (Stein)\n    Glyphs[\"accidentalQuarterToneSharpStein\"] = \"\\uE282\";\n    // U+E475  Quarter tone sharp with wiggly tail\n    Glyphs[\"accidentalQuarterToneSharpWiggle\"] = \"\\uE475\";\n    // U+E2DF  Raise by one septimal comma\n    Glyphs[\"accidentalRaiseOneSeptimalComma\"] = \"\\uE2DF\";\n    // U+E2E5  Raise by one tridecimal quartertone\n    Glyphs[\"accidentalRaiseOneTridecimalQuartertone\"] = \"\\uE2E5\";\n    // U+E2E3  Raise by one undecimal quartertone\n    Glyphs[\"accidentalRaiseOneUndecimalQuartertone\"] = \"\\uE2E3\";\n    // U+E2E1  Raise by two septimal commas\n    Glyphs[\"accidentalRaiseTwoSeptimalCommas\"] = \"\\uE2E1\";\n    // U+ED50  Raised (Stockhausen)\n    Glyphs[\"accidentalRaisedStockhausen\"] = \"\\uED50\";\n    // U+E295  Reversed flat and flat with arrow down\n    Glyphs[\"accidentalReversedFlatAndFlatArrowDown\"] = \"\\uE295\";\n    // U+E294  Reversed flat and flat with arrow up\n    Glyphs[\"accidentalReversedFlatAndFlatArrowUp\"] = \"\\uE294\";\n    // U+E291  Reversed flat with arrow down\n    Glyphs[\"accidentalReversedFlatArrowDown\"] = \"\\uE291\";\n    // U+E290  Reversed flat with arrow up\n    Glyphs[\"accidentalReversedFlatArrowUp\"] = \"\\uE290\";\n    // U+E262  Sharp\n    Glyphs[\"accidentalSharp\"] = \"\\uE262\";\n    // U+ED36  Arabic half-tone sharp\n    Glyphs[\"accidentalSharpArabic\"] = \"\\uED36\";\n    // U+E2F3  Sharp equal tempered semitone\n    Glyphs[\"accidentalSharpEqualTempered\"] = \"\\uE2F3\";\n    // U+ED57  Lowered sharp (Stockhausen)\n    Glyphs[\"accidentalSharpLoweredStockhausen\"] = \"\\uED57\";\n    // U+E2C3  Sharp lowered by one syntonic comma\n    Glyphs[\"accidentalSharpOneArrowDown\"] = \"\\uE2C3\";\n    // U+E2C8  Sharp raised by one syntonic comma\n    Glyphs[\"accidentalSharpOneArrowUp\"] = \"\\uE2C8\";\n    // U+E473  One or three quarter tones sharp\n    Glyphs[\"accidentalSharpOneHorizontalStroke\"] = \"\\uE473\";\n    // U+ED56  Raised sharp (Stockhausen)\n    Glyphs[\"accidentalSharpRaisedStockhausen\"] = \"\\uED56\";\n    // U+ED5E  Repeated sharp, note on line (Stockhausen)\n    Glyphs[\"accidentalSharpRepeatedLineStockhausen\"] = \"\\uED5E\";\n    // U+ED5D  Repeated sharp, note in space (Stockhausen)\n    Glyphs[\"accidentalSharpRepeatedSpaceStockhausen\"] = \"\\uED5D\";\n    // U+E481  Reversed sharp\n    Glyphs[\"accidentalSharpReversed\"] = \"\\uE481\";\n    // U+E269  Sharp sharp\n    Glyphs[\"accidentalSharpSharp\"] = \"\\uE269\";\n    // U+E2D7  Sharp lowered by three syntonic commas\n    Glyphs[\"accidentalSharpThreeArrowsDown\"] = \"\\uE2D7\";\n    // U+E2DC  Sharp raised by three syntonic commas\n    Glyphs[\"accidentalSharpThreeArrowsUp\"] = \"\\uE2DC\";\n    // U+E2CD  Sharp lowered by two syntonic commas\n    Glyphs[\"accidentalSharpTwoArrowsDown\"] = \"\\uE2CD\";\n    // U+E2D2  Sharp raised by two syntonic commas\n    Glyphs[\"accidentalSharpTwoArrowsUp\"] = \"\\uE2D2\";\n    // U+E2A0  1/12 tone low\n    Glyphs[\"accidentalSims12Down\"] = \"\\uE2A0\";\n    // U+E2A3  1/12 tone high\n    Glyphs[\"accidentalSims12Up\"] = \"\\uE2A3\";\n    // U+E2A2  1/4 tone low\n    Glyphs[\"accidentalSims4Down\"] = \"\\uE2A2\";\n    // U+E2A5  1/4 tone high\n    Glyphs[\"accidentalSims4Up\"] = \"\\uE2A5\";\n    // U+E2A1  1/6 tone low\n    Glyphs[\"accidentalSims6Down\"] = \"\\uE2A1\";\n    // U+E2A4  1/6 tone high\n    Glyphs[\"accidentalSims6Up\"] = \"\\uE2A4\";\n    // U+E461  Sori (quarter tone sharp)\n    Glyphs[\"accidentalSori\"] = \"\\uE461\";\n    // U+E477  Byzantine-style Bakiye flat (Tavener)\n    Glyphs[\"accidentalTavenerFlat\"] = \"\\uE477\";\n    // U+E476  Byzantine-style Büyük mücenneb sharp (Tavener)\n    Glyphs[\"accidentalTavenerSharp\"] = \"\\uE476\";\n    // U+ED31  Arabic three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArabic\"] = \"\\uED31\";\n    // U+E271  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowDown\"] = \"\\uE271\";\n    // U+E278  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowUp\"] = \"\\uE278\";\n    // U+E489  Three-quarter-tones flat (Couper)\n    Glyphs[\"accidentalThreeQuarterTonesFlatCouper\"] = \"\\uE489\";\n    // U+E486  Three-quarter-tones flat (Grisey)\n    Glyphs[\"accidentalThreeQuarterTonesFlatGrisey\"] = \"\\uE486\";\n    // U+E487  Three-quarter-tones flat (Tartini)\n    Glyphs[\"accidentalThreeQuarterTonesFlatTartini\"] = \"\\uE487\";\n    // U+E281  Reversed flat and flat (three-quarter-tones flat) (Zimmermann)\n    Glyphs[\"accidentalThreeQuarterTonesFlatZimmermann\"] = \"\\uE281\";\n    // U+ED37  Arabic three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArabic\"] = \"\\uED37\";\n    // U+E277  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowDown\"] = \"\\uE277\";\n    // U+E274  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowUp\"] = \"\\uE274\";\n    // U+E474  Three quarter tones sharp (Bussotti)\n    Glyphs[\"accidentalThreeQuarterTonesSharpBusotti\"] = \"\\uE474\";\n    // U+E283  One and a half sharps (three-quarter-tones sharp) (Stein)\n    Glyphs[\"accidentalThreeQuarterTonesSharpStein\"] = \"\\uE283\";\n    // U+ED5A  Three-quarter-tones sharp (Stockhausen)\n    Glyphs[\"accidentalThreeQuarterTonesSharpStockhausen\"] = \"\\uED5A\";\n    // U+E266  Triple flat\n    Glyphs[\"accidentalTripleFlat\"] = \"\\uE266\";\n    // U+E265  Triple sharp\n    Glyphs[\"accidentalTripleSharp\"] = \"\\uE265\";\n    // U+E48D  Two-third-tones flat (Ferneyhough)\n    Glyphs[\"accidentalTwoThirdTonesFlatFerneyhough\"] = \"\\uE48D\";\n    // U+E48C  Two-third-tones sharp (Ferneyhough)\n    Glyphs[\"accidentalTwoThirdTonesSharpFerneyhough\"] = \"\\uE48C\";\n    // U+EE61  Accidental down\n    Glyphs[\"accidentalUpsAndDownsDown\"] = \"\\uEE61\";\n    // U+EE63  Accidental less\n    Glyphs[\"accidentalUpsAndDownsLess\"] = \"\\uEE63\";\n    // U+EE62  Accidental more\n    Glyphs[\"accidentalUpsAndDownsMore\"] = \"\\uEE62\";\n    // U+EE60  Accidental up\n    Glyphs[\"accidentalUpsAndDownsUp\"] = \"\\uEE60\";\n    // U+E47C  Wilson minus (5 comma down)\n    Glyphs[\"accidentalWilsonMinus\"] = \"\\uE47C\";\n    // U+E47B  Wilson plus (5 comma up)\n    Glyphs[\"accidentalWilsonPlus\"] = \"\\uE47B\";\n    // U+E434  5/6 tone flat\n    Glyphs[\"accidentalWyschnegradsky10TwelfthsFlat\"] = \"\\uE434\";\n    // U+E429  5/6 tone sharp\n    Glyphs[\"accidentalWyschnegradsky10TwelfthsSharp\"] = \"\\uE429\";\n    // U+E435  11/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky11TwelfthsFlat\"] = \"\\uE435\";\n    // U+E42A  11/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky11TwelfthsSharp\"] = \"\\uE42A\";\n    // U+E42B  1/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky1TwelfthsFlat\"] = \"\\uE42B\";\n    // U+E420  1/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky1TwelfthsSharp\"] = \"\\uE420\";\n    // U+E42C  1/6 tone flat\n    Glyphs[\"accidentalWyschnegradsky2TwelfthsFlat\"] = \"\\uE42C\";\n    // U+E421  1/6 tone sharp\n    Glyphs[\"accidentalWyschnegradsky2TwelfthsSharp\"] = \"\\uE421\";\n    // U+E42D  1/4 tone flat\n    Glyphs[\"accidentalWyschnegradsky3TwelfthsFlat\"] = \"\\uE42D\";\n    // U+E422  1/4 tone sharp\n    Glyphs[\"accidentalWyschnegradsky3TwelfthsSharp\"] = \"\\uE422\";\n    // U+E42E  1/3 tone flat\n    Glyphs[\"accidentalWyschnegradsky4TwelfthsFlat\"] = \"\\uE42E\";\n    // U+E423  1/3 tone sharp\n    Glyphs[\"accidentalWyschnegradsky4TwelfthsSharp\"] = \"\\uE423\";\n    // U+E42F  5/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky5TwelfthsFlat\"] = \"\\uE42F\";\n    // U+E424  5/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky5TwelfthsSharp\"] = \"\\uE424\";\n    // U+E430  1/2 tone flat\n    Glyphs[\"accidentalWyschnegradsky6TwelfthsFlat\"] = \"\\uE430\";\n    // U+E425  1/2 tone sharp\n    Glyphs[\"accidentalWyschnegradsky6TwelfthsSharp\"] = \"\\uE425\";\n    // U+E431  7/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky7TwelfthsFlat\"] = \"\\uE431\";\n    // U+E426  7/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky7TwelfthsSharp\"] = \"\\uE426\";\n    // U+E432  2/3 tone flat\n    Glyphs[\"accidentalWyschnegradsky8TwelfthsFlat\"] = \"\\uE432\";\n    // U+E427  2/3 tone sharp\n    Glyphs[\"accidentalWyschnegradsky8TwelfthsSharp\"] = \"\\uE427\";\n    // U+E433  3/4 tone flat\n    Glyphs[\"accidentalWyschnegradsky9TwelfthsFlat\"] = \"\\uE433\";\n    // U+E428  3/4 tone sharp\n    Glyphs[\"accidentalWyschnegradsky9TwelfthsSharp\"] = \"\\uE428\";\n    // U+E470  One-third-tone sharp (Xenakis)\n    Glyphs[\"accidentalXenakisOneThirdToneSharp\"] = \"\\uE470\";\n    // U+E471  Two-third-tones sharp (Xenakis)\n    Glyphs[\"accidentalXenakisTwoThirdTonesSharp\"] = \"\\uE471\";\n    // U+E86A  Choralmelodie (Berg)\n    Glyphs[\"analyticsChoralmelodie\"] = \"\\uE86A\";\n    // U+E863  End of stimme\n    Glyphs[\"analyticsEndStimme\"] = \"\\uE863\";\n    // U+E86B  Hauptrhythmus (Berg)\n    Glyphs[\"analyticsHauptrhythmus\"] = \"\\uE86B\";\n    // U+E860  Hauptstimme\n    Glyphs[\"analyticsHauptstimme\"] = \"\\uE860\";\n    // U+E869  Inversion 1\n    Glyphs[\"analyticsInversion1\"] = \"\\uE869\";\n    // U+E861  Nebenstimme\n    Glyphs[\"analyticsNebenstimme\"] = \"\\uE861\";\n    // U+E862  Start of stimme\n    Glyphs[\"analyticsStartStimme\"] = \"\\uE862\";\n    // U+E864  Theme\n    Glyphs[\"analyticsTheme\"] = \"\\uE864\";\n    // U+E868  Theme 1\n    Glyphs[\"analyticsTheme1\"] = \"\\uE868\";\n    // U+E867  Inversion of theme\n    Glyphs[\"analyticsThemeInversion\"] = \"\\uE867\";\n    // U+E865  Retrograde of theme\n    Glyphs[\"analyticsThemeRetrograde\"] = \"\\uE865\";\n    // U+E866  Retrograde inversion of theme\n    Glyphs[\"analyticsThemeRetrogradeInversion\"] = \"\\uE866\";\n    // U+E63C  Arpeggiato\n    Glyphs[\"arpeggiato\"] = \"\\uE63C\";\n    // U+E635  Arpeggiato down\n    Glyphs[\"arpeggiatoDown\"] = \"\\uE635\";\n    // U+E634  Arpeggiato up\n    Glyphs[\"arpeggiatoUp\"] = \"\\uE634\";\n    // U+EB64  Black arrow down (S)\n    Glyphs[\"arrowBlackDown\"] = \"\\uEB64\";\n    // U+EB65  Black arrow down-left (SW)\n    Glyphs[\"arrowBlackDownLeft\"] = \"\\uEB65\";\n    // U+EB63  Black arrow down-right (SE)\n    Glyphs[\"arrowBlackDownRight\"] = \"\\uEB63\";\n    // U+EB66  Black arrow left (W)\n    Glyphs[\"arrowBlackLeft\"] = \"\\uEB66\";\n    // U+EB62  Black arrow right (E)\n    Glyphs[\"arrowBlackRight\"] = \"\\uEB62\";\n    // U+EB60  Black arrow up (N)\n    Glyphs[\"arrowBlackUp\"] = \"\\uEB60\";\n    // U+EB67  Black arrow up-left (NW)\n    Glyphs[\"arrowBlackUpLeft\"] = \"\\uEB67\";\n    // U+EB61  Black arrow up-right (NE)\n    Glyphs[\"arrowBlackUpRight\"] = \"\\uEB61\";\n    // U+EB74  Open arrow down (S)\n    Glyphs[\"arrowOpenDown\"] = \"\\uEB74\";\n    // U+EB75  Open arrow down-left (SW)\n    Glyphs[\"arrowOpenDownLeft\"] = \"\\uEB75\";\n    // U+EB73  Open arrow down-right (SE)\n    Glyphs[\"arrowOpenDownRight\"] = \"\\uEB73\";\n    // U+EB76  Open arrow left (W)\n    Glyphs[\"arrowOpenLeft\"] = \"\\uEB76\";\n    // U+EB72  Open arrow right (E)\n    Glyphs[\"arrowOpenRight\"] = \"\\uEB72\";\n    // U+EB70  Open arrow up (N)\n    Glyphs[\"arrowOpenUp\"] = \"\\uEB70\";\n    // U+EB77  Open arrow up-left (NW)\n    Glyphs[\"arrowOpenUpLeft\"] = \"\\uEB77\";\n    // U+EB71  Open arrow up-right (NE)\n    Glyphs[\"arrowOpenUpRight\"] = \"\\uEB71\";\n    // U+EB6C  White arrow down (S)\n    Glyphs[\"arrowWhiteDown\"] = \"\\uEB6C\";\n    // U+EB6D  White arrow down-left (SW)\n    Glyphs[\"arrowWhiteDownLeft\"] = \"\\uEB6D\";\n    // U+EB6B  White arrow down-right (SE)\n    Glyphs[\"arrowWhiteDownRight\"] = \"\\uEB6B\";\n    // U+EB6E  White arrow left (W)\n    Glyphs[\"arrowWhiteLeft\"] = \"\\uEB6E\";\n    // U+EB6A  White arrow right (E)\n    Glyphs[\"arrowWhiteRight\"] = \"\\uEB6A\";\n    // U+EB68  White arrow up (N)\n    Glyphs[\"arrowWhiteUp\"] = \"\\uEB68\";\n    // U+EB6F  White arrow up-left (NW)\n    Glyphs[\"arrowWhiteUpLeft\"] = \"\\uEB6F\";\n    // U+EB69  White arrow up-right (NE)\n    Glyphs[\"arrowWhiteUpRight\"] = \"\\uEB69\";\n    // U+EB7C  Black arrowhead down (S)\n    Glyphs[\"arrowheadBlackDown\"] = \"\\uEB7C\";\n    // U+EB7D  Black arrowhead down-left (SW)\n    Glyphs[\"arrowheadBlackDownLeft\"] = \"\\uEB7D\";\n    // U+EB7B  Black arrowhead down-right (SE)\n    Glyphs[\"arrowheadBlackDownRight\"] = \"\\uEB7B\";\n    // U+EB7E  Black arrowhead left (W)\n    Glyphs[\"arrowheadBlackLeft\"] = \"\\uEB7E\";\n    // U+EB7A  Black arrowhead right (E)\n    Glyphs[\"arrowheadBlackRight\"] = \"\\uEB7A\";\n    // U+EB78  Black arrowhead up (N)\n    Glyphs[\"arrowheadBlackUp\"] = \"\\uEB78\";\n    // U+EB7F  Black arrowhead up-left (NW)\n    Glyphs[\"arrowheadBlackUpLeft\"] = \"\\uEB7F\";\n    // U+EB79  Black arrowhead up-right (NE)\n    Glyphs[\"arrowheadBlackUpRight\"] = \"\\uEB79\";\n    // U+EB8C  Open arrowhead down (S)\n    Glyphs[\"arrowheadOpenDown\"] = \"\\uEB8C\";\n    // U+EB8D  Open arrowhead down-left (SW)\n    Glyphs[\"arrowheadOpenDownLeft\"] = \"\\uEB8D\";\n    // U+EB8B  Open arrowhead down-right (SE)\n    Glyphs[\"arrowheadOpenDownRight\"] = \"\\uEB8B\";\n    // U+EB8E  Open arrowhead left (W)\n    Glyphs[\"arrowheadOpenLeft\"] = \"\\uEB8E\";\n    // U+EB8A  Open arrowhead right (E)\n    Glyphs[\"arrowheadOpenRight\"] = \"\\uEB8A\";\n    // U+EB88  Open arrowhead up (N)\n    Glyphs[\"arrowheadOpenUp\"] = \"\\uEB88\";\n    // U+EB8F  Open arrowhead up-left (NW)\n    Glyphs[\"arrowheadOpenUpLeft\"] = \"\\uEB8F\";\n    // U+EB89  Open arrowhead up-right (NE)\n    Glyphs[\"arrowheadOpenUpRight\"] = \"\\uEB89\";\n    // U+EB84  White arrowhead down (S)\n    Glyphs[\"arrowheadWhiteDown\"] = \"\\uEB84\";\n    // U+EB85  White arrowhead down-left (SW)\n    Glyphs[\"arrowheadWhiteDownLeft\"] = \"\\uEB85\";\n    // U+EB83  White arrowhead down-right (SE)\n    Glyphs[\"arrowheadWhiteDownRight\"] = \"\\uEB83\";\n    // U+EB86  White arrowhead left (W)\n    Glyphs[\"arrowheadWhiteLeft\"] = \"\\uEB86\";\n    // U+EB82  White arrowhead right (E)\n    Glyphs[\"arrowheadWhiteRight\"] = \"\\uEB82\";\n    // U+EB80  White arrowhead up (N)\n    Glyphs[\"arrowheadWhiteUp\"] = \"\\uEB80\";\n    // U+EB87  White arrowhead up-left (NW)\n    Glyphs[\"arrowheadWhiteUpLeft\"] = \"\\uEB87\";\n    // U+EB81  White arrowhead up-right (NE)\n    Glyphs[\"arrowheadWhiteUpRight\"] = \"\\uEB81\";\n    // U+E4A0  Accent above\n    Glyphs[\"articAccentAbove\"] = \"\\uE4A0\";\n    // U+E4A1  Accent below\n    Glyphs[\"articAccentBelow\"] = \"\\uE4A1\";\n    // U+E4B0  Accent-staccato above\n    Glyphs[\"articAccentStaccatoAbove\"] = \"\\uE4B0\";\n    // U+E4B1  Accent-staccato below\n    Glyphs[\"articAccentStaccatoBelow\"] = \"\\uE4B1\";\n    // U+E4BA  Laissez vibrer (l.v.) above\n    Glyphs[\"articLaissezVibrerAbove\"] = \"\\uE4BA\";\n    // U+E4BB  Laissez vibrer (l.v.) below\n    Glyphs[\"articLaissezVibrerBelow\"] = \"\\uE4BB\";\n    // U+E4AC  Marcato above\n    Glyphs[\"articMarcatoAbove\"] = \"\\uE4AC\";\n    // U+E4AD  Marcato below\n    Glyphs[\"articMarcatoBelow\"] = \"\\uE4AD\";\n    // U+E4AE  Marcato-staccato above\n    Glyphs[\"articMarcatoStaccatoAbove\"] = \"\\uE4AE\";\n    // U+E4AF  Marcato-staccato below\n    Glyphs[\"articMarcatoStaccatoBelow\"] = \"\\uE4AF\";\n    // U+E4BC  Marcato-tenuto above\n    Glyphs[\"articMarcatoTenutoAbove\"] = \"\\uE4BC\";\n    // U+E4BD  Marcato-tenuto below\n    Glyphs[\"articMarcatoTenutoBelow\"] = \"\\uE4BD\";\n    // U+ED40  Soft accent above\n    Glyphs[\"articSoftAccentAbove\"] = \"\\uED40\";\n    // U+ED41  Soft accent below\n    Glyphs[\"articSoftAccentBelow\"] = \"\\uED41\";\n    // U+ED42  Soft accent-staccato above\n    Glyphs[\"articSoftAccentStaccatoAbove\"] = \"\\uED42\";\n    // U+ED43  Soft accent-staccato below\n    Glyphs[\"articSoftAccentStaccatoBelow\"] = \"\\uED43\";\n    // U+ED44  Soft accent-tenuto above\n    Glyphs[\"articSoftAccentTenutoAbove\"] = \"\\uED44\";\n    // U+ED45  Soft accent-tenuto below\n    Glyphs[\"articSoftAccentTenutoBelow\"] = \"\\uED45\";\n    // U+ED46  Soft accent-tenuto-staccato above\n    Glyphs[\"articSoftAccentTenutoStaccatoAbove\"] = \"\\uED46\";\n    // U+ED47  Soft accent-tenuto-staccato below\n    Glyphs[\"articSoftAccentTenutoStaccatoBelow\"] = \"\\uED47\";\n    // U+E4A6  Staccatissimo above\n    Glyphs[\"articStaccatissimoAbove\"] = \"\\uE4A6\";\n    // U+E4A7  Staccatissimo below\n    Glyphs[\"articStaccatissimoBelow\"] = \"\\uE4A7\";\n    // U+E4AA  Staccatissimo stroke above\n    Glyphs[\"articStaccatissimoStrokeAbove\"] = \"\\uE4AA\";\n    // U+E4AB  Staccatissimo stroke below\n    Glyphs[\"articStaccatissimoStrokeBelow\"] = \"\\uE4AB\";\n    // U+E4A8  Staccatissimo wedge above\n    Glyphs[\"articStaccatissimoWedgeAbove\"] = \"\\uE4A8\";\n    // U+E4A9  Staccatissimo wedge below\n    Glyphs[\"articStaccatissimoWedgeBelow\"] = \"\\uE4A9\";\n    // U+E4A2  Staccato above\n    Glyphs[\"articStaccatoAbove\"] = \"\\uE4A2\";\n    // U+E4A3  Staccato below\n    Glyphs[\"articStaccatoBelow\"] = \"\\uE4A3\";\n    // U+E4B6  Stress above\n    Glyphs[\"articStressAbove\"] = \"\\uE4B6\";\n    // U+E4B7  Stress below\n    Glyphs[\"articStressBelow\"] = \"\\uE4B7\";\n    // U+E4A4  Tenuto above\n    Glyphs[\"articTenutoAbove\"] = \"\\uE4A4\";\n    // U+E4B4  Tenuto-accent above\n    Glyphs[\"articTenutoAccentAbove\"] = \"\\uE4B4\";\n    // U+E4B5  Tenuto-accent below\n    Glyphs[\"articTenutoAccentBelow\"] = \"\\uE4B5\";\n    // U+E4A5  Tenuto below\n    Glyphs[\"articTenutoBelow\"] = \"\\uE4A5\";\n    // U+E4B2  Louré (tenuto-staccato) above\n    Glyphs[\"articTenutoStaccatoAbove\"] = \"\\uE4B2\";\n    // U+E4B3  Louré (tenuto-staccato) below\n    Glyphs[\"articTenutoStaccatoBelow\"] = \"\\uE4B3\";\n    // U+E4B8  Unstress above\n    Glyphs[\"articUnstressAbove\"] = \"\\uE4B8\";\n    // U+E4B9  Unstress below\n    Glyphs[\"articUnstressBelow\"] = \"\\uE4B9\";\n    // U+E1E7  Augmentation dot\n    Glyphs[\"augmentationDot\"] = \"\\uE1E7\";\n    // U+E036  Dashed barline\n    Glyphs[\"barlineDashed\"] = \"\\uE036\";\n    // U+E037  Dotted barline\n    Glyphs[\"barlineDotted\"] = \"\\uE037\";\n    // U+E031  Double barline\n    Glyphs[\"barlineDouble\"] = \"\\uE031\";\n    // U+E032  Final barline\n    Glyphs[\"barlineFinal\"] = \"\\uE032\";\n    // U+E034  Heavy barline\n    Glyphs[\"barlineHeavy\"] = \"\\uE034\";\n    // U+E035  Heavy double barline\n    Glyphs[\"barlineHeavyHeavy\"] = \"\\uE035\";\n    // U+E033  Reverse final barline\n    Glyphs[\"barlineReverseFinal\"] = \"\\uE033\";\n    // U+E038  Short barline\n    Glyphs[\"barlineShort\"] = \"\\uE038\";\n    // U+E030  Single barline\n    Glyphs[\"barlineSingle\"] = \"\\uE030\";\n    // U+E039  Tick barline\n    Glyphs[\"barlineTick\"] = \"\\uE039\";\n    // U+EAF4  Accel./rit. beam 1 (widest)\n    Glyphs[\"beamAccelRit1\"] = \"\\uEAF4\";\n    // U+EAFD  Accel./rit. beam 10\n    Glyphs[\"beamAccelRit10\"] = \"\\uEAFD\";\n    // U+EAFE  Accel./rit. beam 11\n    Glyphs[\"beamAccelRit11\"] = \"\\uEAFE\";\n    // U+EAFF  Accel./rit. beam 12\n    Glyphs[\"beamAccelRit12\"] = \"\\uEAFF\";\n    // U+EB00  Accel./rit. beam 13\n    Glyphs[\"beamAccelRit13\"] = \"\\uEB00\";\n    // U+EB01  Accel./rit. beam 14\n    Glyphs[\"beamAccelRit14\"] = \"\\uEB01\";\n    // U+EB02  Accel./rit. beam 15 (narrowest)\n    Glyphs[\"beamAccelRit15\"] = \"\\uEB02\";\n    // U+EAF5  Accel./rit. beam 2\n    Glyphs[\"beamAccelRit2\"] = \"\\uEAF5\";\n    // U+EAF6  Accel./rit. beam 3\n    Glyphs[\"beamAccelRit3\"] = \"\\uEAF6\";\n    // U+EAF7  Accel./rit. beam 4\n    Glyphs[\"beamAccelRit4\"] = \"\\uEAF7\";\n    // U+EAF8  Accel./rit. beam 5\n    Glyphs[\"beamAccelRit5\"] = \"\\uEAF8\";\n    // U+EAF9  Accel./rit. beam 6\n    Glyphs[\"beamAccelRit6\"] = \"\\uEAF9\";\n    // U+EAFA  Accel./rit. beam 7\n    Glyphs[\"beamAccelRit7\"] = \"\\uEAFA\";\n    // U+EAFB  Accel./rit. beam 8\n    Glyphs[\"beamAccelRit8\"] = \"\\uEAFB\";\n    // U+EAFC  Accel./rit. beam 9\n    Glyphs[\"beamAccelRit9\"] = \"\\uEAFC\";\n    // U+EB03  Accel./rit. beam terminating line\n    Glyphs[\"beamAccelRitFinal\"] = \"\\uEB03\";\n    // U+E000  Brace\n    Glyphs[\"brace\"] = \"\\uE000\";\n    // U+E002  Bracket\n    Glyphs[\"bracket\"] = \"\\uE002\";\n    // U+E004  Bracket bottom\n    Glyphs[\"bracketBottom\"] = \"\\uE004\";\n    // U+E003  Bracket top\n    Glyphs[\"bracketTop\"] = \"\\uE003\";\n    // U+E5E3  Bend\n    Glyphs[\"brassBend\"] = \"\\uE5E3\";\n    // U+E5D6  Doit, long\n    Glyphs[\"brassDoitLong\"] = \"\\uE5D6\";\n    // U+E5D5  Doit, medium\n    Glyphs[\"brassDoitMedium\"] = \"\\uE5D5\";\n    // U+E5D4  Doit, short\n    Glyphs[\"brassDoitShort\"] = \"\\uE5D4\";\n    // U+E5D9  Lip fall, long\n    Glyphs[\"brassFallLipLong\"] = \"\\uE5D9\";\n    // U+E5D8  Lip fall, medium\n    Glyphs[\"brassFallLipMedium\"] = \"\\uE5D8\";\n    // U+E5D7  Lip fall, short\n    Glyphs[\"brassFallLipShort\"] = \"\\uE5D7\";\n    // U+E5DF  Rough fall, long\n    Glyphs[\"brassFallRoughLong\"] = \"\\uE5DF\";\n    // U+E5DE  Rough fall, medium\n    Glyphs[\"brassFallRoughMedium\"] = \"\\uE5DE\";\n    // U+E5DD  Rough fall, short\n    Glyphs[\"brassFallRoughShort\"] = \"\\uE5DD\";\n    // U+E5DC  Smooth fall, long\n    Glyphs[\"brassFallSmoothLong\"] = \"\\uE5DC\";\n    // U+E5DB  Smooth fall, medium\n    Glyphs[\"brassFallSmoothMedium\"] = \"\\uE5DB\";\n    // U+E5DA  Smooth fall, short\n    Glyphs[\"brassFallSmoothShort\"] = \"\\uE5DA\";\n    // U+E5E1  Flip\n    Glyphs[\"brassFlip\"] = \"\\uE5E1\";\n    // U+E5E8  Harmon mute, stem in\n    Glyphs[\"brassHarmonMuteClosed\"] = \"\\uE5E8\";\n    // U+E5E9  Harmon mute, stem extended, left\n    Glyphs[\"brassHarmonMuteStemHalfLeft\"] = \"\\uE5E9\";\n    // U+E5EA  Harmon mute, stem extended, right\n    Glyphs[\"brassHarmonMuteStemHalfRight\"] = \"\\uE5EA\";\n    // U+E5EB  Harmon mute, stem out\n    Glyphs[\"brassHarmonMuteStemOpen\"] = \"\\uE5EB\";\n    // U+E5E4  Jazz turn\n    Glyphs[\"brassJazzTurn\"] = \"\\uE5E4\";\n    // U+E5D3  Lift, long\n    Glyphs[\"brassLiftLong\"] = \"\\uE5D3\";\n    // U+E5D2  Lift, medium\n    Glyphs[\"brassLiftMedium\"] = \"\\uE5D2\";\n    // U+E5D1  Lift, short\n    Glyphs[\"brassLiftShort\"] = \"\\uE5D1\";\n    // U+E5EE  Smooth lift, long\n    Glyphs[\"brassLiftSmoothLong\"] = \"\\uE5EE\";\n    // U+E5ED  Smooth lift, medium\n    Glyphs[\"brassLiftSmoothMedium\"] = \"\\uE5ED\";\n    // U+E5EC  Smooth lift, short\n    Glyphs[\"brassLiftSmoothShort\"] = \"\\uE5EC\";\n    // U+E5E5  Muted (closed)\n    Glyphs[\"brassMuteClosed\"] = \"\\uE5E5\";\n    // U+E5E6  Half-muted (half-closed)\n    Glyphs[\"brassMuteHalfClosed\"] = \"\\uE5E6\";\n    // U+E5E7  Open\n    Glyphs[\"brassMuteOpen\"] = \"\\uE5E7\";\n    // U+E5E0  Plop\n    Glyphs[\"brassPlop\"] = \"\\uE5E0\";\n    // U+E5D0  Scoop\n    Glyphs[\"brassScoop\"] = \"\\uE5D0\";\n    // U+E5E2  Smear\n    Glyphs[\"brassSmear\"] = \"\\uE5E2\";\n    // U+E5EF  Valve trill\n    Glyphs[\"brassValveTrill\"] = \"\\uE5EF\";\n    // U+E4CE  Breath mark (comma)\n    Glyphs[\"breathMarkComma\"] = \"\\uE4CE\";\n    // U+E4D5  Breath mark (Salzedo)\n    Glyphs[\"breathMarkSalzedo\"] = \"\\uE4D5\";\n    // U+E4CF  Breath mark (tick-like)\n    Glyphs[\"breathMarkTick\"] = \"\\uE4CF\";\n    // U+E4D0  Breath mark (upbow-like)\n    Glyphs[\"breathMarkUpbow\"] = \"\\uE4D0\";\n    // U+E078  Bridge clef\n    Glyphs[\"bridgeClef\"] = \"\\uE078\";\n    // U+E22A  Buzz roll\n    Glyphs[\"buzzRoll\"] = \"\\uE22A\";\n    // U+E05C  C clef\n    Glyphs[\"cClef\"] = \"\\uE05C\";\n    // U+E05D  C clef ottava bassa\n    Glyphs[\"cClef8vb\"] = \"\\uE05D\";\n    // U+E05F  C clef, arrow down\n    Glyphs[\"cClefArrowDown\"] = \"\\uE05F\";\n    // U+E05E  C clef, arrow up\n    Glyphs[\"cClefArrowUp\"] = \"\\uE05E\";\n    // U+E07B  C clef change\n    Glyphs[\"cClefChange\"] = \"\\uE07B\";\n    // U+E061  Combining C clef\n    Glyphs[\"cClefCombining\"] = \"\\uE061\";\n    // U+E075  Reversed C clef\n    Glyphs[\"cClefReversed\"] = \"\\uE075\";\n    // U+E060  C clef (19th century)\n    Glyphs[\"cClefSquare\"] = \"\\uE060\";\n    // U+E4D1  Caesura\n    Glyphs[\"caesura\"] = \"\\uE4D1\";\n    // U+E4D4  Curved caesura\n    Glyphs[\"caesuraCurved\"] = \"\\uE4D4\";\n    // U+E4D3  Short caesura\n    Glyphs[\"caesuraShort\"] = \"\\uE4D3\";\n    // U+E4D7  Single stroke caesura\n    Glyphs[\"caesuraSingleStroke\"] = \"\\uE4D7\";\n    // U+E4D2  Thick caesura\n    Glyphs[\"caesuraThick\"] = \"\\uE4D2\";\n    // U+E9D6  Accentus above\n    Glyphs[\"chantAccentusAbove\"] = \"\\uE9D6\";\n    // U+E9D7  Accentus below\n    Glyphs[\"chantAccentusBelow\"] = \"\\uE9D7\";\n    // U+E994  Punctum auctum, ascending\n    Glyphs[\"chantAuctumAsc\"] = \"\\uE994\";\n    // U+E995  Punctum auctum, descending\n    Glyphs[\"chantAuctumDesc\"] = \"\\uE995\";\n    // U+E9D9  Augmentum (mora)\n    Glyphs[\"chantAugmentum\"] = \"\\uE9D9\";\n    // U+E8F8  Caesura\n    Glyphs[\"chantCaesura\"] = \"\\uE8F8\";\n    // U+E906  Plainchant C clef\n    Glyphs[\"chantCclef\"] = \"\\uE906\";\n    // U+E9D2  Circulus above\n    Glyphs[\"chantCirculusAbove\"] = \"\\uE9D2\";\n    // U+E9D3  Circulus below\n    Glyphs[\"chantCirculusBelow\"] = \"\\uE9D3\";\n    // U+E9BD  Connecting line, ascending 2nd\n    Glyphs[\"chantConnectingLineAsc2nd\"] = \"\\uE9BD\";\n    // U+E9BE  Connecting line, ascending 3rd\n    Glyphs[\"chantConnectingLineAsc3rd\"] = \"\\uE9BE\";\n    // U+E9BF  Connecting line, ascending 4th\n    Glyphs[\"chantConnectingLineAsc4th\"] = \"\\uE9BF\";\n    // U+E9C0  Connecting line, ascending 5th\n    Glyphs[\"chantConnectingLineAsc5th\"] = \"\\uE9C0\";\n    // U+E9C1  Connecting line, ascending 6th\n    Glyphs[\"chantConnectingLineAsc6th\"] = \"\\uE9C1\";\n    // U+EA08  Plainchant custos, stem down, high position\n    Glyphs[\"chantCustosStemDownPosHigh\"] = \"\\uEA08\";\n    // U+EA09  Plainchant custos, stem down, highest position\n    Glyphs[\"chantCustosStemDownPosHighest\"] = \"\\uEA09\";\n    // U+EA07  Plainchant custos, stem down, middle position\n    Glyphs[\"chantCustosStemDownPosMiddle\"] = \"\\uEA07\";\n    // U+EA05  Plainchant custos, stem up, low position\n    Glyphs[\"chantCustosStemUpPosLow\"] = \"\\uEA05\";\n    // U+EA04  Plainchant custos, stem up, lowest position\n    Glyphs[\"chantCustosStemUpPosLowest\"] = \"\\uEA04\";\n    // U+EA06  Plainchant custos, stem up, middle position\n    Glyphs[\"chantCustosStemUpPosMiddle\"] = \"\\uEA06\";\n    // U+E9B3  Punctum deminutum, lower\n    Glyphs[\"chantDeminutumLower\"] = \"\\uE9B3\";\n    // U+E9B2  Punctum deminutum, upper\n    Glyphs[\"chantDeminutumUpper\"] = \"\\uE9B2\";\n    // U+E8F6  Divisio finalis\n    Glyphs[\"chantDivisioFinalis\"] = \"\\uE8F6\";\n    // U+E8F4  Divisio maior\n    Glyphs[\"chantDivisioMaior\"] = \"\\uE8F4\";\n    // U+E8F5  Divisio maxima\n    Glyphs[\"chantDivisioMaxima\"] = \"\\uE8F5\";\n    // U+E8F3  Divisio minima\n    Glyphs[\"chantDivisioMinima\"] = \"\\uE8F3\";\n    // U+E9B4  Entry line, ascending 2nd\n    Glyphs[\"chantEntryLineAsc2nd\"] = \"\\uE9B4\";\n    // U+E9B5  Entry line, ascending 3rd\n    Glyphs[\"chantEntryLineAsc3rd\"] = \"\\uE9B5\";\n    // U+E9B6  Entry line, ascending 4th\n    Glyphs[\"chantEntryLineAsc4th\"] = \"\\uE9B6\";\n    // U+E9B7  Entry line, ascending 5th\n    Glyphs[\"chantEntryLineAsc5th\"] = \"\\uE9B7\";\n    // U+E9B8  Entry line, ascending 6th\n    Glyphs[\"chantEntryLineAsc6th\"] = \"\\uE9B8\";\n    // U+E9D8  Episema\n    Glyphs[\"chantEpisema\"] = \"\\uE9D8\";\n    // U+E902  Plainchant F clef\n    Glyphs[\"chantFclef\"] = \"\\uE902\";\n    // U+E9D0  Ictus above\n    Glyphs[\"chantIctusAbove\"] = \"\\uE9D0\";\n    // U+E9D1  Ictus below\n    Glyphs[\"chantIctusBelow\"] = \"\\uE9D1\";\n    // U+E9B9  Ligated stroke, descending 2nd\n    Glyphs[\"chantLigaturaDesc2nd\"] = \"\\uE9B9\";\n    // U+E9BA  Ligated stroke, descending 3rd\n    Glyphs[\"chantLigaturaDesc3rd\"] = \"\\uE9BA\";\n    // U+E9BB  Ligated stroke, descending 4th\n    Glyphs[\"chantLigaturaDesc4th\"] = \"\\uE9BB\";\n    // U+E9BC  Ligated stroke, descending 5th\n    Glyphs[\"chantLigaturaDesc5th\"] = \"\\uE9BC\";\n    // U+E99C  Oriscus ascending\n    Glyphs[\"chantOriscusAscending\"] = \"\\uE99C\";\n    // U+E99D  Oriscus descending\n    Glyphs[\"chantOriscusDescending\"] = \"\\uE99D\";\n    // U+E99E  Oriscus liquescens\n    Glyphs[\"chantOriscusLiquescens\"] = \"\\uE99E\";\n    // U+E9B0  Podatus, lower\n    Glyphs[\"chantPodatusLower\"] = \"\\uE9B0\";\n    // U+E9B1  Podatus, upper\n    Glyphs[\"chantPodatusUpper\"] = \"\\uE9B1\";\n    // U+E990  Punctum\n    Glyphs[\"chantPunctum\"] = \"\\uE990\";\n    // U+E998  Punctum cavum\n    Glyphs[\"chantPunctumCavum\"] = \"\\uE998\";\n    // U+E9A1  Punctum deminutum\n    Glyphs[\"chantPunctumDeminutum\"] = \"\\uE9A1\";\n    // U+E991  Punctum inclinatum\n    Glyphs[\"chantPunctumInclinatum\"] = \"\\uE991\";\n    // U+E992  Punctum inclinatum auctum\n    Glyphs[\"chantPunctumInclinatumAuctum\"] = \"\\uE992\";\n    // U+E993  Punctum inclinatum deminutum\n    Glyphs[\"chantPunctumInclinatumDeminutum\"] = \"\\uE993\";\n    // U+E999  Punctum linea\n    Glyphs[\"chantPunctumLinea\"] = \"\\uE999\";\n    // U+E99A  Punctum linea cavum\n    Glyphs[\"chantPunctumLineaCavum\"] = \"\\uE99A\";\n    // U+E996  Punctum virga\n    Glyphs[\"chantPunctumVirga\"] = \"\\uE996\";\n    // U+E997  Punctum virga, reversed\n    Glyphs[\"chantPunctumVirgaReversed\"] = \"\\uE997\";\n    // U+E99B  Quilisma\n    Glyphs[\"chantQuilisma\"] = \"\\uE99B\";\n    // U+E9D4  Semicirculus above\n    Glyphs[\"chantSemicirculusAbove\"] = \"\\uE9D4\";\n    // U+E9D5  Semicirculus below\n    Glyphs[\"chantSemicirculusBelow\"] = \"\\uE9D5\";\n    // U+E8F0  Plainchant staff\n    Glyphs[\"chantStaff\"] = \"\\uE8F0\";\n    // U+E8F2  Plainchant staff (narrow)\n    Glyphs[\"chantStaffNarrow\"] = \"\\uE8F2\";\n    // U+E8F1  Plainchant staff (wide)\n    Glyphs[\"chantStaffWide\"] = \"\\uE8F1\";\n    // U+E99F  Strophicus\n    Glyphs[\"chantStrophicus\"] = \"\\uE99F\";\n    // U+E9A0  Strophicus auctus\n    Glyphs[\"chantStrophicusAuctus\"] = \"\\uE9A0\";\n    // U+E9C2  Strophicus liquescens, 2nd\n    Glyphs[\"chantStrophicusLiquescens2nd\"] = \"\\uE9C2\";\n    // U+E9C3  Strophicus liquescens, 3rd\n    Glyphs[\"chantStrophicusLiquescens3rd\"] = \"\\uE9C3\";\n    // U+E9C4  Strophicus liquescens, 4th\n    Glyphs[\"chantStrophicusLiquescens4th\"] = \"\\uE9C4\";\n    // U+E9C5  Strophicus liquescens, 5th\n    Glyphs[\"chantStrophicusLiquescens5th\"] = \"\\uE9C5\";\n    // U+E8F7  Virgula\n    Glyphs[\"chantVirgula\"] = \"\\uE8F7\";\n    // U+E07E  15 for clefs\n    Glyphs[\"clef15\"] = \"\\uE07E\";\n    // U+E07D  8 for clefs\n    Glyphs[\"clef8\"] = \"\\uE07D\";\n    // U+E07F  Combining clef change\n    Glyphs[\"clefChangeCombining\"] = \"\\uE07F\";\n    // U+E048  Coda\n    Glyphs[\"coda\"] = \"\\uE048\";\n    // U+E049  Square coda\n    Glyphs[\"codaSquare\"] = \"\\uE049\";\n    // U+E897  Beat 2, compound time\n    Glyphs[\"conductorBeat2Compound\"] = \"\\uE897\";\n    // U+E894  Beat 2, simple time\n    Glyphs[\"conductorBeat2Simple\"] = \"\\uE894\";\n    // U+E898  Beat 3, compound time\n    Glyphs[\"conductorBeat3Compound\"] = \"\\uE898\";\n    // U+E895  Beat 3, simple time\n    Glyphs[\"conductorBeat3Simple\"] = \"\\uE895\";\n    // U+E899  Beat 4, compound time\n    Glyphs[\"conductorBeat4Compound\"] = \"\\uE899\";\n    // U+E896  Beat 4, simple time\n    Glyphs[\"conductorBeat4Simple\"] = \"\\uE896\";\n    // U+E891  Left-hand beat or cue\n    Glyphs[\"conductorLeftBeat\"] = \"\\uE891\";\n    // U+E892  Right-hand beat or cue\n    Glyphs[\"conductorRightBeat\"] = \"\\uE892\";\n    // U+E890  Strong beat or cue\n    Glyphs[\"conductorStrongBeat\"] = \"\\uE890\";\n    // U+E89A  Unconducted/free passages\n    Glyphs[\"conductorUnconducted\"] = \"\\uE89A\";\n    // U+E893  Weak beat or cue\n    Glyphs[\"conductorWeakBeat\"] = \"\\uE893\";\n    // U+E8E0  Begin beam\n    Glyphs[\"controlBeginBeam\"] = \"\\uE8E0\";\n    // U+E8E6  Begin phrase\n    Glyphs[\"controlBeginPhrase\"] = \"\\uE8E6\";\n    // U+E8E4  Begin slur\n    Glyphs[\"controlBeginSlur\"] = \"\\uE8E4\";\n    // U+E8E2  Begin tie\n    Glyphs[\"controlBeginTie\"] = \"\\uE8E2\";\n    // U+E8E1  End beam\n    Glyphs[\"controlEndBeam\"] = \"\\uE8E1\";\n    // U+E8E7  End phrase\n    Glyphs[\"controlEndPhrase\"] = \"\\uE8E7\";\n    // U+E8E5  End slur\n    Glyphs[\"controlEndSlur\"] = \"\\uE8E5\";\n    // U+E8E3  End tie\n    Glyphs[\"controlEndTie\"] = \"\\uE8E3\";\n    // U+ED64  Double flat\n    Glyphs[\"csymAccidentalDoubleFlat\"] = \"\\uED64\";\n    // U+ED63  Double sharp\n    Glyphs[\"csymAccidentalDoubleSharp\"] = \"\\uED63\";\n    // U+ED60  Flat\n    Glyphs[\"csymAccidentalFlat\"] = \"\\uED60\";\n    // U+ED61  Natural\n    Glyphs[\"csymAccidentalNatural\"] = \"\\uED61\";\n    // U+ED62  Sharp\n    Glyphs[\"csymAccidentalSharp\"] = \"\\uED62\";\n    // U+ED66  Triple flat\n    Glyphs[\"csymAccidentalTripleFlat\"] = \"\\uED66\";\n    // U+ED65  Triple sharp\n    Glyphs[\"csymAccidentalTripleSharp\"] = \"\\uED65\";\n    // U+E87B  Slash for altered bass note\n    Glyphs[\"csymAlteredBassSlash\"] = \"\\uE87B\";\n    // U+E872  Augmented\n    Glyphs[\"csymAugmented\"] = \"\\uE872\";\n    // U+E877  Double-height left bracket\n    Glyphs[\"csymBracketLeftTall\"] = \"\\uE877\";\n    // U+E878  Double-height right bracket\n    Glyphs[\"csymBracketRightTall\"] = \"\\uE878\";\n    // U+E87C  Slash for chord symbols arranged diagonally\n    Glyphs[\"csymDiagonalArrangementSlash\"] = \"\\uE87C\";\n    // U+E870  Diminished\n    Glyphs[\"csymDiminished\"] = \"\\uE870\";\n    // U+E871  Half-diminished\n    Glyphs[\"csymHalfDiminished\"] = \"\\uE871\";\n    // U+E873  Major seventh\n    Glyphs[\"csymMajorSeventh\"] = \"\\uE873\";\n    // U+E874  Minor\n    Glyphs[\"csymMinor\"] = \"\\uE874\";\n    // U+E875  Double-height left parenthesis\n    Glyphs[\"csymParensLeftTall\"] = \"\\uE875\";\n    // U+E879  Triple-height left parenthesis\n    Glyphs[\"csymParensLeftVeryTall\"] = \"\\uE879\";\n    // U+E876  Double-height right parenthesis\n    Glyphs[\"csymParensRightTall\"] = \"\\uE876\";\n    // U+E87A  Triple-height right parenthesis\n    Glyphs[\"csymParensRightVeryTall\"] = \"\\uE87A\";\n    // U+E4D6  Curlew (Britten)\n    Glyphs[\"curlewSign\"] = \"\\uE4D6\";\n    // U+E046  Da capo\n    Glyphs[\"daCapo\"] = \"\\uE046\";\n    // U+E045  Dal segno\n    Glyphs[\"dalSegno\"] = \"\\uE045\";\n    // U+EA3C  Daseian excellentes 1\n    Glyphs[\"daseianExcellentes1\"] = \"\\uEA3C\";\n    // U+EA3D  Daseian excellentes 2\n    Glyphs[\"daseianExcellentes2\"] = \"\\uEA3D\";\n    // U+EA3E  Daseian excellentes 3\n    Glyphs[\"daseianExcellentes3\"] = \"\\uEA3E\";\n    // U+EA3F  Daseian excellentes 4\n    Glyphs[\"daseianExcellentes4\"] = \"\\uEA3F\";\n    // U+EA34  Daseian finales 1\n    Glyphs[\"daseianFinales1\"] = \"\\uEA34\";\n    // U+EA35  Daseian finales 2\n    Glyphs[\"daseianFinales2\"] = \"\\uEA35\";\n    // U+EA36  Daseian finales 3\n    Glyphs[\"daseianFinales3\"] = \"\\uEA36\";\n    // U+EA37  Daseian finales 4\n    Glyphs[\"daseianFinales4\"] = \"\\uEA37\";\n    // U+EA30  Daseian graves 1\n    Glyphs[\"daseianGraves1\"] = \"\\uEA30\";\n    // U+EA31  Daseian graves 2\n    Glyphs[\"daseianGraves2\"] = \"\\uEA31\";\n    // U+EA32  Daseian graves 3\n    Glyphs[\"daseianGraves3\"] = \"\\uEA32\";\n    // U+EA33  Daseian graves 4\n    Glyphs[\"daseianGraves4\"] = \"\\uEA33\";\n    // U+EA40  Daseian residua 1\n    Glyphs[\"daseianResidua1\"] = \"\\uEA40\";\n    // U+EA41  Daseian residua 2\n    Glyphs[\"daseianResidua2\"] = \"\\uEA41\";\n    // U+EA38  Daseian superiores 1\n    Glyphs[\"daseianSuperiores1\"] = \"\\uEA38\";\n    // U+EA39  Daseian superiores 2\n    Glyphs[\"daseianSuperiores2\"] = \"\\uEA39\";\n    // U+EA3A  Daseian superiores 3\n    Glyphs[\"daseianSuperiores3\"] = \"\\uEA3A\";\n    // U+EA3B  Daseian superiores 4\n    Glyphs[\"daseianSuperiores4\"] = \"\\uEA3B\";\n    // U+E234  Double lateral roll (Stevens)\n    Glyphs[\"doubleLateralRollStevens\"] = \"\\uE234\";\n    // U+E5F0  Double-tongue above\n    Glyphs[\"doubleTongueAbove\"] = \"\\uE5F0\";\n    // U+E5F1  Double-tongue below\n    Glyphs[\"doubleTongueBelow\"] = \"\\uE5F1\";\n    // U+E546  Colon separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorColon\"] = \"\\uE546\";\n    // U+E547  Hyphen separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorHyphen\"] = \"\\uE547\";\n    // U+E549  Slash separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorSlash\"] = \"\\uE549\";\n    // U+E548  Space separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorSpace\"] = \"\\uE548\";\n    // U+E53E  Crescendo\n    Glyphs[\"dynamicCrescendoHairpin\"] = \"\\uE53E\";\n    // U+E53F  Diminuendo\n    Glyphs[\"dynamicDiminuendoHairpin\"] = \"\\uE53F\";\n    // U+E52F  ff\n    Glyphs[\"dynamicFF\"] = \"\\uE52F\";\n    // U+E530  fff\n    Glyphs[\"dynamicFFF\"] = \"\\uE530\";\n    // U+E531  ffff\n    Glyphs[\"dynamicFFFF\"] = \"\\uE531\";\n    // U+E532  fffff\n    Glyphs[\"dynamicFFFFF\"] = \"\\uE532\";\n    // U+E533  ffffff\n    Glyphs[\"dynamicFFFFFF\"] = \"\\uE533\";\n    // U+E522  Forte\n    Glyphs[\"dynamicForte\"] = \"\\uE522\";\n    // U+E534  Forte-piano\n    Glyphs[\"dynamicFortePiano\"] = \"\\uE534\";\n    // U+E535  Forzando\n    Glyphs[\"dynamicForzando\"] = \"\\uE535\";\n    // U+E544  Left bracket (for hairpins)\n    Glyphs[\"dynamicHairpinBracketLeft\"] = \"\\uE544\";\n    // U+E545  Right bracket (for hairpins)\n    Glyphs[\"dynamicHairpinBracketRight\"] = \"\\uE545\";\n    // U+E542  Left parenthesis (for hairpins)\n    Glyphs[\"dynamicHairpinParenthesisLeft\"] = \"\\uE542\";\n    // U+E543  Right parenthesis (for hairpins)\n    Glyphs[\"dynamicHairpinParenthesisRight\"] = \"\\uE543\";\n    // U+E52D  mf\n    Glyphs[\"dynamicMF\"] = \"\\uE52D\";\n    // U+E52C  mp\n    Glyphs[\"dynamicMP\"] = \"\\uE52C\";\n    // U+E540  Messa di voce\n    Glyphs[\"dynamicMessaDiVoce\"] = \"\\uE540\";\n    // U+E521  Mezzo\n    Glyphs[\"dynamicMezzo\"] = \"\\uE521\";\n    // U+E526  Niente\n    Glyphs[\"dynamicNiente\"] = \"\\uE526\";\n    // U+E541  Niente (for hairpins)\n    Glyphs[\"dynamicNienteForHairpin\"] = \"\\uE541\";\n    // U+E52E  pf\n    Glyphs[\"dynamicPF\"] = \"\\uE52E\";\n    // U+E52B  pp\n    Glyphs[\"dynamicPP\"] = \"\\uE52B\";\n    // U+E52A  ppp\n    Glyphs[\"dynamicPPP\"] = \"\\uE52A\";\n    // U+E529  pppp\n    Glyphs[\"dynamicPPPP\"] = \"\\uE529\";\n    // U+E528  ppppp\n    Glyphs[\"dynamicPPPPP\"] = \"\\uE528\";\n    // U+E527  pppppp\n    Glyphs[\"dynamicPPPPPP\"] = \"\\uE527\";\n    // U+E520  Piano\n    Glyphs[\"dynamicPiano\"] = \"\\uE520\";\n    // U+E523  Rinforzando\n    Glyphs[\"dynamicRinforzando\"] = \"\\uE523\";\n    // U+E53C  Rinforzando 1\n    Glyphs[\"dynamicRinforzando1\"] = \"\\uE53C\";\n    // U+E53D  Rinforzando 2\n    Glyphs[\"dynamicRinforzando2\"] = \"\\uE53D\";\n    // U+E524  Sforzando\n    Glyphs[\"dynamicSforzando\"] = \"\\uE524\";\n    // U+E536  Sforzando 1\n    Glyphs[\"dynamicSforzando1\"] = \"\\uE536\";\n    // U+E538  Sforzando-pianissimo\n    Glyphs[\"dynamicSforzandoPianissimo\"] = \"\\uE538\";\n    // U+E537  Sforzando-piano\n    Glyphs[\"dynamicSforzandoPiano\"] = \"\\uE537\";\n    // U+E539  Sforzato\n    Glyphs[\"dynamicSforzato\"] = \"\\uE539\";\n    // U+E53B  Sforzatissimo\n    Glyphs[\"dynamicSforzatoFF\"] = \"\\uE53B\";\n    // U+E53A  Sforzato-piano\n    Glyphs[\"dynamicSforzatoPiano\"] = \"\\uE53A\";\n    // U+E525  Z\n    Glyphs[\"dynamicZ\"] = \"\\uE525\";\n    // U+EB46  Eight channels (7.1 surround)\n    Glyphs[\"elecAudioChannelsEight\"] = \"\\uEB46\";\n    // U+EB43  Five channels\n    Glyphs[\"elecAudioChannelsFive\"] = \"\\uEB43\";\n    // U+EB42  Four channels\n    Glyphs[\"elecAudioChannelsFour\"] = \"\\uEB42\";\n    // U+EB3E  One channel (mono)\n    Glyphs[\"elecAudioChannelsOne\"] = \"\\uEB3E\";\n    // U+EB45  Seven channels\n    Glyphs[\"elecAudioChannelsSeven\"] = \"\\uEB45\";\n    // U+EB44  Six channels (5.1 surround)\n    Glyphs[\"elecAudioChannelsSix\"] = \"\\uEB44\";\n    // U+EB40  Three channels (frontal)\n    Glyphs[\"elecAudioChannelsThreeFrontal\"] = \"\\uEB40\";\n    // U+EB41  Three channels (surround)\n    Glyphs[\"elecAudioChannelsThreeSurround\"] = \"\\uEB41\";\n    // U+EB3F  Two channels (stereo)\n    Glyphs[\"elecAudioChannelsTwo\"] = \"\\uEB3F\";\n    // U+EB49  Audio in\n    Glyphs[\"elecAudioIn\"] = \"\\uEB49\";\n    // U+EB3C  Mono audio setup\n    Glyphs[\"elecAudioMono\"] = \"\\uEB3C\";\n    // U+EB4A  Audio out\n    Glyphs[\"elecAudioOut\"] = \"\\uEB4A\";\n    // U+EB3D  Stereo audio setup\n    Glyphs[\"elecAudioStereo\"] = \"\\uEB3D\";\n    // U+EB1B  Camera\n    Glyphs[\"elecCamera\"] = \"\\uEB1B\";\n    // U+EB4D  Data in\n    Glyphs[\"elecDataIn\"] = \"\\uEB4D\";\n    // U+EB4E  Data out\n    Glyphs[\"elecDataOut\"] = \"\\uEB4E\";\n    // U+EB13  Disc\n    Glyphs[\"elecDisc\"] = \"\\uEB13\";\n    // U+EB4F  Download\n    Glyphs[\"elecDownload\"] = \"\\uEB4F\";\n    // U+EB2B  Eject\n    Glyphs[\"elecEject\"] = \"\\uEB2B\";\n    // U+EB1F  Fast-forward\n    Glyphs[\"elecFastForward\"] = \"\\uEB1F\";\n    // U+EB11  Headphones\n    Glyphs[\"elecHeadphones\"] = \"\\uEB11\";\n    // U+EB12  Headset\n    Glyphs[\"elecHeadset\"] = \"\\uEB12\";\n    // U+EB47  Line in\n    Glyphs[\"elecLineIn\"] = \"\\uEB47\";\n    // U+EB48  Line out\n    Glyphs[\"elecLineOut\"] = \"\\uEB48\";\n    // U+EB23  Loop\n    Glyphs[\"elecLoop\"] = \"\\uEB23\";\n    // U+EB1A  Loudspeaker\n    Glyphs[\"elecLoudspeaker\"] = \"\\uEB1A\";\n    // U+EB36  MIDI controller 0%\n    Glyphs[\"elecMIDIController0\"] = \"\\uEB36\";\n    // U+EB3B  MIDI controller 100%\n    Glyphs[\"elecMIDIController100\"] = \"\\uEB3B\";\n    // U+EB37  MIDI controller 20%\n    Glyphs[\"elecMIDIController20\"] = \"\\uEB37\";\n    // U+EB38  MIDI controller 40%\n    Glyphs[\"elecMIDIController40\"] = \"\\uEB38\";\n    // U+EB39  MIDI controller 60%\n    Glyphs[\"elecMIDIController60\"] = \"\\uEB39\";\n    // U+EB3A  MIDI controller 80%\n    Glyphs[\"elecMIDIController80\"] = \"\\uEB3A\";\n    // U+EB34  MIDI in\n    Glyphs[\"elecMIDIIn\"] = \"\\uEB34\";\n    // U+EB35  MIDI out\n    Glyphs[\"elecMIDIOut\"] = \"\\uEB35\";\n    // U+EB10  Microphone\n    Glyphs[\"elecMicrophone\"] = \"\\uEB10\";\n    // U+EB28  Mute microphone\n    Glyphs[\"elecMicrophoneMute\"] = \"\\uEB28\";\n    // U+EB29  Unmute microphone\n    Glyphs[\"elecMicrophoneUnmute\"] = \"\\uEB29\";\n    // U+EB15  Mixing console\n    Glyphs[\"elecMixingConsole\"] = \"\\uEB15\";\n    // U+EB18  Monitor\n    Glyphs[\"elecMonitor\"] = \"\\uEB18\";\n    // U+EB26  Mute\n    Glyphs[\"elecMute\"] = \"\\uEB26\";\n    // U+EB1E  Pause\n    Glyphs[\"elecPause\"] = \"\\uEB1E\";\n    // U+EB1C  Play\n    Glyphs[\"elecPlay\"] = \"\\uEB1C\";\n    // U+EB2A  Power on/off\n    Glyphs[\"elecPowerOnOff\"] = \"\\uEB2A\";\n    // U+EB19  Projector\n    Glyphs[\"elecProjector\"] = \"\\uEB19\";\n    // U+EB24  Replay\n    Glyphs[\"elecReplay\"] = \"\\uEB24\";\n    // U+EB20  Rewind\n    Glyphs[\"elecRewind\"] = \"\\uEB20\";\n    // U+EB25  Shuffle\n    Glyphs[\"elecShuffle\"] = \"\\uEB25\";\n    // U+EB22  Skip backwards\n    Glyphs[\"elecSkipBackwards\"] = \"\\uEB22\";\n    // U+EB21  Skip forwards\n    Glyphs[\"elecSkipForwards\"] = \"\\uEB21\";\n    // U+EB1D  Stop\n    Glyphs[\"elecStop\"] = \"\\uEB1D\";\n    // U+EB14  Tape\n    Glyphs[\"elecTape\"] = \"\\uEB14\";\n    // U+EB16  USB connection\n    Glyphs[\"elecUSB\"] = \"\\uEB16\";\n    // U+EB27  Unmute\n    Glyphs[\"elecUnmute\"] = \"\\uEB27\";\n    // U+EB50  Upload\n    Glyphs[\"elecUpload\"] = \"\\uEB50\";\n    // U+EB17  Video camera\n    Glyphs[\"elecVideoCamera\"] = \"\\uEB17\";\n    // U+EB4B  Video in\n    Glyphs[\"elecVideoIn\"] = \"\\uEB4B\";\n    // U+EB4C  Video out\n    Glyphs[\"elecVideoOut\"] = \"\\uEB4C\";\n    // U+EB2C  Combining volume fader\n    Glyphs[\"elecVolumeFader\"] = \"\\uEB2C\";\n    // U+EB2D  Combining volume fader thumb\n    Glyphs[\"elecVolumeFaderThumb\"] = \"\\uEB2D\";\n    // U+EB2E  Volume level 0%\n    Glyphs[\"elecVolumeLevel0\"] = \"\\uEB2E\";\n    // U+EB33  Volume level 100%\n    Glyphs[\"elecVolumeLevel100\"] = \"\\uEB33\";\n    // U+EB2F  Volume level 20%\n    Glyphs[\"elecVolumeLevel20\"] = \"\\uEB2F\";\n    // U+EB30  Volume level 40%\n    Glyphs[\"elecVolumeLevel40\"] = \"\\uEB30\";\n    // U+EB31  Volume level 60%\n    Glyphs[\"elecVolumeLevel60\"] = \"\\uEB31\";\n    // U+EB32  Volume level 80%\n    Glyphs[\"elecVolumeLevel80\"] = \"\\uEB32\";\n    // U+E062  F clef\n    Glyphs[\"fClef\"] = \"\\uE062\";\n    // U+E066  F clef quindicesima alta\n    Glyphs[\"fClef15ma\"] = \"\\uE066\";\n    // U+E063  F clef quindicesima bassa\n    Glyphs[\"fClef15mb\"] = \"\\uE063\";\n    // U+E065  F clef ottava alta\n    Glyphs[\"fClef8va\"] = \"\\uE065\";\n    // U+E064  F clef ottava bassa\n    Glyphs[\"fClef8vb\"] = \"\\uE064\";\n    // U+E068  F clef, arrow down\n    Glyphs[\"fClefArrowDown\"] = \"\\uE068\";\n    // U+E067  F clef, arrow up\n    Glyphs[\"fClefArrowUp\"] = \"\\uE067\";\n    // U+E07C  F clef change\n    Glyphs[\"fClefChange\"] = \"\\uE07C\";\n    // U+E076  Reversed F clef\n    Glyphs[\"fClefReversed\"] = \"\\uE076\";\n    // U+E077  Turned F clef\n    Glyphs[\"fClefTurned\"] = \"\\uE077\";\n    // U+E4C0  Fermata above\n    Glyphs[\"fermataAbove\"] = \"\\uE4C0\";\n    // U+E4C1  Fermata below\n    Glyphs[\"fermataBelow\"] = \"\\uE4C1\";\n    // U+E4C6  Long fermata above\n    Glyphs[\"fermataLongAbove\"] = \"\\uE4C6\";\n    // U+E4C7  Long fermata below\n    Glyphs[\"fermataLongBelow\"] = \"\\uE4C7\";\n    // U+E4CA  Long fermata (Henze) above\n    Glyphs[\"fermataLongHenzeAbove\"] = \"\\uE4CA\";\n    // U+E4CB  Long fermata (Henze) below\n    Glyphs[\"fermataLongHenzeBelow\"] = \"\\uE4CB\";\n    // U+E4C4  Short fermata above\n    Glyphs[\"fermataShortAbove\"] = \"\\uE4C4\";\n    // U+E4C5  Short fermata below\n    Glyphs[\"fermataShortBelow\"] = \"\\uE4C5\";\n    // U+E4CC  Short fermata (Henze) above\n    Glyphs[\"fermataShortHenzeAbove\"] = \"\\uE4CC\";\n    // U+E4CD  Short fermata (Henze) below\n    Glyphs[\"fermataShortHenzeBelow\"] = \"\\uE4CD\";\n    // U+E4C8  Very long fermata above\n    Glyphs[\"fermataVeryLongAbove\"] = \"\\uE4C8\";\n    // U+E4C9  Very long fermata below\n    Glyphs[\"fermataVeryLongBelow\"] = \"\\uE4C9\";\n    // U+E4C2  Very short fermata above\n    Glyphs[\"fermataVeryShortAbove\"] = \"\\uE4C2\";\n    // U+E4C3  Very short fermata below\n    Glyphs[\"fermataVeryShortBelow\"] = \"\\uE4C3\";\n    // U+EA50  Figured bass 0\n    Glyphs[\"figbass0\"] = \"\\uEA50\";\n    // U+EA51  Figured bass 1\n    Glyphs[\"figbass1\"] = \"\\uEA51\";\n    // U+EA52  Figured bass 2\n    Glyphs[\"figbass2\"] = \"\\uEA52\";\n    // U+EA53  Figured bass 2 raised by half-step\n    Glyphs[\"figbass2Raised\"] = \"\\uEA53\";\n    // U+EA54  Figured bass 3\n    Glyphs[\"figbass3\"] = \"\\uEA54\";\n    // U+EA55  Figured bass 4\n    Glyphs[\"figbass4\"] = \"\\uEA55\";\n    // U+EA56  Figured bass 4 raised by half-step\n    Glyphs[\"figbass4Raised\"] = \"\\uEA56\";\n    // U+EA57  Figured bass 5\n    Glyphs[\"figbass5\"] = \"\\uEA57\";\n    // U+EA58  Figured bass 5 raised by half-step\n    Glyphs[\"figbass5Raised1\"] = \"\\uEA58\";\n    // U+EA59  Figured bass 5 raised by half-step 2\n    Glyphs[\"figbass5Raised2\"] = \"\\uEA59\";\n    // U+EA5A  Figured bass diminished 5\n    Glyphs[\"figbass5Raised3\"] = \"\\uEA5A\";\n    // U+EA5B  Figured bass 6\n    Glyphs[\"figbass6\"] = \"\\uEA5B\";\n    // U+EA5C  Figured bass 6 raised by half-step\n    Glyphs[\"figbass6Raised\"] = \"\\uEA5C\";\n    // U+EA6F  Figured bass 6 raised by half-step 2\n    Glyphs[\"figbass6Raised2\"] = \"\\uEA6F\";\n    // U+EA5D  Figured bass 7\n    Glyphs[\"figbass7\"] = \"\\uEA5D\";\n    // U+ECC0  Figured bass 7 diminished\n    Glyphs[\"figbass7Diminished\"] = \"\\uECC0\";\n    // U+EA5E  Figured bass 7 raised by half-step\n    Glyphs[\"figbass7Raised1\"] = \"\\uEA5E\";\n    // U+EA5F  Figured bass 7 lowered by a half-step\n    Glyphs[\"figbass7Raised2\"] = \"\\uEA5F\";\n    // U+EA60  Figured bass 8\n    Glyphs[\"figbass8\"] = \"\\uEA60\";\n    // U+EA61  Figured bass 9\n    Glyphs[\"figbass9\"] = \"\\uEA61\";\n    // U+EA62  Figured bass 9 raised by half-step\n    Glyphs[\"figbass9Raised\"] = \"\\uEA62\";\n    // U+EA68  Figured bass [\n    Glyphs[\"figbassBracketLeft\"] = \"\\uEA68\";\n    // U+EA69  Figured bass ]\n    Glyphs[\"figbassBracketRight\"] = \"\\uEA69\";\n    // U+EA6E  Combining lower\n    Glyphs[\"figbassCombiningLowering\"] = \"\\uEA6E\";\n    // U+EA6D  Combining raise\n    Glyphs[\"figbassCombiningRaising\"] = \"\\uEA6D\";\n    // U+EA63  Figured bass double flat\n    Glyphs[\"figbassDoubleFlat\"] = \"\\uEA63\";\n    // U+EA67  Figured bass double sharp\n    Glyphs[\"figbassDoubleSharp\"] = \"\\uEA67\";\n    // U+EA64  Figured bass flat\n    Glyphs[\"figbassFlat\"] = \"\\uEA64\";\n    // U+EA65  Figured bass natural\n    Glyphs[\"figbassNatural\"] = \"\\uEA65\";\n    // U+EA6A  Figured bass (\n    Glyphs[\"figbassParensLeft\"] = \"\\uEA6A\";\n    // U+EA6B  Figured bass )\n    Glyphs[\"figbassParensRight\"] = \"\\uEA6B\";\n    // U+EA6C  Figured bass +\n    Glyphs[\"figbassPlus\"] = \"\\uEA6C\";\n    // U+EA66  Figured bass sharp\n    Glyphs[\"figbassSharp\"] = \"\\uEA66\";\n    // U+ECC1  Figured bass triple flat\n    Glyphs[\"figbassTripleFlat\"] = \"\\uECC1\";\n    // U+ECC2  Figured bass triple sharp\n    Glyphs[\"figbassTripleSharp\"] = \"\\uECC2\";\n    // U+ED10  Fingering 0 (open string)\n    Glyphs[\"fingering0\"] = \"\\uED10\";\n    // U+ED80  Fingering 0 italic (open string)\n    Glyphs[\"fingering0Italic\"] = \"\\uED80\";\n    // U+ED11  Fingering 1 (thumb)\n    Glyphs[\"fingering1\"] = \"\\uED11\";\n    // U+ED81  Fingering 1 italic (thumb)\n    Glyphs[\"fingering1Italic\"] = \"\\uED81\";\n    // U+ED12  Fingering 2 (index finger)\n    Glyphs[\"fingering2\"] = \"\\uED12\";\n    // U+ED82  Fingering 2 italic (index finger)\n    Glyphs[\"fingering2Italic\"] = \"\\uED82\";\n    // U+ED13  Fingering 3 (middle finger)\n    Glyphs[\"fingering3\"] = \"\\uED13\";\n    // U+ED83  Fingering 3 italic (middle finger)\n    Glyphs[\"fingering3Italic\"] = \"\\uED83\";\n    // U+ED14  Fingering 4 (ring finger)\n    Glyphs[\"fingering4\"] = \"\\uED14\";\n    // U+ED84  Fingering 4 italic (ring finger)\n    Glyphs[\"fingering4Italic\"] = \"\\uED84\";\n    // U+ED15  Fingering 5 (little finger)\n    Glyphs[\"fingering5\"] = \"\\uED15\";\n    // U+ED85  Fingering 5 italic (little finger)\n    Glyphs[\"fingering5Italic\"] = \"\\uED85\";\n    // U+ED24  Fingering 6\n    Glyphs[\"fingering6\"] = \"\\uED24\";\n    // U+ED86  Fingering 6 italic\n    Glyphs[\"fingering6Italic\"] = \"\\uED86\";\n    // U+ED25  Fingering 7\n    Glyphs[\"fingering7\"] = \"\\uED25\";\n    // U+ED87  Fingering 7 italic\n    Glyphs[\"fingering7Italic\"] = \"\\uED87\";\n    // U+ED26  Fingering 8\n    Glyphs[\"fingering8\"] = \"\\uED26\";\n    // U+ED88  Fingering 8 italic\n    Glyphs[\"fingering8Italic\"] = \"\\uED88\";\n    // U+ED27  Fingering 9\n    Glyphs[\"fingering9\"] = \"\\uED27\";\n    // U+ED89  Fingering 9 italic\n    Glyphs[\"fingering9Italic\"] = \"\\uED89\";\n    // U+ED1B  Fingering a (anular; right-hand ring finger for guitar)\n    Glyphs[\"fingeringALower\"] = \"\\uED1B\";\n    // U+ED1C  Fingering c (right-hand little finger for guitar)\n    Glyphs[\"fingeringCLower\"] = \"\\uED1C\";\n    // U+ED1E  Fingering e (right-hand little finger for guitar)\n    Glyphs[\"fingeringELower\"] = \"\\uED1E\";\n    // U+ED19  Fingering i (indicio; right-hand index finger for guitar)\n    Glyphs[\"fingeringILower\"] = \"\\uED19\";\n    // U+ED2A  Fingering left bracket\n    Glyphs[\"fingeringLeftBracket\"] = \"\\uED2A\";\n    // U+ED8C  Fingering left bracket italic\n    Glyphs[\"fingeringLeftBracketItalic\"] = \"\\uED8C\";\n    // U+ED28  Fingering left parenthesis\n    Glyphs[\"fingeringLeftParenthesis\"] = \"\\uED28\";\n    // U+ED8A  Fingering left parenthesis italic\n    Glyphs[\"fingeringLeftParenthesisItalic\"] = \"\\uED8A\";\n    // U+ED1A  Fingering m (medio; right-hand middle finger for guitar)\n    Glyphs[\"fingeringMLower\"] = \"\\uED1A\";\n    // U+ED23  Multiple notes played by thumb or single finger\n    Glyphs[\"fingeringMultipleNotes\"] = \"\\uED23\";\n    // U+ED1F  Fingering o (right-hand little finger for guitar)\n    Glyphs[\"fingeringOLower\"] = \"\\uED1F\";\n    // U+ED17  Fingering p (pulgar; right-hand thumb for guitar)\n    Glyphs[\"fingeringPLower\"] = \"\\uED17\";\n    // U+ED8E  Fingering q (right-hand little finger for guitar)\n    Glyphs[\"fingeringQLower\"] = \"\\uED8E\";\n    // U+ED2B  Fingering right bracket\n    Glyphs[\"fingeringRightBracket\"] = \"\\uED2B\";\n    // U+ED8D  Fingering right bracket italic\n    Glyphs[\"fingeringRightBracketItalic\"] = \"\\uED8D\";\n    // U+ED29  Fingering right parenthesis\n    Glyphs[\"fingeringRightParenthesis\"] = \"\\uED29\";\n    // U+ED8B  Fingering right parenthesis italic\n    Glyphs[\"fingeringRightParenthesisItalic\"] = \"\\uED8B\";\n    // U+ED8F  Fingering s (right-hand little finger for guitar)\n    Glyphs[\"fingeringSLower\"] = \"\\uED8F\";\n    // U+ED2C  Fingering middle dot separator\n    Glyphs[\"fingeringSeparatorMiddleDot\"] = \"\\uED2C\";\n    // U+ED2D  Fingering white middle dot separator\n    Glyphs[\"fingeringSeparatorMiddleDotWhite\"] = \"\\uED2D\";\n    // U+ED2E  Fingering forward slash separator\n    Glyphs[\"fingeringSeparatorSlash\"] = \"\\uED2E\";\n    // U+ED20  Finger substitution above\n    Glyphs[\"fingeringSubstitutionAbove\"] = \"\\uED20\";\n    // U+ED21  Finger substitution below\n    Glyphs[\"fingeringSubstitutionBelow\"] = \"\\uED21\";\n    // U+ED22  Finger substitution dash\n    Glyphs[\"fingeringSubstitutionDash\"] = \"\\uED22\";\n    // U+ED18  Fingering t (right-hand thumb for guitar)\n    Glyphs[\"fingeringTLower\"] = \"\\uED18\";\n    // U+ED16  Fingering T (left-hand thumb for guitar)\n    Glyphs[\"fingeringTUpper\"] = \"\\uED16\";\n    // U+ED1D  Fingering x (right-hand little finger for guitar)\n    Glyphs[\"fingeringXLower\"] = \"\\uED1D\";\n    // U+E24F  Combining flag 8 (1024th) below\n    Glyphs[\"flag1024thDown\"] = \"\\uE24F\";\n    // U+E24E  Combining flag 8 (1024th) above\n    Glyphs[\"flag1024thUp\"] = \"\\uE24E\";\n    // U+E249  Combining flag 5 (128th) below\n    Glyphs[\"flag128thDown\"] = \"\\uE249\";\n    // U+E248  Combining flag 5 (128th) above\n    Glyphs[\"flag128thUp\"] = \"\\uE248\";\n    // U+E243  Combining flag 2 (16th) below\n    Glyphs[\"flag16thDown\"] = \"\\uE243\";\n    // U+E242  Combining flag 2 (16th) above\n    Glyphs[\"flag16thUp\"] = \"\\uE242\";\n    // U+E24B  Combining flag 6 (256th) below\n    Glyphs[\"flag256thDown\"] = \"\\uE24B\";\n    // U+E24A  Combining flag 6 (256th) above\n    Glyphs[\"flag256thUp\"] = \"\\uE24A\";\n    // U+E245  Combining flag 3 (32nd) below\n    Glyphs[\"flag32ndDown\"] = \"\\uE245\";\n    // U+E244  Combining flag 3 (32nd) above\n    Glyphs[\"flag32ndUp\"] = \"\\uE244\";\n    // U+E24D  Combining flag 7 (512th) below\n    Glyphs[\"flag512thDown\"] = \"\\uE24D\";\n    // U+E24C  Combining flag 7 (512th) above\n    Glyphs[\"flag512thUp\"] = \"\\uE24C\";\n    // U+E247  Combining flag 4 (64th) below\n    Glyphs[\"flag64thDown\"] = \"\\uE247\";\n    // U+E246  Combining flag 4 (64th) above\n    Glyphs[\"flag64thUp\"] = \"\\uE246\";\n    // U+E241  Combining flag 1 (8th) below\n    Glyphs[\"flag8thDown\"] = \"\\uE241\";\n    // U+E240  Combining flag 1 (8th) above\n    Glyphs[\"flag8thUp\"] = \"\\uE240\";\n    // U+E251  Internal combining flag below\n    Glyphs[\"flagInternalDown\"] = \"\\uE251\";\n    // U+E250  Internal combining flag above\n    Glyphs[\"flagInternalUp\"] = \"\\uE250\";\n    // U+E850  3-string fretboard\n    Glyphs[\"fretboard3String\"] = \"\\uE850\";\n    // U+E851  3-string fretboard at nut\n    Glyphs[\"fretboard3StringNut\"] = \"\\uE851\";\n    // U+E852  4-string fretboard\n    Glyphs[\"fretboard4String\"] = \"\\uE852\";\n    // U+E853  4-string fretboard at nut\n    Glyphs[\"fretboard4StringNut\"] = \"\\uE853\";\n    // U+E854  5-string fretboard\n    Glyphs[\"fretboard5String\"] = \"\\uE854\";\n    // U+E855  5-string fretboard at nut\n    Glyphs[\"fretboard5StringNut\"] = \"\\uE855\";\n    // U+E856  6-string fretboard\n    Glyphs[\"fretboard6String\"] = \"\\uE856\";\n    // U+E857  6-string fretboard at nut\n    Glyphs[\"fretboard6StringNut\"] = \"\\uE857\";\n    // U+E858  Fingered fret (filled circle)\n    Glyphs[\"fretboardFilledCircle\"] = \"\\uE858\";\n    // U+E85A  Open string (O)\n    Glyphs[\"fretboardO\"] = \"\\uE85A\";\n    // U+E859  String not played (X)\n    Glyphs[\"fretboardX\"] = \"\\uE859\";\n    // U+EA93  Function theory angle bracket left\n    Glyphs[\"functionAngleLeft\"] = \"\\uEA93\";\n    // U+EA94  Function theory angle bracket right\n    Glyphs[\"functionAngleRight\"] = \"\\uEA94\";\n    // U+EA8F  Function theory bracket left\n    Glyphs[\"functionBracketLeft\"] = \"\\uEA8F\";\n    // U+EA90  Function theory bracket right\n    Glyphs[\"functionBracketRight\"] = \"\\uEA90\";\n    // U+EA81  Function theory dominant of dominant\n    Glyphs[\"functionDD\"] = \"\\uEA81\";\n    // U+EA80  Function theory minor dominant\n    Glyphs[\"functionDLower\"] = \"\\uEA80\";\n    // U+EA7F  Function theory major dominant\n    Glyphs[\"functionDUpper\"] = \"\\uEA7F\";\n    // U+EA78  Function theory 8\n    Glyphs[\"functionEight\"] = \"\\uEA78\";\n    // U+EA99  Function theory F\n    Glyphs[\"functionFUpper\"] = \"\\uEA99\";\n    // U+EA75  Function theory 5\n    Glyphs[\"functionFive\"] = \"\\uEA75\";\n    // U+EA74  Function theory 4\n    Glyphs[\"functionFour\"] = \"\\uEA74\";\n    // U+EA84  Function theory g\n    Glyphs[\"functionGLower\"] = \"\\uEA84\";\n    // U+EA83  Function theory G\n    Glyphs[\"functionGUpper\"] = \"\\uEA83\";\n    // U+EA7C  Function theory greater than\n    Glyphs[\"functionGreaterThan\"] = \"\\uEA7C\";\n    // U+EA9B  Function theory i\n    Glyphs[\"functionILower\"] = \"\\uEA9B\";\n    // U+EA9A  Function theory I\n    Glyphs[\"functionIUpper\"] = \"\\uEA9A\";\n    // U+EA9D  Function theory k\n    Glyphs[\"functionKLower\"] = \"\\uEA9D\";\n    // U+EA9C  Function theory K\n    Glyphs[\"functionKUpper\"] = \"\\uEA9C\";\n    // U+EA9F  Function theory l\n    Glyphs[\"functionLLower\"] = \"\\uEA9F\";\n    // U+EA9E  Function theory L\n    Glyphs[\"functionLUpper\"] = \"\\uEA9E\";\n    // U+EA7A  Function theory less than\n    Glyphs[\"functionLessThan\"] = \"\\uEA7A\";\n    // U+ED01  Function theory m\n    Glyphs[\"functionMLower\"] = \"\\uED01\";\n    // U+ED00  Function theory M\n    Glyphs[\"functionMUpper\"] = \"\\uED00\";\n    // U+EA7B  Function theory minus\n    Glyphs[\"functionMinus\"] = \"\\uEA7B\";\n    // U+EA86  Function theory n\n    Glyphs[\"functionNLower\"] = \"\\uEA86\";\n    // U+EA85  Function theory N\n    Glyphs[\"functionNUpper\"] = \"\\uEA85\";\n    // U+ED02  Function theory superscript N\n    Glyphs[\"functionNUpperSuperscript\"] = \"\\uED02\";\n    // U+EA79  Function theory 9\n    Glyphs[\"functionNine\"] = \"\\uEA79\";\n    // U+EA71  Function theory 1\n    Glyphs[\"functionOne\"] = \"\\uEA71\";\n    // U+EA88  Function theory p\n    Glyphs[\"functionPLower\"] = \"\\uEA88\";\n    // U+EA87  Function theory P\n    Glyphs[\"functionPUpper\"] = \"\\uEA87\";\n    // U+EA91  Function theory parenthesis left\n    Glyphs[\"functionParensLeft\"] = \"\\uEA91\";\n    // U+EA92  Function theory parenthesis right\n    Glyphs[\"functionParensRight\"] = \"\\uEA92\";\n    // U+EA98  Function theory prefix plus\n    Glyphs[\"functionPlus\"] = \"\\uEA98\";\n    // U+ED03  Function theory r\n    Glyphs[\"functionRLower\"] = \"\\uED03\";\n    // U+EA95  Function theory repetition 1\n    Glyphs[\"functionRepetition1\"] = \"\\uEA95\";\n    // U+EA96  Function theory repetition 2\n    Glyphs[\"functionRepetition2\"] = \"\\uEA96\";\n    // U+EA97  Function theory prefix ring\n    Glyphs[\"functionRing\"] = \"\\uEA97\";\n    // U+EA8A  Function theory minor subdominant\n    Glyphs[\"functionSLower\"] = \"\\uEA8A\";\n    // U+EA7E  Function theory minor subdominant of subdominant\n    Glyphs[\"functionSSLower\"] = \"\\uEA7E\";\n    // U+EA7D  Function theory major subdominant of subdominant\n    Glyphs[\"functionSSUpper\"] = \"\\uEA7D\";\n    // U+EA89  Function theory major subdominant\n    Glyphs[\"functionSUpper\"] = \"\\uEA89\";\n    // U+EA77  Function theory 7\n    Glyphs[\"functionSeven\"] = \"\\uEA77\";\n    // U+EA76  Function theory 6\n    Glyphs[\"functionSix\"] = \"\\uEA76\";\n    // U+EA82  Function theory double dominant seventh\n    Glyphs[\"functionSlashedDD\"] = \"\\uEA82\";\n    // U+EA8C  Function theory minor tonic\n    Glyphs[\"functionTLower\"] = \"\\uEA8C\";\n    // U+EA8B  Function theory tonic\n    Glyphs[\"functionTUpper\"] = \"\\uEA8B\";\n    // U+EA73  Function theory 3\n    Glyphs[\"functionThree\"] = \"\\uEA73\";\n    // U+EA72  Function theory 2\n    Glyphs[\"functionTwo\"] = \"\\uEA72\";\n    // U+EA8E  Function theory v\n    Glyphs[\"functionVLower\"] = \"\\uEA8E\";\n    // U+EA8D  Function theory V\n    Glyphs[\"functionVUpper\"] = \"\\uEA8D\";\n    // U+EA70  Function theory 0\n    Glyphs[\"functionZero\"] = \"\\uEA70\";\n    // U+E050  G clef\n    Glyphs[\"gClef\"] = \"\\uE050\";\n    // U+E054  G clef quindicesima alta\n    Glyphs[\"gClef15ma\"] = \"\\uE054\";\n    // U+E051  G clef quindicesima bassa\n    Glyphs[\"gClef15mb\"] = \"\\uE051\";\n    // U+E053  G clef ottava alta\n    Glyphs[\"gClef8va\"] = \"\\uE053\";\n    // U+E052  G clef ottava bassa\n    Glyphs[\"gClef8vb\"] = \"\\uE052\";\n    // U+E056  G clef ottava bassa with C clef\n    Glyphs[\"gClef8vbCClef\"] = \"\\uE056\";\n    // U+E055  G clef ottava bassa (old style)\n    Glyphs[\"gClef8vbOld\"] = \"\\uE055\";\n    // U+E057  G clef, optionally ottava bassa\n    Glyphs[\"gClef8vbParens\"] = \"\\uE057\";\n    // U+E05B  G clef, arrow down\n    Glyphs[\"gClefArrowDown\"] = \"\\uE05B\";\n    // U+E05A  G clef, arrow up\n    Glyphs[\"gClefArrowUp\"] = \"\\uE05A\";\n    // U+E07A  G clef change\n    Glyphs[\"gClefChange\"] = \"\\uE07A\";\n    // U+E059  Combining G clef, number above\n    Glyphs[\"gClefLigatedNumberAbove\"] = \"\\uE059\";\n    // U+E058  Combining G clef, number below\n    Glyphs[\"gClefLigatedNumberBelow\"] = \"\\uE058\";\n    // U+E073  Reversed G clef\n    Glyphs[\"gClefReversed\"] = \"\\uE073\";\n    // U+E074  Turned G clef\n    Glyphs[\"gClefTurned\"] = \"\\uE074\";\n    // U+E586  Glissando down\n    Glyphs[\"glissandoDown\"] = \"\\uE586\";\n    // U+E585  Glissando up\n    Glyphs[\"glissandoUp\"] = \"\\uE585\";\n    // U+E561  Slashed grace note stem down\n    Glyphs[\"graceNoteAcciaccaturaStemDown\"] = \"\\uE561\";\n    // U+E560  Slashed grace note stem up\n    Glyphs[\"graceNoteAcciaccaturaStemUp\"] = \"\\uE560\";\n    // U+E563  Grace note stem down\n    Glyphs[\"graceNoteAppoggiaturaStemDown\"] = \"\\uE563\";\n    // U+E562  Grace note stem up\n    Glyphs[\"graceNoteAppoggiaturaStemUp\"] = \"\\uE562\";\n    // U+E565  Slash for stem down grace note\n    Glyphs[\"graceNoteSlashStemDown\"] = \"\\uE565\";\n    // U+E564  Slash for stem up grace note\n    Glyphs[\"graceNoteSlashStemUp\"] = \"\\uE564\";\n    // U+E848  Full barré\n    Glyphs[\"guitarBarreFull\"] = \"\\uE848\";\n    // U+E849  Half barré\n    Glyphs[\"guitarBarreHalf\"] = \"\\uE849\";\n    // U+E83F  Closed wah/volume pedal\n    Glyphs[\"guitarClosePedal\"] = \"\\uE83F\";\n    // U+E843  Fade in\n    Glyphs[\"guitarFadeIn\"] = \"\\uE843\";\n    // U+E844  Fade out\n    Glyphs[\"guitarFadeOut\"] = \"\\uE844\";\n    // U+E842  Golpe (tapping the pick guard)\n    Glyphs[\"guitarGolpe\"] = \"\\uE842\";\n    // U+E83E  Half-open wah/volume pedal\n    Glyphs[\"guitarHalfOpenPedal\"] = \"\\uE83E\";\n    // U+E840  Left-hand tapping\n    Glyphs[\"guitarLeftHandTapping\"] = \"\\uE840\";\n    // U+E83D  Open wah/volume pedal\n    Glyphs[\"guitarOpenPedal\"] = \"\\uE83D\";\n    // U+E841  Right-hand tapping\n    Glyphs[\"guitarRightHandTapping\"] = \"\\uE841\";\n    // U+E832  Guitar shake\n    Glyphs[\"guitarShake\"] = \"\\uE832\";\n    // U+E833  String number 0\n    Glyphs[\"guitarString0\"] = \"\\uE833\";\n    // U+E834  String number 1\n    Glyphs[\"guitarString1\"] = \"\\uE834\";\n    // U+E84A  String number 10\n    Glyphs[\"guitarString10\"] = \"\\uE84A\";\n    // U+E84B  String number 11\n    Glyphs[\"guitarString11\"] = \"\\uE84B\";\n    // U+E84C  String number 12\n    Glyphs[\"guitarString12\"] = \"\\uE84C\";\n    // U+E84D  String number 13\n    Glyphs[\"guitarString13\"] = \"\\uE84D\";\n    // U+E835  String number 2\n    Glyphs[\"guitarString2\"] = \"\\uE835\";\n    // U+E836  String number 3\n    Glyphs[\"guitarString3\"] = \"\\uE836\";\n    // U+E837  String number 4\n    Glyphs[\"guitarString4\"] = \"\\uE837\";\n    // U+E838  String number 5\n    Glyphs[\"guitarString5\"] = \"\\uE838\";\n    // U+E839  String number 6\n    Glyphs[\"guitarString6\"] = \"\\uE839\";\n    // U+E83A  String number 7\n    Glyphs[\"guitarString7\"] = \"\\uE83A\";\n    // U+E83B  String number 8\n    Glyphs[\"guitarString8\"] = \"\\uE83B\";\n    // U+E83C  String number 9\n    Glyphs[\"guitarString9\"] = \"\\uE83C\";\n    // U+E847  Strum direction down\n    Glyphs[\"guitarStrumDown\"] = \"\\uE847\";\n    // U+E846  Strum direction up\n    Glyphs[\"guitarStrumUp\"] = \"\\uE846\";\n    // U+E831  Guitar vibrato bar dip\n    Glyphs[\"guitarVibratoBarDip\"] = \"\\uE831\";\n    // U+E830  Guitar vibrato bar scoop\n    Glyphs[\"guitarVibratoBarScoop\"] = \"\\uE830\";\n    // U+EAB2  Vibrato wiggle segment\n    Glyphs[\"guitarVibratoStroke\"] = \"\\uEAB2\";\n    // U+E845  Volume swell\n    Glyphs[\"guitarVolumeSwell\"] = \"\\uE845\";\n    // U+EAB3  Wide vibrato wiggle segment\n    Glyphs[\"guitarWideVibratoStroke\"] = \"\\uEAB3\";\n    // U+E81F  Belltree\n    Glyphs[\"handbellsBelltree\"] = \"\\uE81F\";\n    // U+E81E  Damp 3\n    Glyphs[\"handbellsDamp3\"] = \"\\uE81E\";\n    // U+E81B  Echo\n    Glyphs[\"handbellsEcho1\"] = \"\\uE81B\";\n    // U+E81C  Echo 2\n    Glyphs[\"handbellsEcho2\"] = \"\\uE81C\";\n    // U+E81D  Gyro\n    Glyphs[\"handbellsGyro\"] = \"\\uE81D\";\n    // U+E812  Hand martellato\n    Glyphs[\"handbellsHandMartellato\"] = \"\\uE812\";\n    // U+E815  Mallet, bell on table\n    Glyphs[\"handbellsMalletBellOnTable\"] = \"\\uE815\";\n    // U+E814  Mallet, bell suspended\n    Glyphs[\"handbellsMalletBellSuspended\"] = \"\\uE814\";\n    // U+E816  Mallet lift\n    Glyphs[\"handbellsMalletLft\"] = \"\\uE816\";\n    // U+E810  Martellato\n    Glyphs[\"handbellsMartellato\"] = \"\\uE810\";\n    // U+E811  Martellato lift\n    Glyphs[\"handbellsMartellatoLift\"] = \"\\uE811\";\n    // U+E813  Muted martellato\n    Glyphs[\"handbellsMutedMartellato\"] = \"\\uE813\";\n    // U+E817  Pluck lift\n    Glyphs[\"handbellsPluckLift\"] = \"\\uE817\";\n    // U+E81A  Swing\n    Glyphs[\"handbellsSwing\"] = \"\\uE81A\";\n    // U+E819  Swing down\n    Glyphs[\"handbellsSwingDown\"] = \"\\uE819\";\n    // U+E818  Swing up\n    Glyphs[\"handbellsSwingUp\"] = \"\\uE818\";\n    // U+E821  Table pair of handbells\n    Glyphs[\"handbellsTablePairBells\"] = \"\\uE821\";\n    // U+E820  Table single handbell\n    Glyphs[\"handbellsTableSingleBell\"] = \"\\uE820\";\n    // U+E68F  Metal rod pictogram\n    Glyphs[\"harpMetalRod\"] = \"\\uE68F\";\n    // U+E681  Harp pedal centered (natural)\n    Glyphs[\"harpPedalCentered\"] = \"\\uE681\";\n    // U+E683  Harp pedal divider\n    Glyphs[\"harpPedalDivider\"] = \"\\uE683\";\n    // U+E682  Harp pedal lowered (sharp)\n    Glyphs[\"harpPedalLowered\"] = \"\\uE682\";\n    // U+E680  Harp pedal raised (flat)\n    Glyphs[\"harpPedalRaised\"] = \"\\uE680\";\n    // U+E695  Ascending aeolian chords (Salzedo)\n    Glyphs[\"harpSalzedoAeolianAscending\"] = \"\\uE695\";\n    // U+E696  Descending aeolian chords (Salzedo)\n    Glyphs[\"harpSalzedoAeolianDescending\"] = \"\\uE696\";\n    // U+E69A  Damp above (Salzedo)\n    Glyphs[\"harpSalzedoDampAbove\"] = \"\\uE69A\";\n    // U+E699  Damp below (Salzedo)\n    Glyphs[\"harpSalzedoDampBelow\"] = \"\\uE699\";\n    // U+E698  Damp with both hands (Salzedo)\n    Glyphs[\"harpSalzedoDampBothHands\"] = \"\\uE698\";\n    // U+E697  Damp only low strings (Salzedo)\n    Glyphs[\"harpSalzedoDampLowStrings\"] = \"\\uE697\";\n    // U+E68D  Fluidic sounds, left hand (Salzedo)\n    Glyphs[\"harpSalzedoFluidicSoundsLeft\"] = \"\\uE68D\";\n    // U+E68E  Fluidic sounds, right hand (Salzedo)\n    Glyphs[\"harpSalzedoFluidicSoundsRight\"] = \"\\uE68E\";\n    // U+E69C  Isolated sounds (Salzedo)\n    Glyphs[\"harpSalzedoIsolatedSounds\"] = \"\\uE69C\";\n    // U+E688  Metallic sounds (Salzedo)\n    Glyphs[\"harpSalzedoMetallicSounds\"] = \"\\uE688\";\n    // U+E69B  Metallic sounds, one string (Salzedo)\n    Glyphs[\"harpSalzedoMetallicSoundsOneString\"] = \"\\uE69B\";\n    // U+E68C  Muffle totally (Salzedo)\n    Glyphs[\"harpSalzedoMuffleTotally\"] = \"\\uE68C\";\n    // U+E685  Oboic flux (Salzedo)\n    Glyphs[\"harpSalzedoOboicFlux\"] = \"\\uE685\";\n    // U+E68A  Play at upper end of strings (Salzedo)\n    Glyphs[\"harpSalzedoPlayUpperEnd\"] = \"\\uE68A\";\n    // U+E684  Slide with suppleness (Salzedo)\n    Glyphs[\"harpSalzedoSlideWithSuppleness\"] = \"\\uE684\";\n    // U+E69D  Snare drum effect (Salzedo)\n    Glyphs[\"harpSalzedoSnareDrum\"] = \"\\uE69D\";\n    // U+E689  Tam-tam sounds (Salzedo)\n    Glyphs[\"harpSalzedoTamTamSounds\"] = \"\\uE689\";\n    // U+E686  Thunder effect (Salzedo)\n    Glyphs[\"harpSalzedoThunderEffect\"] = \"\\uE686\";\n    // U+E68B  Timpanic sounds (Salzedo)\n    Glyphs[\"harpSalzedoTimpanicSounds\"] = \"\\uE68B\";\n    // U+E687  Whistling sounds (Salzedo)\n    Glyphs[\"harpSalzedoWhistlingSounds\"] = \"\\uE687\";\n    // U+E694  Combining string noise for stem\n    Glyphs[\"harpStringNoiseStem\"] = \"\\uE694\";\n    // U+E690  Tuning key pictogram\n    Glyphs[\"harpTuningKey\"] = \"\\uE690\";\n    // U+E693  Retune strings for glissando\n    Glyphs[\"harpTuningKeyGlissando\"] = \"\\uE693\";\n    // U+E691  Use handle of tuning key pictogram\n    Glyphs[\"harpTuningKeyHandle\"] = \"\\uE691\";\n    // U+E692  Use shank of tuning key pictogram\n    Glyphs[\"harpTuningKeyShank\"] = \"\\uE692\";\n    // U+ED70  Indian drum clef\n    Glyphs[\"indianDrumClef\"] = \"\\uED70\";\n    // U+EDE2  Back-chug\n    Glyphs[\"kahnBackChug\"] = \"\\uEDE2\";\n    // U+EDD8  Back-flap\n    Glyphs[\"kahnBackFlap\"] = \"\\uEDD8\";\n    // U+EDE1  Back-riff\n    Glyphs[\"kahnBackRiff\"] = \"\\uEDE1\";\n    // U+EDDA  Back-rip\n    Glyphs[\"kahnBackRip\"] = \"\\uEDDA\";\n    // U+EDC6  Ball-change\n    Glyphs[\"kahnBallChange\"] = \"\\uEDC6\";\n    // U+EDCD  Ball-dig\n    Glyphs[\"kahnBallDig\"] = \"\\uEDCD\";\n    // U+EDA7  Brush-backward\n    Glyphs[\"kahnBrushBackward\"] = \"\\uEDA7\";\n    // U+EDA6  Brush-forward\n    Glyphs[\"kahnBrushForward\"] = \"\\uEDA6\";\n    // U+EDDD  Chug\n    Glyphs[\"kahnChug\"] = \"\\uEDDD\";\n    // U+EDB8  Clap\n    Glyphs[\"kahnClap\"] = \"\\uEDB8\";\n    // U+EDBA  Double-snap\n    Glyphs[\"kahnDoubleSnap\"] = \"\\uEDBA\";\n    // U+EDEB  Double-wing\n    Glyphs[\"kahnDoubleWing\"] = \"\\uEDEB\";\n    // U+EDB2  Draw-step\n    Glyphs[\"kahnDrawStep\"] = \"\\uEDB2\";\n    // U+EDB3  Draw-tap\n    Glyphs[\"kahnDrawTap\"] = \"\\uEDB3\";\n    // U+EDCF  Flam\n    Glyphs[\"kahnFlam\"] = \"\\uEDCF\";\n    // U+EDD5  Flap\n    Glyphs[\"kahnFlap\"] = \"\\uEDD5\";\n    // U+EDD7  Flap-step\n    Glyphs[\"kahnFlapStep\"] = \"\\uEDD7\";\n    // U+EDA9  Flat\n    Glyphs[\"kahnFlat\"] = \"\\uEDA9\";\n    // U+EDB0  Flea-hop\n    Glyphs[\"kahnFleaHop\"] = \"\\uEDB0\";\n    // U+EDB1  Flea-tap\n    Glyphs[\"kahnFleaTap\"] = \"\\uEDB1\";\n    // U+EDA8  Grace-tap\n    Glyphs[\"kahnGraceTap\"] = \"\\uEDA8\";\n    // U+EDD1  Grace-tap-change\n    Glyphs[\"kahnGraceTapChange\"] = \"\\uEDD1\";\n    // U+EDD0  Grace-tap-hop\n    Glyphs[\"kahnGraceTapHop\"] = \"\\uEDD0\";\n    // U+EDD3  Grace-tap-stamp\n    Glyphs[\"kahnGraceTapStamp\"] = \"\\uEDD3\";\n    // U+EDAA  Heel\n    Glyphs[\"kahnHeel\"] = \"\\uEDAA\";\n    // U+EDC9  Heel-change\n    Glyphs[\"kahnHeelChange\"] = \"\\uEDC9\";\n    // U+EDBB  Heel-click\n    Glyphs[\"kahnHeelClick\"] = \"\\uEDBB\";\n    // U+EDB6  Heel-drop\n    Glyphs[\"kahnHeelDrop\"] = \"\\uEDB6\";\n    // U+EDC4  Heel-step\n    Glyphs[\"kahnHeelStep\"] = \"\\uEDC4\";\n    // U+EDCB  Heel-tap\n    Glyphs[\"kahnHeelTap\"] = \"\\uEDCB\";\n    // U+EDA2  Hop\n    Glyphs[\"kahnHop\"] = \"\\uEDA2\";\n    // U+EDA5  Jump-apart\n    Glyphs[\"kahnJumpApart\"] = \"\\uEDA5\";\n    // U+EDA4  Jump-together\n    Glyphs[\"kahnJumpTogether\"] = \"\\uEDA4\";\n    // U+EDAD  Knee-inward\n    Glyphs[\"kahnKneeInward\"] = \"\\uEDAD\";\n    // U+EDAC  Knee-outward\n    Glyphs[\"kahnKneeOutward\"] = \"\\uEDAC\";\n    // U+EDA3  Leap\n    Glyphs[\"kahnLeap\"] = \"\\uEDA3\";\n    // U+EDD2  Leap-flat-foot\n    Glyphs[\"kahnLeapFlatFoot\"] = \"\\uEDD2\";\n    // U+EDD4  Leap-heel-click\n    Glyphs[\"kahnLeapHeelClick\"] = \"\\uEDD4\";\n    // U+EDBF  Left-catch\n    Glyphs[\"kahnLeftCatch\"] = \"\\uEDBF\";\n    // U+EDBD  Left-cross\n    Glyphs[\"kahnLeftCross\"] = \"\\uEDBD\";\n    // U+EDEE  Left-foot\n    Glyphs[\"kahnLeftFoot\"] = \"\\uEDEE\";\n    // U+EDC1  Left-toe-strike\n    Glyphs[\"kahnLeftToeStrike\"] = \"\\uEDC1\";\n    // U+EDF0  Left-turn\n    Glyphs[\"kahnLeftTurn\"] = \"\\uEDF0\";\n    // U+EDEC  Over-the-top\n    Glyphs[\"kahnOverTheTop\"] = \"\\uEDEC\";\n    // U+EDED  Over-the-top-tap\n    Glyphs[\"kahnOverTheTopTap\"] = \"\\uEDED\";\n    // U+EDE3  Pull\n    Glyphs[\"kahnPull\"] = \"\\uEDE3\";\n    // U+EDDE  Push\n    Glyphs[\"kahnPush\"] = \"\\uEDDE\";\n    // U+EDE0  Riff\n    Glyphs[\"kahnRiff\"] = \"\\uEDE0\";\n    // U+EDE7  Riffle\n    Glyphs[\"kahnRiffle\"] = \"\\uEDE7\";\n    // U+EDC0  Right-catch\n    Glyphs[\"kahnRightCatch\"] = \"\\uEDC0\";\n    // U+EDBE  Right-cross\n    Glyphs[\"kahnRightCross\"] = \"\\uEDBE\";\n    // U+EDEF  Right-foot\n    Glyphs[\"kahnRightFoot\"] = \"\\uEDEF\";\n    // U+EDC2  Right-toe-strike\n    Glyphs[\"kahnRightToeStrike\"] = \"\\uEDC2\";\n    // U+EDF1  Right-turn\n    Glyphs[\"kahnRightTurn\"] = \"\\uEDF1\";\n    // U+EDD6  Rip\n    Glyphs[\"kahnRip\"] = \"\\uEDD6\";\n    // U+EDE8  Ripple\n    Glyphs[\"kahnRipple\"] = \"\\uEDE8\";\n    // U+EDAE  Scrape\n    Glyphs[\"kahnScrape\"] = \"\\uEDAE\";\n    // U+EDDC  Scuff\n    Glyphs[\"kahnScuff\"] = \"\\uEDDC\";\n    // U+EDE6  Scuffle\n    Glyphs[\"kahnScuffle\"] = \"\\uEDE6\";\n    // U+EDE5  Shuffle\n    Glyphs[\"kahnShuffle\"] = \"\\uEDE5\";\n    // U+EDCE  Slam\n    Glyphs[\"kahnSlam\"] = \"\\uEDCE\";\n    // U+EDD9  Slap\n    Glyphs[\"kahnSlap\"] = \"\\uEDD9\";\n    // U+EDB4  Slide-step\n    Glyphs[\"kahnSlideStep\"] = \"\\uEDB4\";\n    // U+EDB5  Slide-tap\n    Glyphs[\"kahnSlideTap\"] = \"\\uEDB5\";\n    // U+EDB9  Snap\n    Glyphs[\"kahnSnap\"] = \"\\uEDB9\";\n    // U+EDC3  Stamp\n    Glyphs[\"kahnStamp\"] = \"\\uEDC3\";\n    // U+EDC8  Stamp-stamp\n    Glyphs[\"kahnStampStamp\"] = \"\\uEDC8\";\n    // U+EDA0  Step\n    Glyphs[\"kahnStep\"] = \"\\uEDA0\";\n    // U+EDC7  Step-stamp\n    Glyphs[\"kahnStepStamp\"] = \"\\uEDC7\";\n    // U+EDCA  Stomp\n    Glyphs[\"kahnStomp\"] = \"\\uEDCA\";\n    // U+EDDB  Stomp-brush\n    Glyphs[\"kahnStompBrush\"] = \"\\uEDDB\";\n    // U+EDA1  Tap\n    Glyphs[\"kahnTap\"] = \"\\uEDA1\";\n    // U+EDAB  Toe\n    Glyphs[\"kahnToe\"] = \"\\uEDAB\";\n    // U+EDBC  Toe-click\n    Glyphs[\"kahnToeClick\"] = \"\\uEDBC\";\n    // U+EDB7  Toe-drop\n    Glyphs[\"kahnToeDrop\"] = \"\\uEDB7\";\n    // U+EDC5  Toe-step\n    Glyphs[\"kahnToeStep\"] = \"\\uEDC5\";\n    // U+EDCC  Toe-tap\n    Glyphs[\"kahnToeTap\"] = \"\\uEDCC\";\n    // U+EDAF  Trench\n    Glyphs[\"kahnTrench\"] = \"\\uEDAF\";\n    // U+EDE9  Wing\n    Glyphs[\"kahnWing\"] = \"\\uEDE9\";\n    // U+EDEA  Wing-change\n    Glyphs[\"kahnWingChange\"] = \"\\uEDEA\";\n    // U+EDE4  Zank\n    Glyphs[\"kahnZank\"] = \"\\uEDE4\";\n    // U+EDDF  Zink\n    Glyphs[\"kahnZink\"] = \"\\uEDDF\";\n    // U+E668  Clavichord bebung, 2 finger movements (above)\n    Glyphs[\"keyboardBebung2DotsAbove\"] = \"\\uE668\";\n    // U+E669  Clavichord bebung, 2 finger movements (below)\n    Glyphs[\"keyboardBebung2DotsBelow\"] = \"\\uE669\";\n    // U+E66A  Clavichord bebung, 3 finger movements (above)\n    Glyphs[\"keyboardBebung3DotsAbove\"] = \"\\uE66A\";\n    // U+E66B  Clavichord bebung, 3 finger movements (below)\n    Glyphs[\"keyboardBebung3DotsBelow\"] = \"\\uE66B\";\n    // U+E66C  Clavichord bebung, 4 finger movements (above)\n    Glyphs[\"keyboardBebung4DotsAbove\"] = \"\\uE66C\";\n    // U+E66D  Clavichord bebung, 4 finger movements (below)\n    Glyphs[\"keyboardBebung4DotsBelow\"] = \"\\uE66D\";\n    // U+E65E  Left pedal pictogram\n    Glyphs[\"keyboardLeftPedalPictogram\"] = \"\\uE65E\";\n    // U+E65F  Middle pedal pictogram\n    Glyphs[\"keyboardMiddlePedalPictogram\"] = \"\\uE65F\";\n    // U+E653  Pedal d\n    Glyphs[\"keyboardPedalD\"] = \"\\uE653\";\n    // U+E654  Pedal dot\n    Glyphs[\"keyboardPedalDot\"] = \"\\uE654\";\n    // U+E652  Pedal e\n    Glyphs[\"keyboardPedalE\"] = \"\\uE652\";\n    // U+E656  Half-pedal mark\n    Glyphs[\"keyboardPedalHalf\"] = \"\\uE656\";\n    // U+E65B  Half pedal mark 1\n    Glyphs[\"keyboardPedalHalf2\"] = \"\\uE65B\";\n    // U+E65C  Half pedal mark 2\n    Glyphs[\"keyboardPedalHalf3\"] = \"\\uE65C\";\n    // U+E661  Pedal heel 1\n    Glyphs[\"keyboardPedalHeel1\"] = \"\\uE661\";\n    // U+E662  Pedal heel 2\n    Glyphs[\"keyboardPedalHeel2\"] = \"\\uE662\";\n    // U+E663  Pedal heel 3 (Davis)\n    Glyphs[\"keyboardPedalHeel3\"] = \"\\uE663\";\n    // U+E674  Pedal heel to toe\n    Glyphs[\"keyboardPedalHeelToToe\"] = \"\\uE674\";\n    // U+E666  Pedal heel or toe\n    Glyphs[\"keyboardPedalHeelToe\"] = \"\\uE666\";\n    // U+E673  Pedal hook end\n    Glyphs[\"keyboardPedalHookEnd\"] = \"\\uE673\";\n    // U+E672  Pedal hook start\n    Glyphs[\"keyboardPedalHookStart\"] = \"\\uE672\";\n    // U+E658  Pedal hyphen\n    Glyphs[\"keyboardPedalHyphen\"] = \"\\uE658\";\n    // U+E651  Pedal P\n    Glyphs[\"keyboardPedalP\"] = \"\\uE651\";\n    // U+E676  Left parenthesis for pedal marking\n    Glyphs[\"keyboardPedalParensLeft\"] = \"\\uE676\";\n    // U+E677  Right parenthesis for pedal marking\n    Glyphs[\"keyboardPedalParensRight\"] = \"\\uE677\";\n    // U+E650  Pedal mark\n    Glyphs[\"keyboardPedalPed\"] = \"\\uE650\";\n    // U+E65A  Pedal S\n    Glyphs[\"keyboardPedalS\"] = \"\\uE65A\";\n    // U+E659  Sostenuto pedal mark\n    Glyphs[\"keyboardPedalSost\"] = \"\\uE659\";\n    // U+E664  Pedal toe 1\n    Glyphs[\"keyboardPedalToe1\"] = \"\\uE664\";\n    // U+E665  Pedal toe 2\n    Glyphs[\"keyboardPedalToe2\"] = \"\\uE665\";\n    // U+E675  Pedal toe to heel\n    Glyphs[\"keyboardPedalToeToHeel\"] = \"\\uE675\";\n    // U+E655  Pedal up mark\n    Glyphs[\"keyboardPedalUp\"] = \"\\uE655\";\n    // U+E657  Pedal up notch\n    Glyphs[\"keyboardPedalUpNotch\"] = \"\\uE657\";\n    // U+E65D  Pedal up special\n    Glyphs[\"keyboardPedalUpSpecial\"] = \"\\uE65D\";\n    // U+E670  Play with left hand\n    Glyphs[\"keyboardPlayWithLH\"] = \"\\uE670\";\n    // U+E671  Play with left hand (end)\n    Glyphs[\"keyboardPlayWithLHEnd\"] = \"\\uE671\";\n    // U+E66E  Play with right hand\n    Glyphs[\"keyboardPlayWithRH\"] = \"\\uE66E\";\n    // U+E66F  Play with right hand (end)\n    Glyphs[\"keyboardPlayWithRHEnd\"] = \"\\uE66F\";\n    // U+E667  Pluck strings inside piano (Maderna)\n    Glyphs[\"keyboardPluckInside\"] = \"\\uE667\";\n    // U+E660  Right pedal pictogram\n    Glyphs[\"keyboardRightPedalPictogram\"] = \"\\uE660\";\n    // U+EC3E  Kievan flat\n    Glyphs[\"kievanAccidentalFlat\"] = \"\\uEC3E\";\n    // U+EC3D  Kievan sharp\n    Glyphs[\"kievanAccidentalSharp\"] = \"\\uEC3D\";\n    // U+EC3C  Kievan augmentation dot\n    Glyphs[\"kievanAugmentationDot\"] = \"\\uEC3C\";\n    // U+EC30  Kievan C clef (tse-fa-ut)\n    Glyphs[\"kievanCClef\"] = \"\\uEC30\";\n    // U+EC31  Kievan ending symbol\n    Glyphs[\"kievanEndingSymbol\"] = \"\\uEC31\";\n    // U+EC3A  Kievan eighth note, stem down\n    Glyphs[\"kievanNote8thStemDown\"] = \"\\uEC3A\";\n    // U+EC39  Kievan eighth note, stem up\n    Glyphs[\"kievanNote8thStemUp\"] = \"\\uEC39\";\n    // U+EC3B  Kievan beam\n    Glyphs[\"kievanNoteBeam\"] = \"\\uEC3B\";\n    // U+EC35  Kievan half note (on staff line)\n    Glyphs[\"kievanNoteHalfStaffLine\"] = \"\\uEC35\";\n    // U+EC36  Kievan half note (in staff space)\n    Glyphs[\"kievanNoteHalfStaffSpace\"] = \"\\uEC36\";\n    // U+EC38  Kievan quarter note, stem down\n    Glyphs[\"kievanNoteQuarterStemDown\"] = \"\\uEC38\";\n    // U+EC37  Kievan quarter note, stem up\n    Glyphs[\"kievanNoteQuarterStemUp\"] = \"\\uEC37\";\n    // U+EC32  Kievan reciting note\n    Glyphs[\"kievanNoteReciting\"] = \"\\uEC32\";\n    // U+EC33  Kievan whole note\n    Glyphs[\"kievanNoteWhole\"] = \"\\uEC33\";\n    // U+EC34  Kievan final whole note\n    Glyphs[\"kievanNoteWholeFinal\"] = \"\\uEC34\";\n    // U+EC40  Do hand sign\n    Glyphs[\"kodalyHandDo\"] = \"\\uEC40\";\n    // U+EC43  Fa hand sign\n    Glyphs[\"kodalyHandFa\"] = \"\\uEC43\";\n    // U+EC45  La hand sign\n    Glyphs[\"kodalyHandLa\"] = \"\\uEC45\";\n    // U+EC42  Mi hand sign\n    Glyphs[\"kodalyHandMi\"] = \"\\uEC42\";\n    // U+EC41  Re hand sign\n    Glyphs[\"kodalyHandRe\"] = \"\\uEC41\";\n    // U+EC44  So hand sign\n    Glyphs[\"kodalyHandSo\"] = \"\\uEC44\";\n    // U+EC46  Ti hand sign\n    Glyphs[\"kodalyHandTi\"] = \"\\uEC46\";\n    // U+E04C  Left repeat sign within bar\n    Glyphs[\"leftRepeatSmall\"] = \"\\uE04C\";\n    // U+E022  Leger line\n    Glyphs[\"legerLine\"] = \"\\uE022\";\n    // U+E024  Leger line (narrow)\n    Glyphs[\"legerLineNarrow\"] = \"\\uE024\";\n    // U+E023  Leger line (wide)\n    Glyphs[\"legerLineWide\"] = \"\\uE023\";\n    // U+EBA4  Lute tablature end repeat barline\n    Glyphs[\"luteBarlineEndRepeat\"] = \"\\uEBA4\";\n    // U+EBA5  Lute tablature final barline\n    Glyphs[\"luteBarlineFinal\"] = \"\\uEBA5\";\n    // U+EBA3  Lute tablature start repeat barline\n    Glyphs[\"luteBarlineStartRepeat\"] = \"\\uEBA3\";\n    // U+EBAB  16th note (semiquaver) duration sign\n    Glyphs[\"luteDuration16th\"] = \"\\uEBAB\";\n    // U+EBAC  32nd note (demisemiquaver) duration sign\n    Glyphs[\"luteDuration32nd\"] = \"\\uEBAC\";\n    // U+EBAA  Eighth note (quaver) duration sign\n    Glyphs[\"luteDuration8th\"] = \"\\uEBAA\";\n    // U+EBA6  Double whole note (breve) duration sign\n    Glyphs[\"luteDurationDoubleWhole\"] = \"\\uEBA6\";\n    // U+EBA8  Half note (minim) duration sign\n    Glyphs[\"luteDurationHalf\"] = \"\\uEBA8\";\n    // U+EBA9  Quarter note (crotchet) duration sign\n    Glyphs[\"luteDurationQuarter\"] = \"\\uEBA9\";\n    // U+EBA7  Whole note (semibreve) duration sign\n    Glyphs[\"luteDurationWhole\"] = \"\\uEBA7\";\n    // U+EBAE  Right-hand fingering, first finger\n    Glyphs[\"luteFingeringRHFirst\"] = \"\\uEBAE\";\n    // U+EBAF  Right-hand fingering, second finger\n    Glyphs[\"luteFingeringRHSecond\"] = \"\\uEBAF\";\n    // U+EBB0  Right-hand fingering, third finger\n    Glyphs[\"luteFingeringRHThird\"] = \"\\uEBB0\";\n    // U+EBAD  Right-hand fingering, thumb\n    Glyphs[\"luteFingeringRHThumb\"] = \"\\uEBAD\";\n    // U+EBD0  10th course (diapason)\n    Glyphs[\"luteFrench10thCourse\"] = \"\\uEBD0\";\n    // U+EBCD  Seventh course (diapason)\n    Glyphs[\"luteFrench7thCourse\"] = \"\\uEBCD\";\n    // U+EBCE  Eighth course (diapason)\n    Glyphs[\"luteFrench8thCourse\"] = \"\\uEBCE\";\n    // U+EBCF  Ninth course (diapason)\n    Glyphs[\"luteFrench9thCourse\"] = \"\\uEBCF\";\n    // U+EBD5  Appoggiatura from above\n    Glyphs[\"luteFrenchAppoggiaturaAbove\"] = \"\\uEBD5\";\n    // U+EBD4  Appoggiatura from below\n    Glyphs[\"luteFrenchAppoggiaturaBelow\"] = \"\\uEBD4\";\n    // U+EBC0  Open string (a)\n    Glyphs[\"luteFrenchFretA\"] = \"\\uEBC0\";\n    // U+EBC1  First fret (b)\n    Glyphs[\"luteFrenchFretB\"] = \"\\uEBC1\";\n    // U+EBC2  Second fret (c)\n    Glyphs[\"luteFrenchFretC\"] = \"\\uEBC2\";\n    // U+EBC3  Third fret (d)\n    Glyphs[\"luteFrenchFretD\"] = \"\\uEBC3\";\n    // U+EBC4  Fourth fret (e)\n    Glyphs[\"luteFrenchFretE\"] = \"\\uEBC4\";\n    // U+EBC5  Fifth fret (f)\n    Glyphs[\"luteFrenchFretF\"] = \"\\uEBC5\";\n    // U+EBC6  Sixth fret (g)\n    Glyphs[\"luteFrenchFretG\"] = \"\\uEBC6\";\n    // U+EBC7  Seventh fret (h)\n    Glyphs[\"luteFrenchFretH\"] = \"\\uEBC7\";\n    // U+EBC8  Eighth fret (i)\n    Glyphs[\"luteFrenchFretI\"] = \"\\uEBC8\";\n    // U+EBC9  Ninth fret (k)\n    Glyphs[\"luteFrenchFretK\"] = \"\\uEBC9\";\n    // U+EBCA  10th fret (l)\n    Glyphs[\"luteFrenchFretL\"] = \"\\uEBCA\";\n    // U+EBCB  11th fret (m)\n    Glyphs[\"luteFrenchFretM\"] = \"\\uEBCB\";\n    // U+EBCC  12th fret (n)\n    Glyphs[\"luteFrenchFretN\"] = \"\\uEBCC\";\n    // U+EBD3  Inverted mordent\n    Glyphs[\"luteFrenchMordentInverted\"] = \"\\uEBD3\";\n    // U+EBD2  Mordent with lower auxiliary\n    Glyphs[\"luteFrenchMordentLower\"] = \"\\uEBD2\";\n    // U+EBD1  Mordent with upper auxiliary\n    Glyphs[\"luteFrenchMordentUpper\"] = \"\\uEBD1\";\n    // U+EC00  5th course, 1st fret (a)\n    Glyphs[\"luteGermanALower\"] = \"\\uEC00\";\n    // U+EC17  6th course, 1st fret (A)\n    Glyphs[\"luteGermanAUpper\"] = \"\\uEC17\";\n    // U+EC01  4th course, 1st fret (b)\n    Glyphs[\"luteGermanBLower\"] = \"\\uEC01\";\n    // U+EC18  6th course, 2nd fret (B)\n    Glyphs[\"luteGermanBUpper\"] = \"\\uEC18\";\n    // U+EC02  3rd course, 1st fret (c)\n    Glyphs[\"luteGermanCLower\"] = \"\\uEC02\";\n    // U+EC19  6th course, 3rd fret (C)\n    Glyphs[\"luteGermanCUpper\"] = \"\\uEC19\";\n    // U+EC03  2nd course, 1st fret (d)\n    Glyphs[\"luteGermanDLower\"] = \"\\uEC03\";\n    // U+EC1A  6th course, 4th fret (D)\n    Glyphs[\"luteGermanDUpper\"] = \"\\uEC1A\";\n    // U+EC04  1st course, 1st fret (e)\n    Glyphs[\"luteGermanELower\"] = \"\\uEC04\";\n    // U+EC1B  6th course, 5th fret (E)\n    Glyphs[\"luteGermanEUpper\"] = \"\\uEC1B\";\n    // U+EC05  5th course, 2nd fret (f)\n    Glyphs[\"luteGermanFLower\"] = \"\\uEC05\";\n    // U+EC1C  6th course, 6th fret (F)\n    Glyphs[\"luteGermanFUpper\"] = \"\\uEC1C\";\n    // U+EC06  4th course, 2nd fret (g)\n    Glyphs[\"luteGermanGLower\"] = \"\\uEC06\";\n    // U+EC1D  6th course, 7th fret (G)\n    Glyphs[\"luteGermanGUpper\"] = \"\\uEC1D\";\n    // U+EC07  3rd course, 2nd fret (h)\n    Glyphs[\"luteGermanHLower\"] = \"\\uEC07\";\n    // U+EC1E  6th course, 8th fret (H)\n    Glyphs[\"luteGermanHUpper\"] = \"\\uEC1E\";\n    // U+EC08  2nd course, 2nd fret (i)\n    Glyphs[\"luteGermanILower\"] = \"\\uEC08\";\n    // U+EC1F  6th course, 9th fret (I)\n    Glyphs[\"luteGermanIUpper\"] = \"\\uEC1F\";\n    // U+EC09  1st course, 2nd fret (k)\n    Glyphs[\"luteGermanKLower\"] = \"\\uEC09\";\n    // U+EC20  6th course, 10th fret (K)\n    Glyphs[\"luteGermanKUpper\"] = \"\\uEC20\";\n    // U+EC0A  5th course, 3rd fret (l)\n    Glyphs[\"luteGermanLLower\"] = \"\\uEC0A\";\n    // U+EC21  6th course, 11th fret (L)\n    Glyphs[\"luteGermanLUpper\"] = \"\\uEC21\";\n    // U+EC0B  4th course, 3rd fret (m)\n    Glyphs[\"luteGermanMLower\"] = \"\\uEC0B\";\n    // U+EC22  6th course, 12th fret (M)\n    Glyphs[\"luteGermanMUpper\"] = \"\\uEC22\";\n    // U+EC0C  3rd course, 3rd fret (n)\n    Glyphs[\"luteGermanNLower\"] = \"\\uEC0C\";\n    // U+EC23  6th course, 13th fret (N)\n    Glyphs[\"luteGermanNUpper\"] = \"\\uEC23\";\n    // U+EC0D  2nd course, 3rd fret (o)\n    Glyphs[\"luteGermanOLower\"] = \"\\uEC0D\";\n    // U+EC0E  1st course, 3rd fret (p)\n    Glyphs[\"luteGermanPLower\"] = \"\\uEC0E\";\n    // U+EC0F  5th course, 4th fret (q)\n    Glyphs[\"luteGermanQLower\"] = \"\\uEC0F\";\n    // U+EC10  4th course, 4th fret (r)\n    Glyphs[\"luteGermanRLower\"] = \"\\uEC10\";\n    // U+EC11  3rd course, 4th fret (s)\n    Glyphs[\"luteGermanSLower\"] = \"\\uEC11\";\n    // U+EC12  2nd course, 4th fret (t)\n    Glyphs[\"luteGermanTLower\"] = \"\\uEC12\";\n    // U+EC13  1st course, 4th fret (v)\n    Glyphs[\"luteGermanVLower\"] = \"\\uEC13\";\n    // U+EC14  5th course, 5th fret (x)\n    Glyphs[\"luteGermanXLower\"] = \"\\uEC14\";\n    // U+EC15  4th course, 5th fret (y)\n    Glyphs[\"luteGermanYLower\"] = \"\\uEC15\";\n    // U+EC16  3rd course, 5th fret (z)\n    Glyphs[\"luteGermanZLower\"] = \"\\uEC16\";\n    // U+EBF1  C sol fa ut clef\n    Glyphs[\"luteItalianClefCSolFaUt\"] = \"\\uEBF1\";\n    // U+EBF0  F fa ut clef\n    Glyphs[\"luteItalianClefFFaUt\"] = \"\\uEBF0\";\n    // U+EBE0  Open string (0)\n    Glyphs[\"luteItalianFret0\"] = \"\\uEBE0\";\n    // U+EBE1  First fret (1)\n    Glyphs[\"luteItalianFret1\"] = \"\\uEBE1\";\n    // U+EBE2  Second fret (2)\n    Glyphs[\"luteItalianFret2\"] = \"\\uEBE2\";\n    // U+EBE3  Third fret (3)\n    Glyphs[\"luteItalianFret3\"] = \"\\uEBE3\";\n    // U+EBE4  Fourth fret (4)\n    Glyphs[\"luteItalianFret4\"] = \"\\uEBE4\";\n    // U+EBE5  Fifth fret (5)\n    Glyphs[\"luteItalianFret5\"] = \"\\uEBE5\";\n    // U+EBE6  Sixth fret (6)\n    Glyphs[\"luteItalianFret6\"] = \"\\uEBE6\";\n    // U+EBE7  Seventh fret (7)\n    Glyphs[\"luteItalianFret7\"] = \"\\uEBE7\";\n    // U+EBE8  Eighth fret (8)\n    Glyphs[\"luteItalianFret8\"] = \"\\uEBE8\";\n    // U+EBE9  Ninth fret (9)\n    Glyphs[\"luteItalianFret9\"] = \"\\uEBE9\";\n    // U+EBF4  Hold finger in place\n    Glyphs[\"luteItalianHoldFinger\"] = \"\\uEBF4\";\n    // U+EBF3  Hold note\n    Glyphs[\"luteItalianHoldNote\"] = \"\\uEBF3\";\n    // U+EBF5  Release finger\n    Glyphs[\"luteItalianReleaseFinger\"] = \"\\uEBF5\";\n    // U+EBEA  Fast tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoFast\"] = \"\\uEBEA\";\n    // U+EBEC  Neither fast nor slow tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoNeitherFastNorSlow\"] = \"\\uEBEC\";\n    // U+EBED  Slow tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoSlow\"] = \"\\uEBED\";\n    // U+EBEB  Somewhat fast tempo indication (de Narvaez)\n    Glyphs[\"luteItalianTempoSomewhatFast\"] = \"\\uEBEB\";\n    // U+EBEE  Very slow indication (de Narvaez)\n    Glyphs[\"luteItalianTempoVerySlow\"] = \"\\uEBEE\";\n    // U+EBEF  Triple time indication\n    Glyphs[\"luteItalianTimeTriple\"] = \"\\uEBEF\";\n    // U+EBF2  Single-finger tremolo or mordent\n    Glyphs[\"luteItalianTremolo\"] = \"\\uEBF2\";\n    // U+EBF6  Vibrato (verre cassé)\n    Glyphs[\"luteItalianVibrato\"] = \"\\uEBF6\";\n    // U+EBA0  Lute tablature staff, 6 courses\n    Glyphs[\"luteStaff6Lines\"] = \"\\uEBA0\";\n    // U+EBA2  Lute tablature staff, 6 courses (narrow)\n    Glyphs[\"luteStaff6LinesNarrow\"] = \"\\uEBA2\";\n    // U+EBA1  Lute tablature staff, 6 courses (wide)\n    Glyphs[\"luteStaff6LinesWide\"] = \"\\uEBA1\";\n    // U+E551  Elision\n    Glyphs[\"lyricsElision\"] = \"\\uE551\";\n    // U+E550  Narrow elision\n    Glyphs[\"lyricsElisionNarrow\"] = \"\\uE550\";\n    // U+E552  Wide elision\n    Glyphs[\"lyricsElisionWide\"] = \"\\uE552\";\n    // U+E553  Baseline hyphen\n    Glyphs[\"lyricsHyphenBaseline\"] = \"\\uE553\";\n    // U+E554  Non-breaking baseline hyphen\n    Glyphs[\"lyricsHyphenBaselineNonBreaking\"] = \"\\uE554\";\n    // U+E555  Text repeats\n    Glyphs[\"lyricsTextRepeat\"] = \"\\uE555\";\n    // U+E9E1  Flat, hard b (mi)\n    Glyphs[\"medRenFlatHardB\"] = \"\\uE9E1\";\n    // U+E9E0  Flat, soft b (fa)\n    Glyphs[\"medRenFlatSoftB\"] = \"\\uE9E0\";\n    // U+E9E4  Flat with dot\n    Glyphs[\"medRenFlatWithDot\"] = \"\\uE9E4\";\n    // U+EA24  G clef (Corpus Monodicum)\n    Glyphs[\"medRenGClefCMN\"] = \"\\uEA24\";\n    // U+EA22  Liquescence\n    Glyphs[\"medRenLiquescenceCMN\"] = \"\\uEA22\";\n    // U+EA26  Liquescent ascending (Corpus Monodicum)\n    Glyphs[\"medRenLiquescentAscCMN\"] = \"\\uEA26\";\n    // U+EA27  Liquescent descending (Corpus Monodicum)\n    Glyphs[\"medRenLiquescentDescCMN\"] = \"\\uEA27\";\n    // U+E9E2  Natural\n    Glyphs[\"medRenNatural\"] = \"\\uE9E2\";\n    // U+E9E5  Natural with interrupted cross\n    Glyphs[\"medRenNaturalWithCross\"] = \"\\uE9E5\";\n    // U+EA2A  Oriscus (Corpus Monodicum)\n    Glyphs[\"medRenOriscusCMN\"] = \"\\uEA2A\";\n    // U+EA23  Plica\n    Glyphs[\"medRenPlicaCMN\"] = \"\\uEA23\";\n    // U+EA25  Punctum (Corpus Monodicum)\n    Glyphs[\"medRenPunctumCMN\"] = \"\\uEA25\";\n    // U+EA28  Quilisma (Corpus Monodicum)\n    Glyphs[\"medRenQuilismaCMN\"] = \"\\uEA28\";\n    // U+E9E3  Croix\n    Glyphs[\"medRenSharpCroix\"] = \"\\uE9E3\";\n    // U+EA29  Strophicus (Corpus Monodicum)\n    Glyphs[\"medRenStrophicusCMN\"] = \"\\uEA29\";\n    // U+EA10  Alteration sign\n    Glyphs[\"mensuralAlterationSign\"] = \"\\uEA10\";\n    // U+E952  Black mensural brevis\n    Glyphs[\"mensuralBlackBrevis\"] = \"\\uE952\";\n    // U+E956  Black mensural void brevis\n    Glyphs[\"mensuralBlackBrevisVoid\"] = \"\\uE956\";\n    // U+E95A  Black mensural dragma\n    Glyphs[\"mensuralBlackDragma\"] = \"\\uE95A\";\n    // U+E951  Black mensural longa\n    Glyphs[\"mensuralBlackLonga\"] = \"\\uE951\";\n    // U+E950  Black mensural maxima\n    Glyphs[\"mensuralBlackMaxima\"] = \"\\uE950\";\n    // U+E954  Black mensural minima\n    Glyphs[\"mensuralBlackMinima\"] = \"\\uE954\";\n    // U+E958  Black mensural void minima\n    Glyphs[\"mensuralBlackMinimaVoid\"] = \"\\uE958\";\n    // U+E953  Black mensural semibrevis\n    Glyphs[\"mensuralBlackSemibrevis\"] = \"\\uE953\";\n    // U+E959  Black mensural semibrevis caudata\n    Glyphs[\"mensuralBlackSemibrevisCaudata\"] = \"\\uE959\";\n    // U+E95B  Black mensural oblique semibrevis\n    Glyphs[\"mensuralBlackSemibrevisOblique\"] = \"\\uE95B\";\n    // U+E957  Black mensural void semibrevis\n    Glyphs[\"mensuralBlackSemibrevisVoid\"] = \"\\uE957\";\n    // U+E955  Black mensural semiminima\n    Glyphs[\"mensuralBlackSemiminima\"] = \"\\uE955\";\n    // U+E905  Mensural C clef\n    Glyphs[\"mensuralCclef\"] = \"\\uE905\";\n    // U+E90A  Petrucci C clef, high position\n    Glyphs[\"mensuralCclefPetrucciPosHigh\"] = \"\\uE90A\";\n    // U+E90B  Petrucci C clef, highest position\n    Glyphs[\"mensuralCclefPetrucciPosHighest\"] = \"\\uE90B\";\n    // U+E908  Petrucci C clef, low position\n    Glyphs[\"mensuralCclefPetrucciPosLow\"] = \"\\uE908\";\n    // U+E907  Petrucci C clef, lowest position\n    Glyphs[\"mensuralCclefPetrucciPosLowest\"] = \"\\uE907\";\n    // U+E909  Petrucci C clef, middle position\n    Glyphs[\"mensuralCclefPetrucciPosMiddle\"] = \"\\uE909\";\n    // U+EA0F  Coloration end, round\n    Glyphs[\"mensuralColorationEndRound\"] = \"\\uEA0F\";\n    // U+EA0D  Coloration end, square\n    Glyphs[\"mensuralColorationEndSquare\"] = \"\\uEA0D\";\n    // U+EA0E  Coloration start, round\n    Glyphs[\"mensuralColorationStartRound\"] = \"\\uEA0E\";\n    // U+EA0C  Coloration start, square\n    Glyphs[\"mensuralColorationStartSquare\"] = \"\\uEA0C\";\n    // U+E940  Combining stem diagonal\n    Glyphs[\"mensuralCombStemDiagonal\"] = \"\\uE940\";\n    // U+E93F  Combining stem down\n    Glyphs[\"mensuralCombStemDown\"] = \"\\uE93F\";\n    // U+E948  Combining stem with extended flag down\n    Glyphs[\"mensuralCombStemDownFlagExtended\"] = \"\\uE948\";\n    // U+E946  Combining stem with flared flag down\n    Glyphs[\"mensuralCombStemDownFlagFlared\"] = \"\\uE946\";\n    // U+E94C  Combining stem with fusa flag down\n    Glyphs[\"mensuralCombStemDownFlagFusa\"] = \"\\uE94C\";\n    // U+E944  Combining stem with flag left down\n    Glyphs[\"mensuralCombStemDownFlagLeft\"] = \"\\uE944\";\n    // U+E942  Combining stem with flag right down\n    Glyphs[\"mensuralCombStemDownFlagRight\"] = \"\\uE942\";\n    // U+E94A  Combining stem with semiminima flag down\n    Glyphs[\"mensuralCombStemDownFlagSemiminima\"] = \"\\uE94A\";\n    // U+E93E  Combining stem up\n    Glyphs[\"mensuralCombStemUp\"] = \"\\uE93E\";\n    // U+E947  Combining stem with extended flag up\n    Glyphs[\"mensuralCombStemUpFlagExtended\"] = \"\\uE947\";\n    // U+E945  Combining stem with flared flag up\n    Glyphs[\"mensuralCombStemUpFlagFlared\"] = \"\\uE945\";\n    // U+E94B  Combining stem with fusa flag up\n    Glyphs[\"mensuralCombStemUpFlagFusa\"] = \"\\uE94B\";\n    // U+E943  Combining stem with flag left up\n    Glyphs[\"mensuralCombStemUpFlagLeft\"] = \"\\uE943\";\n    // U+E941  Combining stem with flag right up\n    Glyphs[\"mensuralCombStemUpFlagRight\"] = \"\\uE941\";\n    // U+E949  Combining stem with semiminima flag up\n    Glyphs[\"mensuralCombStemUpFlagSemiminima\"] = \"\\uE949\";\n    // U+EA0A  Checkmark custos\n    Glyphs[\"mensuralCustosCheckmark\"] = \"\\uEA0A\";\n    // U+EA03  Mensural custos down\n    Glyphs[\"mensuralCustosDown\"] = \"\\uEA03\";\n    // U+EA0B  Turn-like custos\n    Glyphs[\"mensuralCustosTurn\"] = \"\\uEA0B\";\n    // U+EA02  Mensural custos up\n    Glyphs[\"mensuralCustosUp\"] = \"\\uEA02\";\n    // U+E903  Mensural F clef\n    Glyphs[\"mensuralFclef\"] = \"\\uE903\";\n    // U+E904  Petrucci F clef\n    Glyphs[\"mensuralFclefPetrucci\"] = \"\\uE904\";\n    // U+E900  Mensural G clef\n    Glyphs[\"mensuralGclef\"] = \"\\uE900\";\n    // U+E901  Petrucci G clef\n    Glyphs[\"mensuralGclefPetrucci\"] = \"\\uE901\";\n    // U+E92D  Modus imperfectum, vertical\n    Glyphs[\"mensuralModusImperfectumVert\"] = \"\\uE92D\";\n    // U+E92C  Modus perfectum, vertical\n    Glyphs[\"mensuralModusPerfectumVert\"] = \"\\uE92C\";\n    // U+E934  Longa/brevis notehead, black\n    Glyphs[\"mensuralNoteheadLongaBlack\"] = \"\\uE934\";\n    // U+E936  Longa/brevis notehead, black and void\n    Glyphs[\"mensuralNoteheadLongaBlackVoid\"] = \"\\uE936\";\n    // U+E935  Longa/brevis notehead, void\n    Glyphs[\"mensuralNoteheadLongaVoid\"] = \"\\uE935\";\n    // U+E937  Longa/brevis notehead, white\n    Glyphs[\"mensuralNoteheadLongaWhite\"] = \"\\uE937\";\n    // U+E930  Maxima notehead, black\n    Glyphs[\"mensuralNoteheadMaximaBlack\"] = \"\\uE930\";\n    // U+E932  Maxima notehead, black and void\n    Glyphs[\"mensuralNoteheadMaximaBlackVoid\"] = \"\\uE932\";\n    // U+E931  Maxima notehead, void\n    Glyphs[\"mensuralNoteheadMaximaVoid\"] = \"\\uE931\";\n    // U+E933  Maxima notehead, white\n    Glyphs[\"mensuralNoteheadMaximaWhite\"] = \"\\uE933\";\n    // U+E93C  Minima notehead, white\n    Glyphs[\"mensuralNoteheadMinimaWhite\"] = \"\\uE93C\";\n    // U+E938  Semibrevis notehead, black\n    Glyphs[\"mensuralNoteheadSemibrevisBlack\"] = \"\\uE938\";\n    // U+E93A  Semibrevis notehead, black and void\n    Glyphs[\"mensuralNoteheadSemibrevisBlackVoid\"] = \"\\uE93A\";\n    // U+E93B  Semibrevis notehead, black and void (turned)\n    Glyphs[\"mensuralNoteheadSemibrevisBlackVoidTurned\"] = \"\\uE93B\";\n    // U+E939  Semibrevis notehead, void\n    Glyphs[\"mensuralNoteheadSemibrevisVoid\"] = \"\\uE939\";\n    // U+E93D  Semiminima/fusa notehead, white\n    Glyphs[\"mensuralNoteheadSemiminimaWhite\"] = \"\\uE93D\";\n    // U+E970  Oblique form, ascending 2nd, black\n    Glyphs[\"mensuralObliqueAsc2ndBlack\"] = \"\\uE970\";\n    // U+E972  Oblique form, ascending 2nd, black and void\n    Glyphs[\"mensuralObliqueAsc2ndBlackVoid\"] = \"\\uE972\";\n    // U+E971  Oblique form, ascending 2nd, void\n    Glyphs[\"mensuralObliqueAsc2ndVoid\"] = \"\\uE971\";\n    // U+E973  Oblique form, ascending 2nd, white\n    Glyphs[\"mensuralObliqueAsc2ndWhite\"] = \"\\uE973\";\n    // U+E974  Oblique form, ascending 3rd, black\n    Glyphs[\"mensuralObliqueAsc3rdBlack\"] = \"\\uE974\";\n    // U+E976  Oblique form, ascending 3rd, black and void\n    Glyphs[\"mensuralObliqueAsc3rdBlackVoid\"] = \"\\uE976\";\n    // U+E975  Oblique form, ascending 3rd, void\n    Glyphs[\"mensuralObliqueAsc3rdVoid\"] = \"\\uE975\";\n    // U+E977  Oblique form, ascending 3rd, white\n    Glyphs[\"mensuralObliqueAsc3rdWhite\"] = \"\\uE977\";\n    // U+E978  Oblique form, ascending 4th, black\n    Glyphs[\"mensuralObliqueAsc4thBlack\"] = \"\\uE978\";\n    // U+E97A  Oblique form, ascending 4th, black and void\n    Glyphs[\"mensuralObliqueAsc4thBlackVoid\"] = \"\\uE97A\";\n    // U+E979  Oblique form, ascending 4th, void\n    Glyphs[\"mensuralObliqueAsc4thVoid\"] = \"\\uE979\";\n    // U+E97B  Oblique form, ascending 4th, white\n    Glyphs[\"mensuralObliqueAsc4thWhite\"] = \"\\uE97B\";\n    // U+E97C  Oblique form, ascending 5th, black\n    Glyphs[\"mensuralObliqueAsc5thBlack\"] = \"\\uE97C\";\n    // U+E97E  Oblique form, ascending 5th, black and void\n    Glyphs[\"mensuralObliqueAsc5thBlackVoid\"] = \"\\uE97E\";\n    // U+E97D  Oblique form, ascending 5th, void\n    Glyphs[\"mensuralObliqueAsc5thVoid\"] = \"\\uE97D\";\n    // U+E97F  Oblique form, ascending 5th, white\n    Glyphs[\"mensuralObliqueAsc5thWhite\"] = \"\\uE97F\";\n    // U+E980  Oblique form, descending 2nd, black\n    Glyphs[\"mensuralObliqueDesc2ndBlack\"] = \"\\uE980\";\n    // U+E982  Oblique form, descending 2nd, black and void\n    Glyphs[\"mensuralObliqueDesc2ndBlackVoid\"] = \"\\uE982\";\n    // U+E981  Oblique form, descending 2nd, void\n    Glyphs[\"mensuralObliqueDesc2ndVoid\"] = \"\\uE981\";\n    // U+E983  Oblique form, descending 2nd, white\n    Glyphs[\"mensuralObliqueDesc2ndWhite\"] = \"\\uE983\";\n    // U+E984  Oblique form, descending 3rd, black\n    Glyphs[\"mensuralObliqueDesc3rdBlack\"] = \"\\uE984\";\n    // U+E986  Oblique form, descending 3rd, black and void\n    Glyphs[\"mensuralObliqueDesc3rdBlackVoid\"] = \"\\uE986\";\n    // U+E985  Oblique form, descending 3rd, void\n    Glyphs[\"mensuralObliqueDesc3rdVoid\"] = \"\\uE985\";\n    // U+E987  Oblique form, descending 3rd, white\n    Glyphs[\"mensuralObliqueDesc3rdWhite\"] = \"\\uE987\";\n    // U+E988  Oblique form, descending 4th, black\n    Glyphs[\"mensuralObliqueDesc4thBlack\"] = \"\\uE988\";\n    // U+E98A  Oblique form, descending 4th, black and void\n    Glyphs[\"mensuralObliqueDesc4thBlackVoid\"] = \"\\uE98A\";\n    // U+E989  Oblique form, descending 4th, void\n    Glyphs[\"mensuralObliqueDesc4thVoid\"] = \"\\uE989\";\n    // U+E98B  Oblique form, descending 4th, white\n    Glyphs[\"mensuralObliqueDesc4thWhite\"] = \"\\uE98B\";\n    // U+E98C  Oblique form, descending 5th, black\n    Glyphs[\"mensuralObliqueDesc5thBlack\"] = \"\\uE98C\";\n    // U+E98E  Oblique form, descending 5th, black and void\n    Glyphs[\"mensuralObliqueDesc5thBlackVoid\"] = \"\\uE98E\";\n    // U+E98D  Oblique form, descending 5th, void\n    Glyphs[\"mensuralObliqueDesc5thVoid\"] = \"\\uE98D\";\n    // U+E98F  Oblique form, descending 5th, white\n    Glyphs[\"mensuralObliqueDesc5thWhite\"] = \"\\uE98F\";\n    // U+E910  Tempus perfectum cum prolatione perfecta (9/8)\n    Glyphs[\"mensuralProlation1\"] = \"\\uE910\";\n    // U+E919  Tempus imperfectum cum prolatione imperfecta diminution 4\n    Glyphs[\"mensuralProlation10\"] = \"\\uE919\";\n    // U+E91A  Tempus imperfectum cum prolatione imperfecta diminution 5\n    Glyphs[\"mensuralProlation11\"] = \"\\uE91A\";\n    // U+E911  Tempus perfectum cum prolatione imperfecta (3/4)\n    Glyphs[\"mensuralProlation2\"] = \"\\uE911\";\n    // U+E912  Tempus perfectum cum prolatione imperfecta diminution 1 (3/8)\n    Glyphs[\"mensuralProlation3\"] = \"\\uE912\";\n    // U+E913  Tempus perfectum cum prolatione perfecta diminution 2 (9/16)\n    Glyphs[\"mensuralProlation4\"] = \"\\uE913\";\n    // U+E914  Tempus imperfectum cum prolatione perfecta (6/8)\n    Glyphs[\"mensuralProlation5\"] = \"\\uE914\";\n    // U+E915  Tempus imperfectum cum prolatione imperfecta (2/4)\n    Glyphs[\"mensuralProlation6\"] = \"\\uE915\";\n    // U+E916  Tempus imperfectum cum prolatione imperfecta diminution 1 (2/2)\n    Glyphs[\"mensuralProlation7\"] = \"\\uE916\";\n    // U+E917  Tempus imperfectum cum prolatione imperfecta diminution 2 (6/16)\n    Glyphs[\"mensuralProlation8\"] = \"\\uE917\";\n    // U+E918  Tempus imperfectum cum prolatione imperfecta diminution 3 (2/2)\n    Glyphs[\"mensuralProlation9\"] = \"\\uE918\";\n    // U+E920  Combining dot\n    Glyphs[\"mensuralProlationCombiningDot\"] = \"\\uE920\";\n    // U+E924  Combining void dot\n    Glyphs[\"mensuralProlationCombiningDotVoid\"] = \"\\uE924\";\n    // U+E925  Combining vertical stroke\n    Glyphs[\"mensuralProlationCombiningStroke\"] = \"\\uE925\";\n    // U+E922  Combining three dots horizontal\n    Glyphs[\"mensuralProlationCombiningThreeDots\"] = \"\\uE922\";\n    // U+E923  Combining three dots triangular\n    Glyphs[\"mensuralProlationCombiningThreeDotsTri\"] = \"\\uE923\";\n    // U+E921  Combining two dots\n    Glyphs[\"mensuralProlationCombiningTwoDots\"] = \"\\uE921\";\n    // U+E926  Mensural proportion 1\n    Glyphs[\"mensuralProportion1\"] = \"\\uE926\";\n    // U+E927  Mensural proportion 2\n    Glyphs[\"mensuralProportion2\"] = \"\\uE927\";\n    // U+E928  Mensural proportion 3\n    Glyphs[\"mensuralProportion3\"] = \"\\uE928\";\n    // U+E929  Mensural proportion 4\n    Glyphs[\"mensuralProportion4\"] = \"\\uE929\";\n    // U+EE90  Mensural proportion 5\n    Glyphs[\"mensuralProportion5\"] = \"\\uEE90\";\n    // U+EE91  Mensural proportion 6\n    Glyphs[\"mensuralProportion6\"] = \"\\uEE91\";\n    // U+EE92  Mensural proportion 7\n    Glyphs[\"mensuralProportion7\"] = \"\\uEE92\";\n    // U+EE93  Mensural proportion 8\n    Glyphs[\"mensuralProportion8\"] = \"\\uEE93\";\n    // U+EE94  Mensural proportion 9\n    Glyphs[\"mensuralProportion9\"] = \"\\uEE94\";\n    // U+E92B  Mensural proportion major\n    Glyphs[\"mensuralProportionMajor\"] = \"\\uE92B\";\n    // U+E92A  Mensural proportion minor\n    Glyphs[\"mensuralProportionMinor\"] = \"\\uE92A\";\n    // U+E91C  Proportio dupla 1\n    Glyphs[\"mensuralProportionProportioDupla1\"] = \"\\uE91C\";\n    // U+E91D  Proportio dupla 2\n    Glyphs[\"mensuralProportionProportioDupla2\"] = \"\\uE91D\";\n    // U+E91F  Proportio quadrupla\n    Glyphs[\"mensuralProportionProportioQuadrupla\"] = \"\\uE91F\";\n    // U+E91E  Proportio tripla\n    Glyphs[\"mensuralProportionProportioTripla\"] = \"\\uE91E\";\n    // U+E91B  Tempus perfectum\n    Glyphs[\"mensuralProportionTempusPerfectum\"] = \"\\uE91B\";\n    // U+E9F3  Brevis rest\n    Glyphs[\"mensuralRestBrevis\"] = \"\\uE9F3\";\n    // U+E9F7  Fusa rest\n    Glyphs[\"mensuralRestFusa\"] = \"\\uE9F7\";\n    // U+E9F2  Longa imperfecta rest\n    Glyphs[\"mensuralRestLongaImperfecta\"] = \"\\uE9F2\";\n    // U+E9F1  Longa perfecta rest\n    Glyphs[\"mensuralRestLongaPerfecta\"] = \"\\uE9F1\";\n    // U+E9F0  Maxima rest\n    Glyphs[\"mensuralRestMaxima\"] = \"\\uE9F0\";\n    // U+E9F5  Minima rest\n    Glyphs[\"mensuralRestMinima\"] = \"\\uE9F5\";\n    // U+E9F4  Semibrevis rest\n    Glyphs[\"mensuralRestSemibrevis\"] = \"\\uE9F4\";\n    // U+E9F8  Semifusa rest\n    Glyphs[\"mensuralRestSemifusa\"] = \"\\uE9F8\";\n    // U+E9F6  Semiminima rest\n    Glyphs[\"mensuralRestSemiminima\"] = \"\\uE9F6\";\n    // U+EA01  Signum congruentiae down\n    Glyphs[\"mensuralSignumDown\"] = \"\\uEA01\";\n    // U+EA00  Signum congruentiae up\n    Glyphs[\"mensuralSignumUp\"] = \"\\uEA00\";\n    // U+E92F  Tempus imperfectum, horizontal\n    Glyphs[\"mensuralTempusImperfectumHoriz\"] = \"\\uE92F\";\n    // U+E92E  Tempus perfectum, horizontal\n    Glyphs[\"mensuralTempusPerfectumHoriz\"] = \"\\uE92E\";\n    // U+E95E  White mensural brevis\n    Glyphs[\"mensuralWhiteBrevis\"] = \"\\uE95E\";\n    // U+E961  White mensural fusa\n    Glyphs[\"mensuralWhiteFusa\"] = \"\\uE961\";\n    // U+E95D  White mensural longa\n    Glyphs[\"mensuralWhiteLonga\"] = \"\\uE95D\";\n    // U+E95C  White mensural maxima\n    Glyphs[\"mensuralWhiteMaxima\"] = \"\\uE95C\";\n    // U+E95F  White mensural minima\n    Glyphs[\"mensuralWhiteMinima\"] = \"\\uE95F\";\n    // U+E962  White mensural semibrevis\n    Glyphs[\"mensuralWhiteSemibrevis\"] = \"\\uE962\";\n    // U+E960  White mensural semiminima\n    Glyphs[\"mensuralWhiteSemiminima\"] = \"\\uE960\";\n    // U+ECB7  Augmentation dot\n    Glyphs[\"metAugmentationDot\"] = \"\\uECB7\";\n    // U+ECB6  1024th note (semihemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote1024thDown\"] = \"\\uECB6\";\n    // U+ECB5  1024th note (semihemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote1024thUp\"] = \"\\uECB5\";\n    // U+ECB0  128th note (semihemidemisemiquaver) stem down\n    Glyphs[\"metNote128thDown\"] = \"\\uECB0\";\n    // U+ECAF  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"metNote128thUp\"] = \"\\uECAF\";\n    // U+ECAA  16th note (semiquaver) stem down\n    Glyphs[\"metNote16thDown\"] = \"\\uECAA\";\n    // U+ECA9  16th note (semiquaver) stem up\n    Glyphs[\"metNote16thUp\"] = \"\\uECA9\";\n    // U+ECB2  256th note (demisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote256thDown\"] = \"\\uECB2\";\n    // U+ECB1  256th note (demisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote256thUp\"] = \"\\uECB1\";\n    // U+ECAC  32nd note (demisemiquaver) stem down\n    Glyphs[\"metNote32ndDown\"] = \"\\uECAC\";\n    // U+ECAB  32nd note (demisemiquaver) stem up\n    Glyphs[\"metNote32ndUp\"] = \"\\uECAB\";\n    // U+ECB4  512th note (hemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote512thDown\"] = \"\\uECB4\";\n    // U+ECB3  512th note (hemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote512thUp\"] = \"\\uECB3\";\n    // U+ECAE  64th note (hemidemisemiquaver) stem down\n    Glyphs[\"metNote64thDown\"] = \"\\uECAE\";\n    // U+ECAD  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"metNote64thUp\"] = \"\\uECAD\";\n    // U+ECA8  Eighth note (quaver) stem down\n    Glyphs[\"metNote8thDown\"] = \"\\uECA8\";\n    // U+ECA7  Eighth note (quaver) stem up\n    Glyphs[\"metNote8thUp\"] = \"\\uECA7\";\n    // U+ECA0  Double whole note (breve)\n    Glyphs[\"metNoteDoubleWhole\"] = \"\\uECA0\";\n    // U+ECA1  Double whole note (square)\n    Glyphs[\"metNoteDoubleWholeSquare\"] = \"\\uECA1\";\n    // U+ECA4  Half note (minim) stem down\n    Glyphs[\"metNoteHalfDown\"] = \"\\uECA4\";\n    // U+ECA3  Half note (minim) stem up\n    Glyphs[\"metNoteHalfUp\"] = \"\\uECA3\";\n    // U+ECA6  Quarter note (crotchet) stem down\n    Glyphs[\"metNoteQuarterDown\"] = \"\\uECA6\";\n    // U+ECA5  Quarter note (crotchet) stem up\n    Glyphs[\"metNoteQuarterUp\"] = \"\\uECA5\";\n    // U+ECA2  Whole note (semibreve)\n    Glyphs[\"metNoteWhole\"] = \"\\uECA2\";\n    // U+EC63  Left-pointing arrow for metric modulation\n    Glyphs[\"metricModulationArrowLeft\"] = \"\\uEC63\";\n    // U+EC64  Right-pointing arrow for metric modulation\n    Glyphs[\"metricModulationArrowRight\"] = \"\\uEC64\";\n    // U+EC61  Do not copy\n    Glyphs[\"miscDoNotCopy\"] = \"\\uEC61\";\n    // U+EC60  Do not photocopy\n    Glyphs[\"miscDoNotPhotocopy\"] = \"\\uEC60\";\n    // U+EC62  Eyeglasses\n    Glyphs[\"miscEyeglasses\"] = \"\\uEC62\";\n    // U+E1E6  1024th note (semihemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"note1024thDown\"] = \"\\uE1E6\";\n    // U+E1E5  1024th note (semihemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"note1024thUp\"] = \"\\uE1E5\";\n    // U+E1E0  128th note (semihemidemisemiquaver) stem down\n    Glyphs[\"note128thDown\"] = \"\\uE1E0\";\n    // U+E1DF  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"note128thUp\"] = \"\\uE1DF\";\n    // U+E1DA  16th note (semiquaver) stem down\n    Glyphs[\"note16thDown\"] = \"\\uE1DA\";\n    // U+E1D9  16th note (semiquaver) stem up\n    Glyphs[\"note16thUp\"] = \"\\uE1D9\";\n    // U+E1E2  256th note (demisemihemidemisemiquaver) stem down\n    Glyphs[\"note256thDown\"] = \"\\uE1E2\";\n    // U+E1E1  256th note (demisemihemidemisemiquaver) stem up\n    Glyphs[\"note256thUp\"] = \"\\uE1E1\";\n    // U+E1DC  32nd note (demisemiquaver) stem down\n    Glyphs[\"note32ndDown\"] = \"\\uE1DC\";\n    // U+E1DB  32nd note (demisemiquaver) stem up\n    Glyphs[\"note32ndUp\"] = \"\\uE1DB\";\n    // U+E1E4  512th note (hemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"note512thDown\"] = \"\\uE1E4\";\n    // U+E1E3  512th note (hemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"note512thUp\"] = \"\\uE1E3\";\n    // U+E1DE  64th note (hemidemisemiquaver) stem down\n    Glyphs[\"note64thDown\"] = \"\\uE1DE\";\n    // U+E1DD  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"note64thUp\"] = \"\\uE1DD\";\n    // U+E1D8  Eighth note (quaver) stem down\n    Glyphs[\"note8thDown\"] = \"\\uE1D8\";\n    // U+E1D7  Eighth note (quaver) stem up\n    Glyphs[\"note8thUp\"] = \"\\uE1D7\";\n    // U+E197  A (black note)\n    Glyphs[\"noteABlack\"] = \"\\uE197\";\n    // U+E196  A flat (black note)\n    Glyphs[\"noteAFlatBlack\"] = \"\\uE196\";\n    // U+E17F  A flat (half note)\n    Glyphs[\"noteAFlatHalf\"] = \"\\uE17F\";\n    // U+E168  A flat (whole note)\n    Glyphs[\"noteAFlatWhole\"] = \"\\uE168\";\n    // U+E180  A (half note)\n    Glyphs[\"noteAHalf\"] = \"\\uE180\";\n    // U+E198  A sharp (black note)\n    Glyphs[\"noteASharpBlack\"] = \"\\uE198\";\n    // U+E181  A sharp (half note)\n    Glyphs[\"noteASharpHalf\"] = \"\\uE181\";\n    // U+E16A  A sharp (whole note)\n    Glyphs[\"noteASharpWhole\"] = \"\\uE16A\";\n    // U+E169  A (whole note)\n    Glyphs[\"noteAWhole\"] = \"\\uE169\";\n    // U+E19A  B (black note)\n    Glyphs[\"noteBBlack\"] = \"\\uE19A\";\n    // U+E199  B flat (black note)\n    Glyphs[\"noteBFlatBlack\"] = \"\\uE199\";\n    // U+E182  B flat (half note)\n    Glyphs[\"noteBFlatHalf\"] = \"\\uE182\";\n    // U+E16B  B flat (whole note)\n    Glyphs[\"noteBFlatWhole\"] = \"\\uE16B\";\n    // U+E183  B (half note)\n    Glyphs[\"noteBHalf\"] = \"\\uE183\";\n    // U+E19B  B sharp (black note)\n    Glyphs[\"noteBSharpBlack\"] = \"\\uE19B\";\n    // U+E184  B sharp (half note)\n    Glyphs[\"noteBSharpHalf\"] = \"\\uE184\";\n    // U+E16D  B sharp (whole note)\n    Glyphs[\"noteBSharpWhole\"] = \"\\uE16D\";\n    // U+E16C  B (whole note)\n    Glyphs[\"noteBWhole\"] = \"\\uE16C\";\n    // U+E19D  C (black note)\n    Glyphs[\"noteCBlack\"] = \"\\uE19D\";\n    // U+E19C  C flat (black note)\n    Glyphs[\"noteCFlatBlack\"] = \"\\uE19C\";\n    // U+E185  C flat (half note)\n    Glyphs[\"noteCFlatHalf\"] = \"\\uE185\";\n    // U+E16E  C flat (whole note)\n    Glyphs[\"noteCFlatWhole\"] = \"\\uE16E\";\n    // U+E186  C (half note)\n    Glyphs[\"noteCHalf\"] = \"\\uE186\";\n    // U+E19E  C sharp (black note)\n    Glyphs[\"noteCSharpBlack\"] = \"\\uE19E\";\n    // U+E187  C sharp (half note)\n    Glyphs[\"noteCSharpHalf\"] = \"\\uE187\";\n    // U+E170  C sharp (whole note)\n    Glyphs[\"noteCSharpWhole\"] = \"\\uE170\";\n    // U+E16F  C (whole note)\n    Glyphs[\"noteCWhole\"] = \"\\uE16F\";\n    // U+E1A0  D (black note)\n    Glyphs[\"noteDBlack\"] = \"\\uE1A0\";\n    // U+E19F  D flat (black note)\n    Glyphs[\"noteDFlatBlack\"] = \"\\uE19F\";\n    // U+E188  D flat (half note)\n    Glyphs[\"noteDFlatHalf\"] = \"\\uE188\";\n    // U+E171  D flat (whole note)\n    Glyphs[\"noteDFlatWhole\"] = \"\\uE171\";\n    // U+E189  D (half note)\n    Glyphs[\"noteDHalf\"] = \"\\uE189\";\n    // U+E1A1  D sharp (black note)\n    Glyphs[\"noteDSharpBlack\"] = \"\\uE1A1\";\n    // U+E18A  D sharp (half note)\n    Glyphs[\"noteDSharpHalf\"] = \"\\uE18A\";\n    // U+E173  D sharp (whole note)\n    Glyphs[\"noteDSharpWhole\"] = \"\\uE173\";\n    // U+E172  D (whole note)\n    Glyphs[\"noteDWhole\"] = \"\\uE172\";\n    // U+EEF2  Di (black note)\n    Glyphs[\"noteDiBlack\"] = \"\\uEEF2\";\n    // U+EEE9  Di (half note)\n    Glyphs[\"noteDiHalf\"] = \"\\uEEE9\";\n    // U+EEE0  Di (whole note)\n    Glyphs[\"noteDiWhole\"] = \"\\uEEE0\";\n    // U+E160  Do (black note)\n    Glyphs[\"noteDoBlack\"] = \"\\uE160\";\n    // U+E158  Do (half note)\n    Glyphs[\"noteDoHalf\"] = \"\\uE158\";\n    // U+E150  Do (whole note)\n    Glyphs[\"noteDoWhole\"] = \"\\uE150\";\n    // U+E1D0  Double whole note (breve)\n    Glyphs[\"noteDoubleWhole\"] = \"\\uE1D0\";\n    // U+E1D1  Double whole note (square)\n    Glyphs[\"noteDoubleWholeSquare\"] = \"\\uE1D1\";\n    // U+E1A3  E (black note)\n    Glyphs[\"noteEBlack\"] = \"\\uE1A3\";\n    // U+E1A2  E flat (black note)\n    Glyphs[\"noteEFlatBlack\"] = \"\\uE1A2\";\n    // U+E18B  E flat (half note)\n    Glyphs[\"noteEFlatHalf\"] = \"\\uE18B\";\n    // U+E174  E flat (whole note)\n    Glyphs[\"noteEFlatWhole\"] = \"\\uE174\";\n    // U+E18C  E (half note)\n    Glyphs[\"noteEHalf\"] = \"\\uE18C\";\n    // U+E1A4  E sharp (black note)\n    Glyphs[\"noteESharpBlack\"] = \"\\uE1A4\";\n    // U+E18D  E sharp (half note)\n    Glyphs[\"noteESharpHalf\"] = \"\\uE18D\";\n    // U+E176  E sharp (whole note)\n    Glyphs[\"noteESharpWhole\"] = \"\\uE176\";\n    // U+E175  E (whole note)\n    Glyphs[\"noteEWhole\"] = \"\\uE175\";\n    // U+E1AF  Empty black note\n    Glyphs[\"noteEmptyBlack\"] = \"\\uE1AF\";\n    // U+E1AE  Empty half note\n    Glyphs[\"noteEmptyHalf\"] = \"\\uE1AE\";\n    // U+E1AD  Empty whole note\n    Glyphs[\"noteEmptyWhole\"] = \"\\uE1AD\";\n    // U+E1A6  F (black note)\n    Glyphs[\"noteFBlack\"] = \"\\uE1A6\";\n    // U+E1A5  F flat (black note)\n    Glyphs[\"noteFFlatBlack\"] = \"\\uE1A5\";\n    // U+E18E  F flat (half note)\n    Glyphs[\"noteFFlatHalf\"] = \"\\uE18E\";\n    // U+E177  F flat (whole note)\n    Glyphs[\"noteFFlatWhole\"] = \"\\uE177\";\n    // U+E18F  F (half note)\n    Glyphs[\"noteFHalf\"] = \"\\uE18F\";\n    // U+E1A7  F sharp (black note)\n    Glyphs[\"noteFSharpBlack\"] = \"\\uE1A7\";\n    // U+E190  F sharp (half note)\n    Glyphs[\"noteFSharpHalf\"] = \"\\uE190\";\n    // U+E179  F sharp (whole note)\n    Glyphs[\"noteFSharpWhole\"] = \"\\uE179\";\n    // U+E178  F (whole note)\n    Glyphs[\"noteFWhole\"] = \"\\uE178\";\n    // U+E163  Fa (black note)\n    Glyphs[\"noteFaBlack\"] = \"\\uE163\";\n    // U+E15B  Fa (half note)\n    Glyphs[\"noteFaHalf\"] = \"\\uE15B\";\n    // U+E153  Fa (whole note)\n    Glyphs[\"noteFaWhole\"] = \"\\uE153\";\n    // U+EEF6  Fi (black note)\n    Glyphs[\"noteFiBlack\"] = \"\\uEEF6\";\n    // U+EEED  Fi (half note)\n    Glyphs[\"noteFiHalf\"] = \"\\uEEED\";\n    // U+EEE4  Fi (whole note)\n    Glyphs[\"noteFiWhole\"] = \"\\uEEE4\";\n    // U+E1A9  G (black note)\n    Glyphs[\"noteGBlack\"] = \"\\uE1A9\";\n    // U+E1A8  G flat (black note)\n    Glyphs[\"noteGFlatBlack\"] = \"\\uE1A8\";\n    // U+E191  G flat (half note)\n    Glyphs[\"noteGFlatHalf\"] = \"\\uE191\";\n    // U+E17A  G flat (whole note)\n    Glyphs[\"noteGFlatWhole\"] = \"\\uE17A\";\n    // U+E192  G (half note)\n    Glyphs[\"noteGHalf\"] = \"\\uE192\";\n    // U+E1AA  G sharp (black note)\n    Glyphs[\"noteGSharpBlack\"] = \"\\uE1AA\";\n    // U+E193  G sharp (half note)\n    Glyphs[\"noteGSharpHalf\"] = \"\\uE193\";\n    // U+E17C  G sharp (whole note)\n    Glyphs[\"noteGSharpWhole\"] = \"\\uE17C\";\n    // U+E17B  G (whole note)\n    Glyphs[\"noteGWhole\"] = \"\\uE17B\";\n    // U+E1AB  H (black note)\n    Glyphs[\"noteHBlack\"] = \"\\uE1AB\";\n    // U+E194  H (half note)\n    Glyphs[\"noteHHalf\"] = \"\\uE194\";\n    // U+E1AC  H sharp (black note)\n    Glyphs[\"noteHSharpBlack\"] = \"\\uE1AC\";\n    // U+E195  H sharp (half note)\n    Glyphs[\"noteHSharpHalf\"] = \"\\uE195\";\n    // U+E17E  H sharp (whole note)\n    Glyphs[\"noteHSharpWhole\"] = \"\\uE17E\";\n    // U+E17D  H (whole note)\n    Glyphs[\"noteHWhole\"] = \"\\uE17D\";\n    // U+E1D4  Half note (minim) stem down\n    Glyphs[\"noteHalfDown\"] = \"\\uE1D4\";\n    // U+E1D3  Half note (minim) stem up\n    Glyphs[\"noteHalfUp\"] = \"\\uE1D3\";\n    // U+E165  La (black note)\n    Glyphs[\"noteLaBlack\"] = \"\\uE165\";\n    // U+E15D  La (half note)\n    Glyphs[\"noteLaHalf\"] = \"\\uE15D\";\n    // U+E155  La (whole note)\n    Glyphs[\"noteLaWhole\"] = \"\\uE155\";\n    // U+EEF9  Le (black note)\n    Glyphs[\"noteLeBlack\"] = \"\\uEEF9\";\n    // U+EEF0  Le (half note)\n    Glyphs[\"noteLeHalf\"] = \"\\uEEF0\";\n    // U+EEE7  Le (whole note)\n    Glyphs[\"noteLeWhole\"] = \"\\uEEE7\";\n    // U+EEF8  Li (black note)\n    Glyphs[\"noteLiBlack\"] = \"\\uEEF8\";\n    // U+EEEF  Li (half note)\n    Glyphs[\"noteLiHalf\"] = \"\\uEEEF\";\n    // U+EEE6  Li (whole note)\n    Glyphs[\"noteLiWhole\"] = \"\\uEEE6\";\n    // U+EEF5  Me (black note)\n    Glyphs[\"noteMeBlack\"] = \"\\uEEF5\";\n    // U+EEEC  Me (half note)\n    Glyphs[\"noteMeHalf\"] = \"\\uEEEC\";\n    // U+EEE3  Me (whole note)\n    Glyphs[\"noteMeWhole\"] = \"\\uEEE3\";\n    // U+E162  Mi (black note)\n    Glyphs[\"noteMiBlack\"] = \"\\uE162\";\n    // U+E15A  Mi (half note)\n    Glyphs[\"noteMiHalf\"] = \"\\uE15A\";\n    // U+E152  Mi (whole note)\n    Glyphs[\"noteMiWhole\"] = \"\\uE152\";\n    // U+E1D6  Quarter note (crotchet) stem down\n    Glyphs[\"noteQuarterDown\"] = \"\\uE1D6\";\n    // U+E1D5  Quarter note (crotchet) stem up\n    Glyphs[\"noteQuarterUp\"] = \"\\uE1D5\";\n    // U+EEF4  Ra (black note)\n    Glyphs[\"noteRaBlack\"] = \"\\uEEF4\";\n    // U+EEEB  Ra (half note)\n    Glyphs[\"noteRaHalf\"] = \"\\uEEEB\";\n    // U+EEE2  Ra (whole note)\n    Glyphs[\"noteRaWhole\"] = \"\\uEEE2\";\n    // U+E161  Re (black note)\n    Glyphs[\"noteReBlack\"] = \"\\uE161\";\n    // U+E159  Re (half note)\n    Glyphs[\"noteReHalf\"] = \"\\uE159\";\n    // U+E151  Re (whole note)\n    Glyphs[\"noteReWhole\"] = \"\\uE151\";\n    // U+EEF3  Ri (black note)\n    Glyphs[\"noteRiBlack\"] = \"\\uEEF3\";\n    // U+EEEA  Ri (half note)\n    Glyphs[\"noteRiHalf\"] = \"\\uEEEA\";\n    // U+EEE1  Ri (whole note)\n    Glyphs[\"noteRiWhole\"] = \"\\uEEE1\";\n    // U+EEF7  Se (black note)\n    Glyphs[\"noteSeBlack\"] = \"\\uEEF7\";\n    // U+EEEE  Se (half note)\n    Glyphs[\"noteSeHalf\"] = \"\\uEEEE\";\n    // U+EEE5  Se (whole note)\n    Glyphs[\"noteSeWhole\"] = \"\\uEEE5\";\n    // U+E1C9  Arrowhead left black (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftBlack\"] = \"\\uE1C9\";\n    // U+ECDC  Arrowhead left double whole (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftDoubleWhole\"] = \"\\uECDC\";\n    // U+E1C8  Arrowhead left white (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftWhite\"] = \"\\uE1C8\";\n    // U+E1B9  Diamond black (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondBlack\"] = \"\\uE1B9\";\n    // U+ECD4  Diamond double whole (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondDoubleWhole\"] = \"\\uECD4\";\n    // U+E1B8  Diamond white (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondWhite\"] = \"\\uE1B8\";\n    // U+E1C5  Isosceles triangle black (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleBlack\"] = \"\\uE1C5\";\n    // U+ECDA  Isosceles triangle double whole (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleDoubleWhole\"] = \"\\uECDA\";\n    // U+E1C4  Isosceles triangle white (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleWhite\"] = \"\\uE1C4\";\n    // U+E1C1  Inverted keystone black (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneBlack\"] = \"\\uE1C1\";\n    // U+ECD8  Inverted keystone double whole (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneDoubleWhole\"] = \"\\uECD8\";\n    // U+E1C0  Inverted keystone white (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneWhite\"] = \"\\uE1C0\";\n    // U+E1BD  Moon black (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonBlack\"] = \"\\uE1BD\";\n    // U+ECD6  Moon double whole (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonDoubleWhole\"] = \"\\uECD6\";\n    // U+E1C7  Moon left black (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftBlack\"] = \"\\uE1C7\";\n    // U+ECDB  Moon left double whole (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftDoubleWhole\"] = \"\\uECDB\";\n    // U+E1C6  Moon left white (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftWhite\"] = \"\\uE1C6\";\n    // U+E1BC  Moon white (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonWhite\"] = \"\\uE1BC\";\n    // U+E1C3  Quarter moon black (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonBlack\"] = \"\\uE1C3\";\n    // U+ECD9  Quarter moon double whole (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonDoubleWhole\"] = \"\\uECD9\";\n    // U+E1C2  Quarter moon white (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonWhite\"] = \"\\uE1C2\";\n    // U+E1B1  Round black (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundBlack\"] = \"\\uE1B1\";\n    // U+ECD0  Round double whole (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundDoubleWhole\"] = \"\\uECD0\";\n    // U+E1B0  Round white (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundWhite\"] = \"\\uE1B0\";\n    // U+E1B3  Square black (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareBlack\"] = \"\\uE1B3\";\n    // U+ECD1  Square double whole (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareDoubleWhole\"] = \"\\uECD1\";\n    // U+E1B2  Square white (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareWhite\"] = \"\\uE1B2\";\n    // U+E1B7  Triangle left black (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftBlack\"] = \"\\uE1B7\";\n    // U+ECD3  Triangle left double whole (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftDoubleWhole\"] = \"\\uECD3\";\n    // U+E1B6  Triangle left white (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftWhite\"] = \"\\uE1B6\";\n    // U+E1B5  Triangle right black (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightBlack\"] = \"\\uE1B5\";\n    // U+ECD2  Triangle right double whole (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightDoubleWhole\"] = \"\\uECD2\";\n    // U+E1B4  Triangle right white (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightWhite\"] = \"\\uE1B4\";\n    // U+E1BF  Triangle-round black (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundBlack\"] = \"\\uE1BF\";\n    // U+ECD7  Triangle-round white (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundDoubleWhole\"] = \"\\uECD7\";\n    // U+E1CB  Triangle-round left black (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftBlack\"] = \"\\uE1CB\";\n    // U+ECDD  Triangle-round left double whole (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftDoubleWhole\"] = \"\\uECDD\";\n    // U+E1CA  Triangle-round left white (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftWhite\"] = \"\\uE1CA\";\n    // U+E1BE  Triangle-round white (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundWhite\"] = \"\\uE1BE\";\n    // U+E1BB  Triangle up black (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpBlack\"] = \"\\uE1BB\";\n    // U+ECD5  Triangle up double whole (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpDoubleWhole\"] = \"\\uECD5\";\n    // U+E1BA  Triangle up white (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpWhite\"] = \"\\uE1BA\";\n    // U+E167  Si (black note)\n    Glyphs[\"noteSiBlack\"] = \"\\uE167\";\n    // U+E15F  Si (half note)\n    Glyphs[\"noteSiHalf\"] = \"\\uE15F\";\n    // U+E157  Si (whole note)\n    Glyphs[\"noteSiWhole\"] = \"\\uE157\";\n    // U+E164  So (black note)\n    Glyphs[\"noteSoBlack\"] = \"\\uE164\";\n    // U+E15C  So (half note)\n    Glyphs[\"noteSoHalf\"] = \"\\uE15C\";\n    // U+E154  So (whole note)\n    Glyphs[\"noteSoWhole\"] = \"\\uE154\";\n    // U+EEFA  Te (black note)\n    Glyphs[\"noteTeBlack\"] = \"\\uEEFA\";\n    // U+EEF1  Te (half note)\n    Glyphs[\"noteTeHalf\"] = \"\\uEEF1\";\n    // U+EEE8  Te (whole note)\n    Glyphs[\"noteTeWhole\"] = \"\\uEEE8\";\n    // U+E166  Ti (black note)\n    Glyphs[\"noteTiBlack\"] = \"\\uE166\";\n    // U+E15E  Ti (half note)\n    Glyphs[\"noteTiHalf\"] = \"\\uE15E\";\n    // U+E156  Ti (whole note)\n    Glyphs[\"noteTiWhole\"] = \"\\uE156\";\n    // U+E1D2  Whole note (semibreve)\n    Glyphs[\"noteWhole\"] = \"\\uE1D2\";\n    // U+E0A4  Black notehead\n    Glyphs[\"noteheadBlack\"] = \"\\uE0A4\";\n    // U+E0F7  Circle slash notehead\n    Glyphs[\"noteheadCircleSlash\"] = \"\\uE0F7\";\n    // U+E0B3  Circle X notehead\n    Glyphs[\"noteheadCircleX\"] = \"\\uE0B3\";\n    // U+E0B0  Circle X double whole\n    Glyphs[\"noteheadCircleXDoubleWhole\"] = \"\\uE0B0\";\n    // U+E0B2  Circle X half\n    Glyphs[\"noteheadCircleXHalf\"] = \"\\uE0B2\";\n    // U+E0B1  Circle X whole\n    Glyphs[\"noteheadCircleXWhole\"] = \"\\uE0B1\";\n    // U+E0E4  Circled black notehead\n    Glyphs[\"noteheadCircledBlack\"] = \"\\uE0E4\";\n    // U+E0E8  Black notehead in large circle\n    Glyphs[\"noteheadCircledBlackLarge\"] = \"\\uE0E8\";\n    // U+E0E7  Circled double whole notehead\n    Glyphs[\"noteheadCircledDoubleWhole\"] = \"\\uE0E7\";\n    // U+E0EB  Double whole notehead in large circle\n    Glyphs[\"noteheadCircledDoubleWholeLarge\"] = \"\\uE0EB\";\n    // U+E0E5  Circled half notehead\n    Glyphs[\"noteheadCircledHalf\"] = \"\\uE0E5\";\n    // U+E0E9  Half notehead in large circle\n    Glyphs[\"noteheadCircledHalfLarge\"] = \"\\uE0E9\";\n    // U+E0E6  Circled whole notehead\n    Glyphs[\"noteheadCircledWhole\"] = \"\\uE0E6\";\n    // U+E0EA  Whole notehead in large circle\n    Glyphs[\"noteheadCircledWholeLarge\"] = \"\\uE0EA\";\n    // U+E0EC  Cross notehead in large circle\n    Glyphs[\"noteheadCircledXLarge\"] = \"\\uE0EC\";\n    // U+E124  Double whole note cluster, 2nd\n    Glyphs[\"noteheadClusterDoubleWhole2nd\"] = \"\\uE124\";\n    // U+E128  Double whole note cluster, 3rd\n    Glyphs[\"noteheadClusterDoubleWhole3rd\"] = \"\\uE128\";\n    // U+E12E  Combining double whole note cluster, bottom\n    Glyphs[\"noteheadClusterDoubleWholeBottom\"] = \"\\uE12E\";\n    // U+E12D  Combining double whole note cluster, middle\n    Glyphs[\"noteheadClusterDoubleWholeMiddle\"] = \"\\uE12D\";\n    // U+E12C  Combining double whole note cluster, top\n    Glyphs[\"noteheadClusterDoubleWholeTop\"] = \"\\uE12C\";\n    // U+E126  Half note cluster, 2nd\n    Glyphs[\"noteheadClusterHalf2nd\"] = \"\\uE126\";\n    // U+E12A  Half note cluster, 3rd\n    Glyphs[\"noteheadClusterHalf3rd\"] = \"\\uE12A\";\n    // U+E134  Combining half note cluster, bottom\n    Glyphs[\"noteheadClusterHalfBottom\"] = \"\\uE134\";\n    // U+E133  Combining half note cluster, middle\n    Glyphs[\"noteheadClusterHalfMiddle\"] = \"\\uE133\";\n    // U+E132  Combining half note cluster, top\n    Glyphs[\"noteheadClusterHalfTop\"] = \"\\uE132\";\n    // U+E127  Quarter note cluster, 2nd\n    Glyphs[\"noteheadClusterQuarter2nd\"] = \"\\uE127\";\n    // U+E12B  Quarter note cluster, 3rd\n    Glyphs[\"noteheadClusterQuarter3rd\"] = \"\\uE12B\";\n    // U+E137  Combining quarter note cluster, bottom\n    Glyphs[\"noteheadClusterQuarterBottom\"] = \"\\uE137\";\n    // U+E136  Combining quarter note cluster, middle\n    Glyphs[\"noteheadClusterQuarterMiddle\"] = \"\\uE136\";\n    // U+E135  Combining quarter note cluster, top\n    Glyphs[\"noteheadClusterQuarterTop\"] = \"\\uE135\";\n    // U+E123  Cluster notehead black (round)\n    Glyphs[\"noteheadClusterRoundBlack\"] = \"\\uE123\";\n    // U+E122  Cluster notehead white (round)\n    Glyphs[\"noteheadClusterRoundWhite\"] = \"\\uE122\";\n    // U+E121  Cluster notehead black (square)\n    Glyphs[\"noteheadClusterSquareBlack\"] = \"\\uE121\";\n    // U+E120  Cluster notehead white (square)\n    Glyphs[\"noteheadClusterSquareWhite\"] = \"\\uE120\";\n    // U+E125  Whole note cluster, 2nd\n    Glyphs[\"noteheadClusterWhole2nd\"] = \"\\uE125\";\n    // U+E129  Whole note cluster, 3rd\n    Glyphs[\"noteheadClusterWhole3rd\"] = \"\\uE129\";\n    // U+E131  Combining whole note cluster, bottom\n    Glyphs[\"noteheadClusterWholeBottom\"] = \"\\uE131\";\n    // U+E130  Combining whole note cluster, middle\n    Glyphs[\"noteheadClusterWholeMiddle\"] = \"\\uE130\";\n    // U+E12F  Combining whole note cluster, top\n    Glyphs[\"noteheadClusterWholeTop\"] = \"\\uE12F\";\n    // U+EEAE  4/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhNoteSeriesHalf\"] = \"\\uEEAE\";\n    // U+EEAD  8/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhNoteSeriesWhole\"] = \"\\uEEAD\";\n    // U+EEAF  2/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhSeriesBlack\"] = \"\\uEEAF\";\n    // U+EEB5  2/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesBlack\"] = \"\\uEEB5\";\n    // U+EEB4  4/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesHalf\"] = \"\\uEEB4\";\n    // U+EEB3  8/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesWhole\"] = \"\\uEEB3\";\n    // U+EEA6  1/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesBlack\"] = \"\\uEEA6\";\n    // U+EEA5  2/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesHalf\"] = \"\\uEEA5\";\n    // U+EEA4  4/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesWhole\"] = \"\\uEEA4\";\n    // U+EEAC  2/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesBlack\"] = \"\\uEEAC\";\n    // U+EEAB  4/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesHalf\"] = \"\\uEEAB\";\n    // U+EEAA  8/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesWhole\"] = \"\\uEEAA\";\n    // U+EEA9  1/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesBlack\"] = \"\\uEEA9\";\n    // U+EEA8  2/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesHalf\"] = \"\\uEEA8\";\n    // U+EEA7  4/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesWhole\"] = \"\\uEEA7\";\n    // U+EEA3  1/6 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesBlack\"] = \"\\uEEA3\";\n    // U+EEA2  1/3 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesHalf\"] = \"\\uEEA2\";\n    // U+EEA1  2/3 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesWhole\"] = \"\\uEEA1\";\n    // U+EEB2  2/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesBlack\"] = \"\\uEEB2\";\n    // U+EEB1  4/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesHalf\"] = \"\\uEEB1\";\n    // U+EEB0  8/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesWhole\"] = \"\\uEEB0\";\n    // U+E0DB  Diamond black notehead\n    Glyphs[\"noteheadDiamondBlack\"] = \"\\uE0DB\";\n    // U+E0E2  Diamond black notehead (old)\n    Glyphs[\"noteheadDiamondBlackOld\"] = \"\\uE0E2\";\n    // U+E0DC  Diamond black notehead (wide)\n    Glyphs[\"noteheadDiamondBlackWide\"] = \"\\uE0DC\";\n    // U+E139  Black diamond cluster, 2nd\n    Glyphs[\"noteheadDiamondClusterBlack2nd\"] = \"\\uE139\";\n    // U+E13B  Black diamond cluster, 3rd\n    Glyphs[\"noteheadDiamondClusterBlack3rd\"] = \"\\uE13B\";\n    // U+E141  Combining black diamond cluster, bottom\n    Glyphs[\"noteheadDiamondClusterBlackBottom\"] = \"\\uE141\";\n    // U+E140  Combining black diamond cluster, middle\n    Glyphs[\"noteheadDiamondClusterBlackMiddle\"] = \"\\uE140\";\n    // U+E13F  Combining black diamond cluster, top\n    Glyphs[\"noteheadDiamondClusterBlackTop\"] = \"\\uE13F\";\n    // U+E138  White diamond cluster, 2nd\n    Glyphs[\"noteheadDiamondClusterWhite2nd\"] = \"\\uE138\";\n    // U+E13A  White diamond cluster, 3rd\n    Glyphs[\"noteheadDiamondClusterWhite3rd\"] = \"\\uE13A\";\n    // U+E13E  Combining white diamond cluster, bottom\n    Glyphs[\"noteheadDiamondClusterWhiteBottom\"] = \"\\uE13E\";\n    // U+E13D  Combining white diamond cluster, middle\n    Glyphs[\"noteheadDiamondClusterWhiteMiddle\"] = \"\\uE13D\";\n    // U+E13C  Combining white diamond cluster, top\n    Glyphs[\"noteheadDiamondClusterWhiteTop\"] = \"\\uE13C\";\n    // U+E0D7  Diamond double whole notehead\n    Glyphs[\"noteheadDiamondDoubleWhole\"] = \"\\uE0D7\";\n    // U+E0DF  Diamond double whole notehead (old)\n    Glyphs[\"noteheadDiamondDoubleWholeOld\"] = \"\\uE0DF\";\n    // U+E0D9  Diamond half notehead\n    Glyphs[\"noteheadDiamondHalf\"] = \"\\uE0D9\";\n    // U+E0E3  Half-filled diamond notehead\n    Glyphs[\"noteheadDiamondHalfFilled\"] = \"\\uE0E3\";\n    // U+E0E1  Diamond half notehead (old)\n    Glyphs[\"noteheadDiamondHalfOld\"] = \"\\uE0E1\";\n    // U+E0DA  Diamond half notehead (wide)\n    Glyphs[\"noteheadDiamondHalfWide\"] = \"\\uE0DA\";\n    // U+E0FC  Open diamond notehead\n    Glyphs[\"noteheadDiamondOpen\"] = \"\\uE0FC\";\n    // U+E0DD  Diamond white notehead\n    Glyphs[\"noteheadDiamondWhite\"] = \"\\uE0DD\";\n    // U+E0DE  Diamond white notehead (wide)\n    Glyphs[\"noteheadDiamondWhiteWide\"] = \"\\uE0DE\";\n    // U+E0D8  Diamond whole notehead\n    Glyphs[\"noteheadDiamondWhole\"] = \"\\uE0D8\";\n    // U+E0E0  Diamond whole notehead (old)\n    Glyphs[\"noteheadDiamondWholeOld\"] = \"\\uE0E0\";\n    // U+E0A0  Double whole (breve) notehead\n    Glyphs[\"noteheadDoubleWhole\"] = \"\\uE0A0\";\n    // U+E0A1  Double whole (breve) notehead (square)\n    Glyphs[\"noteheadDoubleWholeSquare\"] = \"\\uE0A1\";\n    // U+E0B4  Double whole notehead with X\n    Glyphs[\"noteheadDoubleWholeWithX\"] = \"\\uE0B4\";\n    // U+E0A3  Half (minim) notehead\n    Glyphs[\"noteheadHalf\"] = \"\\uE0A3\";\n    // U+E0FB  Filled half (minim) notehead\n    Glyphs[\"noteheadHalfFilled\"] = \"\\uE0FB\";\n    // U+E0B6  Half notehead with X\n    Glyphs[\"noteheadHalfWithX\"] = \"\\uE0B6\";\n    // U+E0F8  Heavy X notehead\n    Glyphs[\"noteheadHeavyX\"] = \"\\uE0F8\";\n    // U+E0F9  Heavy X with hat notehead\n    Glyphs[\"noteheadHeavyXHat\"] = \"\\uE0F9\";\n    // U+E0F4  Large arrow down (lowest pitch) black notehead\n    Glyphs[\"noteheadLargeArrowDownBlack\"] = \"\\uE0F4\";\n    // U+E0F1  Large arrow down (lowest pitch) double whole notehead\n    Glyphs[\"noteheadLargeArrowDownDoubleWhole\"] = \"\\uE0F1\";\n    // U+E0F3  Large arrow down (lowest pitch) half notehead\n    Glyphs[\"noteheadLargeArrowDownHalf\"] = \"\\uE0F3\";\n    // U+E0F2  Large arrow down (lowest pitch) whole notehead\n    Glyphs[\"noteheadLargeArrowDownWhole\"] = \"\\uE0F2\";\n    // U+E0F0  Large arrow up (highest pitch) black notehead\n    Glyphs[\"noteheadLargeArrowUpBlack\"] = \"\\uE0F0\";\n    // U+E0ED  Large arrow up (highest pitch) double whole notehead\n    Glyphs[\"noteheadLargeArrowUpDoubleWhole\"] = \"\\uE0ED\";\n    // U+E0EF  Large arrow up (highest pitch) half notehead\n    Glyphs[\"noteheadLargeArrowUpHalf\"] = \"\\uE0EF\";\n    // U+E0EE  Large arrow up (highest pitch) whole notehead\n    Glyphs[\"noteheadLargeArrowUpWhole\"] = \"\\uE0EE\";\n    // U+E0CB  Moon notehead black\n    Glyphs[\"noteheadMoonBlack\"] = \"\\uE0CB\";\n    // U+E0CA  Moon notehead white\n    Glyphs[\"noteheadMoonWhite\"] = \"\\uE0CA\";\n    // U+EEA0  Sine notehead (Nancarrow)\n    Glyphs[\"noteheadNancarrowSine\"] = \"\\uEEA0\";\n    // U+E0A5  Null notehead\n    Glyphs[\"noteheadNull\"] = \"\\uE0A5\";\n    // U+E0CE  Parenthesis notehead\n    Glyphs[\"noteheadParenthesis\"] = \"\\uE0CE\";\n    // U+E0F5  Opening parenthesis\n    Glyphs[\"noteheadParenthesisLeft\"] = \"\\uE0F5\";\n    // U+E0F6  Closing parenthesis\n    Glyphs[\"noteheadParenthesisRight\"] = \"\\uE0F6\";\n    // U+E0AF  Plus notehead black\n    Glyphs[\"noteheadPlusBlack\"] = \"\\uE0AF\";\n    // U+E0AC  Plus notehead double whole\n    Glyphs[\"noteheadPlusDoubleWhole\"] = \"\\uE0AC\";\n    // U+E0AE  Plus notehead half\n    Glyphs[\"noteheadPlusHalf\"] = \"\\uE0AE\";\n    // U+E0AD  Plus notehead whole\n    Glyphs[\"noteheadPlusWhole\"] = \"\\uE0AD\";\n    // U+E144  Combining black rectangular cluster, bottom\n    Glyphs[\"noteheadRectangularClusterBlackBottom\"] = \"\\uE144\";\n    // U+E143  Combining black rectangular cluster, middle\n    Glyphs[\"noteheadRectangularClusterBlackMiddle\"] = \"\\uE143\";\n    // U+E142  Combining black rectangular cluster, top\n    Glyphs[\"noteheadRectangularClusterBlackTop\"] = \"\\uE142\";\n    // U+E147  Combining white rectangular cluster, bottom\n    Glyphs[\"noteheadRectangularClusterWhiteBottom\"] = \"\\uE147\";\n    // U+E146  Combining white rectangular cluster, middle\n    Glyphs[\"noteheadRectangularClusterWhiteMiddle\"] = \"\\uE146\";\n    // U+E145  Combining white rectangular cluster, top\n    Glyphs[\"noteheadRectangularClusterWhiteTop\"] = \"\\uE145\";\n    // U+E113  Round black notehead\n    Glyphs[\"noteheadRoundBlack\"] = \"\\uE113\";\n    // U+E11C  Round black notehead, double slashed\n    Glyphs[\"noteheadRoundBlackDoubleSlashed\"] = \"\\uE11C\";\n    // U+E110  Large round black notehead\n    Glyphs[\"noteheadRoundBlackLarge\"] = \"\\uE110\";\n    // U+E118  Round black notehead, slashed\n    Glyphs[\"noteheadRoundBlackSlashed\"] = \"\\uE118\";\n    // U+E116  Large round black notehead, slashed\n    Glyphs[\"noteheadRoundBlackSlashedLarge\"] = \"\\uE116\";\n    // U+E114  Round white notehead\n    Glyphs[\"noteheadRoundWhite\"] = \"\\uE114\";\n    // U+E11D  Round white notehead, double slashed\n    Glyphs[\"noteheadRoundWhiteDoubleSlashed\"] = \"\\uE11D\";\n    // U+E111  Large round white notehead\n    Glyphs[\"noteheadRoundWhiteLarge\"] = \"\\uE111\";\n    // U+E119  Round white notehead, slashed\n    Glyphs[\"noteheadRoundWhiteSlashed\"] = \"\\uE119\";\n    // U+E117  Large round white notehead, slashed\n    Glyphs[\"noteheadRoundWhiteSlashedLarge\"] = \"\\uE117\";\n    // U+E115  Round white notehead with dot\n    Glyphs[\"noteheadRoundWhiteWithDot\"] = \"\\uE115\";\n    // U+E112  Large round white notehead with dot\n    Glyphs[\"noteheadRoundWhiteWithDotLarge\"] = \"\\uE112\";\n    // U+E104  Large white diamond\n    Glyphs[\"noteheadSlashDiamondWhite\"] = \"\\uE104\";\n    // U+E101  Slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEnds\"] = \"\\uE101\";\n    // U+E108  Muted slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEndsMuted\"] = \"\\uE108\";\n    // U+E100  Slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEnds\"] = \"\\uE100\";\n    // U+E107  Muted slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEndsMuted\"] = \"\\uE107\";\n    // U+E105  Small slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEndsSmall\"] = \"\\uE105\";\n    // U+E10A  White slash double whole\n    Glyphs[\"noteheadSlashWhiteDoubleWhole\"] = \"\\uE10A\";\n    // U+E103  White slash half\n    Glyphs[\"noteheadSlashWhiteHalf\"] = \"\\uE103\";\n    // U+E109  Muted white slash\n    Glyphs[\"noteheadSlashWhiteMuted\"] = \"\\uE109\";\n    // U+E102  White slash whole\n    Glyphs[\"noteheadSlashWhiteWhole\"] = \"\\uE102\";\n    // U+E106  Large X notehead\n    Glyphs[\"noteheadSlashX\"] = \"\\uE106\";\n    // U+E0CF  Slashed black notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedBlack1\"] = \"\\uE0CF\";\n    // U+E0D0  Slashed black notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedBlack2\"] = \"\\uE0D0\";\n    // U+E0D5  Slashed double whole notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedDoubleWhole1\"] = \"\\uE0D5\";\n    // U+E0D6  Slashed double whole notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedDoubleWhole2\"] = \"\\uE0D6\";\n    // U+E0D1  Slashed half notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedHalf1\"] = \"\\uE0D1\";\n    // U+E0D2  Slashed half notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedHalf2\"] = \"\\uE0D2\";\n    // U+E0D3  Slashed whole notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedWhole1\"] = \"\\uE0D3\";\n    // U+E0D4  Slashed whole notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedWhole2\"] = \"\\uE0D4\";\n    // U+E0B9  Square notehead black\n    Glyphs[\"noteheadSquareBlack\"] = \"\\uE0B9\";\n    // U+E11A  Large square black notehead\n    Glyphs[\"noteheadSquareBlackLarge\"] = \"\\uE11A\";\n    // U+E11B  Large square white notehead\n    Glyphs[\"noteheadSquareBlackWhite\"] = \"\\uE11B\";\n    // U+E0B8  Square notehead white\n    Glyphs[\"noteheadSquareWhite\"] = \"\\uE0B8\";\n    // U+E0C7  Triangle notehead down black\n    Glyphs[\"noteheadTriangleDownBlack\"] = \"\\uE0C7\";\n    // U+E0C3  Triangle notehead down double whole\n    Glyphs[\"noteheadTriangleDownDoubleWhole\"] = \"\\uE0C3\";\n    // U+E0C5  Triangle notehead down half\n    Glyphs[\"noteheadTriangleDownHalf\"] = \"\\uE0C5\";\n    // U+E0C6  Triangle notehead down white\n    Glyphs[\"noteheadTriangleDownWhite\"] = \"\\uE0C6\";\n    // U+E0C4  Triangle notehead down whole\n    Glyphs[\"noteheadTriangleDownWhole\"] = \"\\uE0C4\";\n    // U+E0C0  Triangle notehead left black\n    Glyphs[\"noteheadTriangleLeftBlack\"] = \"\\uE0C0\";\n    // U+E0BF  Triangle notehead left white\n    Glyphs[\"noteheadTriangleLeftWhite\"] = \"\\uE0BF\";\n    // U+E0C2  Triangle notehead right black\n    Glyphs[\"noteheadTriangleRightBlack\"] = \"\\uE0C2\";\n    // U+E0C1  Triangle notehead right white\n    Glyphs[\"noteheadTriangleRightWhite\"] = \"\\uE0C1\";\n    // U+E0CD  Triangle-round notehead down black\n    Glyphs[\"noteheadTriangleRoundDownBlack\"] = \"\\uE0CD\";\n    // U+E0CC  Triangle-round notehead down white\n    Glyphs[\"noteheadTriangleRoundDownWhite\"] = \"\\uE0CC\";\n    // U+E0BE  Triangle notehead up black\n    Glyphs[\"noteheadTriangleUpBlack\"] = \"\\uE0BE\";\n    // U+E0BA  Triangle notehead up double whole\n    Glyphs[\"noteheadTriangleUpDoubleWhole\"] = \"\\uE0BA\";\n    // U+E0BC  Triangle notehead up half\n    Glyphs[\"noteheadTriangleUpHalf\"] = \"\\uE0BC\";\n    // U+E0C9  Triangle notehead up right black\n    Glyphs[\"noteheadTriangleUpRightBlack\"] = \"\\uE0C9\";\n    // U+E0C8  Triangle notehead up right white\n    Glyphs[\"noteheadTriangleUpRightWhite\"] = \"\\uE0C8\";\n    // U+E0BD  Triangle notehead up white\n    Glyphs[\"noteheadTriangleUpWhite\"] = \"\\uE0BD\";\n    // U+E0BB  Triangle notehead up whole\n    Glyphs[\"noteheadTriangleUpWhole\"] = \"\\uE0BB\";\n    // U+E0B7  Void notehead with X\n    Glyphs[\"noteheadVoidWithX\"] = \"\\uE0B7\";\n    // U+E0A2  Whole (semibreve) notehead\n    Glyphs[\"noteheadWhole\"] = \"\\uE0A2\";\n    // U+E0FA  Filled whole (semibreve) notehead\n    Glyphs[\"noteheadWholeFilled\"] = \"\\uE0FA\";\n    // U+E0B5  Whole notehead with X\n    Glyphs[\"noteheadWholeWithX\"] = \"\\uE0B5\";\n    // U+E0A9  X notehead black\n    Glyphs[\"noteheadXBlack\"] = \"\\uE0A9\";\n    // U+E0A6  X notehead double whole\n    Glyphs[\"noteheadXDoubleWhole\"] = \"\\uE0A6\";\n    // U+E0A8  X notehead half\n    Glyphs[\"noteheadXHalf\"] = \"\\uE0A8\";\n    // U+E0AA  Ornate X notehead\n    Glyphs[\"noteheadXOrnate\"] = \"\\uE0AA\";\n    // U+E0AB  Ornate X notehead in ellipse\n    Glyphs[\"noteheadXOrnateEllipse\"] = \"\\uE0AB\";\n    // U+E0A7  X notehead whole\n    Glyphs[\"noteheadXWhole\"] = \"\\uE0A7\";\n    // U+EC91  a (baseline)\n    Glyphs[\"octaveBaselineA\"] = \"\\uEC91\";\n    // U+EC93  b (baseline)\n    Glyphs[\"octaveBaselineB\"] = \"\\uEC93\";\n    // U+EC95  m (baseline)\n    Glyphs[\"octaveBaselineM\"] = \"\\uEC95\";\n    // U+EC97  v (baseline)\n    Glyphs[\"octaveBaselineV\"] = \"\\uEC97\";\n    // U+E51F  Bassa\n    Glyphs[\"octaveBassa\"] = \"\\uE51F\";\n    // U+EC90  Loco\n    Glyphs[\"octaveLoco\"] = \"\\uEC90\";\n    // U+E51A  Left parenthesis for octave signs\n    Glyphs[\"octaveParensLeft\"] = \"\\uE51A\";\n    // U+E51B  Right parenthesis for octave signs\n    Glyphs[\"octaveParensRight\"] = \"\\uE51B\";\n    // U+EC92  a (superscript)\n    Glyphs[\"octaveSuperscriptA\"] = \"\\uEC92\";\n    // U+EC94  b (superscript)\n    Glyphs[\"octaveSuperscriptB\"] = \"\\uEC94\";\n    // U+EC96  m (superscript)\n    Glyphs[\"octaveSuperscriptM\"] = \"\\uEC96\";\n    // U+EC98  v (superscript)\n    Glyphs[\"octaveSuperscriptV\"] = \"\\uEC98\";\n    // U+E233  One-handed roll (Stevens)\n    Glyphs[\"oneHandedRollStevens\"] = \"\\uE233\";\n    // U+EE2E  Two Fusae\n    Glyphs[\"organGerman2Fusae\"] = \"\\uEE2E\";\n    // U+EE2C  Two Minimae\n    Glyphs[\"organGerman2Minimae\"] = \"\\uEE2C\";\n    // U+EE19  Combining double octave line above\n    Glyphs[\"organGerman2OctaveUp\"] = \"\\uEE19\";\n    // U+EE2F  Two Semifusae\n    Glyphs[\"organGerman2Semifusae\"] = \"\\uEE2F\";\n    // U+EE2D  Two Semiminimae\n    Glyphs[\"organGerman2Semiminimae\"] = \"\\uEE2D\";\n    // U+EE32  Three Fusae\n    Glyphs[\"organGerman3Fusae\"] = \"\\uEE32\";\n    // U+EE30  Three Minimae\n    Glyphs[\"organGerman3Minimae\"] = \"\\uEE30\";\n    // U+EE33  Three Semifusae\n    Glyphs[\"organGerman3Semifusae\"] = \"\\uEE33\";\n    // U+EE31  Three Semiminimae\n    Glyphs[\"organGerman3Semiminimae\"] = \"\\uEE31\";\n    // U+EE36  Four Fusae\n    Glyphs[\"organGerman4Fusae\"] = \"\\uEE36\";\n    // U+EE34  Four Minimae\n    Glyphs[\"organGerman4Minimae\"] = \"\\uEE34\";\n    // U+EE37  Four Semifusae\n    Glyphs[\"organGerman4Semifusae\"] = \"\\uEE37\";\n    // U+EE35  Four Semiminimae\n    Glyphs[\"organGerman4Semiminimae\"] = \"\\uEE35\";\n    // U+EE3A  Five Fusae\n    Glyphs[\"organGerman5Fusae\"] = \"\\uEE3A\";\n    // U+EE38  Five Minimae\n    Glyphs[\"organGerman5Minimae\"] = \"\\uEE38\";\n    // U+EE3B  Five Semifusae\n    Glyphs[\"organGerman5Semifusae\"] = \"\\uEE3B\";\n    // U+EE39  Five Semiminimae\n    Glyphs[\"organGerman5Semiminimae\"] = \"\\uEE39\";\n    // U+EE3E  Six Fusae\n    Glyphs[\"organGerman6Fusae\"] = \"\\uEE3E\";\n    // U+EE3C  Six Minimae\n    Glyphs[\"organGerman6Minimae\"] = \"\\uEE3C\";\n    // U+EE3F  Six Semifusae\n    Glyphs[\"organGerman6Semifusae\"] = \"\\uEE3F\";\n    // U+EE3D  Six Semiminimae\n    Glyphs[\"organGerman6Semiminimae\"] = \"\\uEE3D\";\n    // U+EE15  German organ tablature small A\n    Glyphs[\"organGermanALower\"] = \"\\uEE15\";\n    // U+EE09  German organ tablature great A\n    Glyphs[\"organGermanAUpper\"] = \"\\uEE09\";\n    // U+EE1C  Rhythm Dot\n    Glyphs[\"organGermanAugmentationDot\"] = \"\\uEE1C\";\n    // U+EE16  German organ tablature small B\n    Glyphs[\"organGermanBLower\"] = \"\\uEE16\";\n    // U+EE0A  German organ tablature great B\n    Glyphs[\"organGermanBUpper\"] = \"\\uEE0A\";\n    // U+EE25  Brevis (Binary) Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerBrevis2\"] = \"\\uEE25\";\n    // U+EE24  Brevis (Ternary) Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerBrevis3\"] = \"\\uEE24\";\n    // U+EE1E  Minima Rest Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerMinimaRest\"] = \"\\uEE1E\";\n    // U+EE26  Semibrevis Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerSemibrevis\"] = \"\\uEE26\";\n    // U+EE1D  Semibrevis Rest Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerSemibrevisRest\"] = \"\\uEE1D\";\n    // U+EE0C  German organ tablature small C\n    Glyphs[\"organGermanCLower\"] = \"\\uEE0C\";\n    // U+EE00  German organ tablature great C\n    Glyphs[\"organGermanCUpper\"] = \"\\uEE00\";\n    // U+EE0D  German organ tablature small Cis\n    Glyphs[\"organGermanCisLower\"] = \"\\uEE0D\";\n    // U+EE01  German organ tablature great Cis\n    Glyphs[\"organGermanCisUpper\"] = \"\\uEE01\";\n    // U+EE0E  German organ tablature small D\n    Glyphs[\"organGermanDLower\"] = \"\\uEE0E\";\n    // U+EE02  German organ tablature great D\n    Glyphs[\"organGermanDUpper\"] = \"\\uEE02\";\n    // U+EE0F  German organ tablature small Dis\n    Glyphs[\"organGermanDisLower\"] = \"\\uEE0F\";\n    // U+EE03  German organ tablature great Dis\n    Glyphs[\"organGermanDisUpper\"] = \"\\uEE03\";\n    // U+EE10  German organ tablature small E\n    Glyphs[\"organGermanELower\"] = \"\\uEE10\";\n    // U+EE04  German organ tablature great E\n    Glyphs[\"organGermanEUpper\"] = \"\\uEE04\";\n    // U+EE11  German organ tablature small F\n    Glyphs[\"organGermanFLower\"] = \"\\uEE11\";\n    // U+EE05  German organ tablature great F\n    Glyphs[\"organGermanFUpper\"] = \"\\uEE05\";\n    // U+EE12  German organ tablature small Fis\n    Glyphs[\"organGermanFisLower\"] = \"\\uEE12\";\n    // U+EE06  German organ tablature great Fis\n    Glyphs[\"organGermanFisUpper\"] = \"\\uEE06\";\n    // U+EE2A  Fusa\n    Glyphs[\"organGermanFusa\"] = \"\\uEE2A\";\n    // U+EE22  Fusa Rest\n    Glyphs[\"organGermanFusaRest\"] = \"\\uEE22\";\n    // U+EE13  German organ tablature small G\n    Glyphs[\"organGermanGLower\"] = \"\\uEE13\";\n    // U+EE07  German organ tablature great G\n    Glyphs[\"organGermanGUpper\"] = \"\\uEE07\";\n    // U+EE14  German organ tablature small Gis\n    Glyphs[\"organGermanGisLower\"] = \"\\uEE14\";\n    // U+EE08  German organ tablature great Gis\n    Glyphs[\"organGermanGisUpper\"] = \"\\uEE08\";\n    // U+EE17  German organ tablature small H\n    Glyphs[\"organGermanHLower\"] = \"\\uEE17\";\n    // U+EE0B  German organ tablature great H\n    Glyphs[\"organGermanHUpper\"] = \"\\uEE0B\";\n    // U+EE28  Minima\n    Glyphs[\"organGermanMinima\"] = \"\\uEE28\";\n    // U+EE20  Minima Rest\n    Glyphs[\"organGermanMinimaRest\"] = \"\\uEE20\";\n    // U+EE1A  Combining single octave line below\n    Glyphs[\"organGermanOctaveDown\"] = \"\\uEE1A\";\n    // U+EE18  Combining single octave line above\n    Glyphs[\"organGermanOctaveUp\"] = \"\\uEE18\";\n    // U+EE27  Semibrevis\n    Glyphs[\"organGermanSemibrevis\"] = \"\\uEE27\";\n    // U+EE1F  Semibrevis Rest\n    Glyphs[\"organGermanSemibrevisRest\"] = \"\\uEE1F\";\n    // U+EE2B  Semifusa\n    Glyphs[\"organGermanSemifusa\"] = \"\\uEE2B\";\n    // U+EE23  Semifusa Rest\n    Glyphs[\"organGermanSemifusaRest\"] = \"\\uEE23\";\n    // U+EE29  Semiminima\n    Glyphs[\"organGermanSemiminima\"] = \"\\uEE29\";\n    // U+EE21  Semiminima Rest\n    Glyphs[\"organGermanSemiminimaRest\"] = \"\\uEE21\";\n    // U+EE1B  Tie\n    Glyphs[\"organGermanTie\"] = \"\\uEE1B\";\n    // U+E59A  Ornament bottom left concave stroke\n    Glyphs[\"ornamentBottomLeftConcaveStroke\"] = \"\\uE59A\";\n    // U+E59B  Ornament bottom left concave stroke, large\n    Glyphs[\"ornamentBottomLeftConcaveStrokeLarge\"] = \"\\uE59B\";\n    // U+E59C  Ornament bottom left convex stroke\n    Glyphs[\"ornamentBottomLeftConvexStroke\"] = \"\\uE59C\";\n    // U+E5A7  Ornament bottom right concave stroke\n    Glyphs[\"ornamentBottomRightConcaveStroke\"] = \"\\uE5A7\";\n    // U+E5A8  Ornament bottom right convex stroke\n    Glyphs[\"ornamentBottomRightConvexStroke\"] = \"\\uE5A8\";\n    // U+E581  Comma\n    Glyphs[\"ornamentComma\"] = \"\\uE581\";\n    // U+E57E  Double oblique straight lines NW-SE\n    Glyphs[\"ornamentDoubleObliqueLinesAfterNote\"] = \"\\uE57E\";\n    // U+E57D  Double oblique straight lines SW-NE\n    Glyphs[\"ornamentDoubleObliqueLinesBeforeNote\"] = \"\\uE57D\";\n    // U+E578  Curve below\n    Glyphs[\"ornamentDownCurve\"] = \"\\uE578\";\n    // U+E56F  Haydn ornament\n    Glyphs[\"ornamentHaydn\"] = \"\\uE56F\";\n    // U+E592  Ornament high left concave stroke\n    Glyphs[\"ornamentHighLeftConcaveStroke\"] = \"\\uE592\";\n    // U+E593  Ornament high left convex stroke\n    Glyphs[\"ornamentHighLeftConvexStroke\"] = \"\\uE593\";\n    // U+E5A2  Ornament high right concave stroke\n    Glyphs[\"ornamentHighRightConcaveStroke\"] = \"\\uE5A2\";\n    // U+E5A3  Ornament high right convex stroke\n    Glyphs[\"ornamentHighRightConvexStroke\"] = \"\\uE5A3\";\n    // U+E576  Hook after note\n    Glyphs[\"ornamentHookAfterNote\"] = \"\\uE576\";\n    // U+E575  Hook before note\n    Glyphs[\"ornamentHookBeforeNote\"] = \"\\uE575\";\n    // U+E572  Left-facing half circle\n    Glyphs[\"ornamentLeftFacingHalfCircle\"] = \"\\uE572\";\n    // U+E574  Left-facing hook\n    Glyphs[\"ornamentLeftFacingHook\"] = \"\\uE574\";\n    // U+E597  Ornament left +\n    Glyphs[\"ornamentLeftPlus\"] = \"\\uE597\";\n    // U+E596  Ornament left shake t\n    Glyphs[\"ornamentLeftShakeT\"] = \"\\uE596\";\n    // U+E594  Ornament left vertical stroke\n    Glyphs[\"ornamentLeftVerticalStroke\"] = \"\\uE594\";\n    // U+E595  Ornament left vertical stroke with cross (+)\n    Glyphs[\"ornamentLeftVerticalStrokeWithCross\"] = \"\\uE595\";\n    // U+E598  Ornament low left concave stroke\n    Glyphs[\"ornamentLowLeftConcaveStroke\"] = \"\\uE598\";\n    // U+E599  Ornament low left convex stroke\n    Glyphs[\"ornamentLowLeftConvexStroke\"] = \"\\uE599\";\n    // U+E5A5  Ornament low right concave stroke\n    Glyphs[\"ornamentLowRightConcaveStroke\"] = \"\\uE5A5\";\n    // U+E5A6  Ornament low right convex stroke\n    Glyphs[\"ornamentLowRightConvexStroke\"] = \"\\uE5A6\";\n    // U+E59F  Ornament middle vertical stroke\n    Glyphs[\"ornamentMiddleVerticalStroke\"] = \"\\uE59F\";\n    // U+E56D  Mordent\n    Glyphs[\"ornamentMordent\"] = \"\\uE56D\";\n    // U+E57C  Oblique straight line NW-SE\n    Glyphs[\"ornamentObliqueLineAfterNote\"] = \"\\uE57C\";\n    // U+E57B  Oblique straight line SW-NE\n    Glyphs[\"ornamentObliqueLineBeforeNote\"] = \"\\uE57B\";\n    // U+E580  Oblique straight line tilted NW-SE\n    Glyphs[\"ornamentObliqueLineHorizAfterNote\"] = \"\\uE580\";\n    // U+E57F  Oblique straight line tilted SW-NE\n    Glyphs[\"ornamentObliqueLineHorizBeforeNote\"] = \"\\uE57F\";\n    // U+EA21  Oriscus\n    Glyphs[\"ornamentOriscus\"] = \"\\uEA21\";\n    // U+E588  Pincé (Couperin)\n    Glyphs[\"ornamentPinceCouperin\"] = \"\\uE588\";\n    // U+E570  Port de voix\n    Glyphs[\"ornamentPortDeVoixV\"] = \"\\uE570\";\n    // U+E5B2  Supported appoggiatura trill\n    Glyphs[\"ornamentPrecompAppoggTrill\"] = \"\\uE5B2\";\n    // U+E5B3  Supported appoggiatura trill with two-note suffix\n    Glyphs[\"ornamentPrecompAppoggTrillSuffix\"] = \"\\uE5B3\";\n    // U+E5BE  Cadence\n    Glyphs[\"ornamentPrecompCadence\"] = \"\\uE5BE\";\n    // U+E5C1  Cadence with upper prefix\n    Glyphs[\"ornamentPrecompCadenceUpperPrefix\"] = \"\\uE5C1\";\n    // U+E5C2  Cadence with upper prefix and turn\n    Glyphs[\"ornamentPrecompCadenceUpperPrefixTurn\"] = \"\\uE5C2\";\n    // U+E5BF  Cadence with turn\n    Glyphs[\"ornamentPrecompCadenceWithTurn\"] = \"\\uE5BF\";\n    // U+E5B1  Descending slide\n    Glyphs[\"ornamentPrecompDescendingSlide\"] = \"\\uE5B1\";\n    // U+E5C0  Double cadence with lower prefix\n    Glyphs[\"ornamentPrecompDoubleCadenceLowerPrefix\"] = \"\\uE5C0\";\n    // U+E5C3  Double cadence with upper prefix\n    Glyphs[\"ornamentPrecompDoubleCadenceUpperPrefix\"] = \"\\uE5C3\";\n    // U+E5C4  Double cadence with upper prefix and turn\n    Glyphs[\"ornamentPrecompDoubleCadenceUpperPrefixTurn\"] = \"\\uE5C4\";\n    // U+E5C7  Inverted mordent with upper prefix\n    Glyphs[\"ornamentPrecompInvertedMordentUpperPrefix\"] = \"\\uE5C7\";\n    // U+E5C5  Mordent with release\n    Glyphs[\"ornamentPrecompMordentRelease\"] = \"\\uE5C5\";\n    // U+E5C6  Mordent with upper prefix\n    Glyphs[\"ornamentPrecompMordentUpperPrefix\"] = \"\\uE5C6\";\n    // U+E5BC  Pre-beat port de voix followed by multiple mordent (Dandrieu)\n    Glyphs[\"ornamentPrecompPortDeVoixMordent\"] = \"\\uE5BC\";\n    // U+E5B0  Slide\n    Glyphs[\"ornamentPrecompSlide\"] = \"\\uE5B0\";\n    // U+E5B8  Slide-trill with two-note suffix (J.S. Bach)\n    Glyphs[\"ornamentPrecompSlideTrillBach\"] = \"\\uE5B8\";\n    // U+E5B5  Slide-trill (D'Anglebert)\n    Glyphs[\"ornamentPrecompSlideTrillDAnglebert\"] = \"\\uE5B5\";\n    // U+E5B6  Slide-trill with one-note suffix (Marpurg)\n    Glyphs[\"ornamentPrecompSlideTrillMarpurg\"] = \"\\uE5B6\";\n    // U+E5B9  Slide-trill (Muffat)\n    Glyphs[\"ornamentPrecompSlideTrillMuffat\"] = \"\\uE5B9\";\n    // U+E5BA  Slide-trill with two-note suffix (Muffat)\n    Glyphs[\"ornamentPrecompSlideTrillSuffixMuffat\"] = \"\\uE5BA\";\n    // U+E5C8  Trill with lower suffix\n    Glyphs[\"ornamentPrecompTrillLowerSuffix\"] = \"\\uE5C8\";\n    // U+E5BB  Trill with two-note suffix (Dandrieu)\n    Glyphs[\"ornamentPrecompTrillSuffixDandrieu\"] = \"\\uE5BB\";\n    // U+E5BD  Trill with mordent\n    Glyphs[\"ornamentPrecompTrillWithMordent\"] = \"\\uE5BD\";\n    // U+E5B7  Turn-trill with two-note suffix (J.S. Bach)\n    Glyphs[\"ornamentPrecompTurnTrillBach\"] = \"\\uE5B7\";\n    // U+E5B4  Turn-trill (D'Anglebert)\n    Glyphs[\"ornamentPrecompTurnTrillDAnglebert\"] = \"\\uE5B4\";\n    // U+EA20  Quilisma\n    Glyphs[\"ornamentQuilisma\"] = \"\\uEA20\";\n    // U+E571  Right-facing half circle\n    Glyphs[\"ornamentRightFacingHalfCircle\"] = \"\\uE571\";\n    // U+E573  Right-facing hook\n    Glyphs[\"ornamentRightFacingHook\"] = \"\\uE573\";\n    // U+E5A4  Ornament right vertical stroke\n    Glyphs[\"ornamentRightVerticalStroke\"] = \"\\uE5A4\";\n    // U+E587  Schleifer (long mordent)\n    Glyphs[\"ornamentSchleifer\"] = \"\\uE587\";\n    // U+E582  Shake\n    Glyphs[\"ornamentShake3\"] = \"\\uE582\";\n    // U+E584  Shake (Muffat)\n    Glyphs[\"ornamentShakeMuffat1\"] = \"\\uE584\";\n    // U+E57A  Short oblique straight line NW-SE\n    Glyphs[\"ornamentShortObliqueLineAfterNote\"] = \"\\uE57A\";\n    // U+E579  Short oblique straight line SW-NE\n    Glyphs[\"ornamentShortObliqueLineBeforeNote\"] = \"\\uE579\";\n    // U+E56C  Short trill\n    Glyphs[\"ornamentShortTrill\"] = \"\\uE56C\";\n    // U+E590  Ornament top left concave stroke\n    Glyphs[\"ornamentTopLeftConcaveStroke\"] = \"\\uE590\";\n    // U+E591  Ornament top left convex stroke\n    Glyphs[\"ornamentTopLeftConvexStroke\"] = \"\\uE591\";\n    // U+E5A0  Ornament top right concave stroke\n    Glyphs[\"ornamentTopRightConcaveStroke\"] = \"\\uE5A0\";\n    // U+E5A1  Ornament top right convex stroke\n    Glyphs[\"ornamentTopRightConvexStroke\"] = \"\\uE5A1\";\n    // U+E56E  Tremblement\n    Glyphs[\"ornamentTremblement\"] = \"\\uE56E\";\n    // U+E589  Tremblement appuyé (Couperin)\n    Glyphs[\"ornamentTremblementCouperin\"] = \"\\uE589\";\n    // U+E566  Trill\n    Glyphs[\"ornamentTrill\"] = \"\\uE566\";\n    // U+E567  Turn\n    Glyphs[\"ornamentTurn\"] = \"\\uE567\";\n    // U+E568  Inverted turn\n    Glyphs[\"ornamentTurnInverted\"] = \"\\uE568\";\n    // U+E569  Turn with slash\n    Glyphs[\"ornamentTurnSlash\"] = \"\\uE569\";\n    // U+E56A  Turn up\n    Glyphs[\"ornamentTurnUp\"] = \"\\uE56A\";\n    // U+E56B  Inverted turn up\n    Glyphs[\"ornamentTurnUpS\"] = \"\\uE56B\";\n    // U+E577  Curve above\n    Glyphs[\"ornamentUpCurve\"] = \"\\uE577\";\n    // U+E583  Vertical line\n    Glyphs[\"ornamentVerticalLine\"] = \"\\uE583\";\n    // U+E59D  Ornament zig-zag line without right-hand end\n    Glyphs[\"ornamentZigZagLineNoRightEnd\"] = \"\\uE59D\";\n    // U+E59E  Ornament zig-zag line with right-hand end\n    Glyphs[\"ornamentZigZagLineWithRightEnd\"] = \"\\uE59E\";\n    // U+E510  Ottava\n    Glyphs[\"ottava\"] = \"\\uE510\";\n    // U+E511  Ottava alta\n    Glyphs[\"ottavaAlta\"] = \"\\uE511\";\n    // U+E512  Ottava bassa\n    Glyphs[\"ottavaBassa\"] = \"\\uE512\";\n    // U+E513  Ottava bassa (ba)\n    Glyphs[\"ottavaBassaBa\"] = \"\\uE513\";\n    // U+E51C  Ottava bassa (8vb)\n    Glyphs[\"ottavaBassaVb\"] = \"\\uE51C\";\n    // U+E22B  Penderecki unmeasured tremolo\n    Glyphs[\"pendereckiTremolo\"] = \"\\uE22B\";\n    // U+E717  Agogo\n    Glyphs[\"pictAgogo\"] = \"\\uE717\";\n    // U+E712  Almglocken\n    Glyphs[\"pictAlmglocken\"] = \"\\uE712\";\n    // U+E701  Anvil\n    Glyphs[\"pictAnvil\"] = \"\\uE701\";\n    // U+E6C3  Bamboo tube chimes\n    Glyphs[\"pictBambooChimes\"] = \"\\uE6C3\";\n    // U+E6FB  Bamboo scraper\n    Glyphs[\"pictBambooScraper\"] = \"\\uE6FB\";\n    // U+E6D4  Bass drum\n    Glyphs[\"pictBassDrum\"] = \"\\uE6D4\";\n    // U+E6D5  Bass drum on side\n    Glyphs[\"pictBassDrumOnSide\"] = \"\\uE6D5\";\n    // U+E7DE  Bow\n    Glyphs[\"pictBeaterBow\"] = \"\\uE7DE\";\n    // U+E7EB  Box for percussion beater\n    Glyphs[\"pictBeaterBox\"] = \"\\uE7EB\";\n    // U+E7DA  Brass mallets down\n    Glyphs[\"pictBeaterBrassMalletsDown\"] = \"\\uE7DA\";\n    // U+E7EE  Brass mallets left\n    Glyphs[\"pictBeaterBrassMalletsLeft\"] = \"\\uE7EE\";\n    // U+E7ED  Brass mallets right\n    Glyphs[\"pictBeaterBrassMalletsRight\"] = \"\\uE7ED\";\n    // U+E7D9  Brass mallets up\n    Glyphs[\"pictBeaterBrassMalletsUp\"] = \"\\uE7D9\";\n    // U+E7EA  Combining dashed circle for round beaters (plated)\n    Glyphs[\"pictBeaterCombiningDashedCircle\"] = \"\\uE7EA\";\n    // U+E7E9  Combining parentheses for round beaters (padded)\n    Glyphs[\"pictBeaterCombiningParentheses\"] = \"\\uE7E9\";\n    // U+E7A1  Double bass drum stick down\n    Glyphs[\"pictBeaterDoubleBassDrumDown\"] = \"\\uE7A1\";\n    // U+E7A0  Double bass drum stick up\n    Glyphs[\"pictBeaterDoubleBassDrumUp\"] = \"\\uE7A0\";\n    // U+E7E4  Finger\n    Glyphs[\"pictBeaterFinger\"] = \"\\uE7E4\";\n    // U+E7E6  Fingernails\n    Glyphs[\"pictBeaterFingernails\"] = \"\\uE7E6\";\n    // U+E7E5  Fist\n    Glyphs[\"pictBeaterFist\"] = \"\\uE7E5\";\n    // U+E7DD  Guiro scraper\n    Glyphs[\"pictBeaterGuiroScraper\"] = \"\\uE7DD\";\n    // U+E7E1  Hammer\n    Glyphs[\"pictBeaterHammer\"] = \"\\uE7E1\";\n    // U+E7D0  Metal hammer, down\n    Glyphs[\"pictBeaterHammerMetalDown\"] = \"\\uE7D0\";\n    // U+E7CF  Metal hammer, up\n    Glyphs[\"pictBeaterHammerMetalUp\"] = \"\\uE7CF\";\n    // U+E7CE  Plastic hammer, down\n    Glyphs[\"pictBeaterHammerPlasticDown\"] = \"\\uE7CE\";\n    // U+E7CD  Plastic hammer, up\n    Glyphs[\"pictBeaterHammerPlasticUp\"] = \"\\uE7CD\";\n    // U+E7CC  Wooden hammer, down\n    Glyphs[\"pictBeaterHammerWoodDown\"] = \"\\uE7CC\";\n    // U+E7CB  Wooden hammer, up\n    Glyphs[\"pictBeaterHammerWoodUp\"] = \"\\uE7CB\";\n    // U+E7E3  Hand\n    Glyphs[\"pictBeaterHand\"] = \"\\uE7E3\";\n    // U+E79D  Hard bass drum stick down\n    Glyphs[\"pictBeaterHardBassDrumDown\"] = \"\\uE79D\";\n    // U+E79C  Hard bass drum stick up\n    Glyphs[\"pictBeaterHardBassDrumUp\"] = \"\\uE79C\";\n    // U+E785  Hard glockenspiel stick down\n    Glyphs[\"pictBeaterHardGlockenspielDown\"] = \"\\uE785\";\n    // U+E787  Hard glockenspiel stick left\n    Glyphs[\"pictBeaterHardGlockenspielLeft\"] = \"\\uE787\";\n    // U+E786  Hard glockenspiel stick right\n    Glyphs[\"pictBeaterHardGlockenspielRight\"] = \"\\uE786\";\n    // U+E784  Hard glockenspiel stick up\n    Glyphs[\"pictBeaterHardGlockenspielUp\"] = \"\\uE784\";\n    // U+E791  Hard timpani stick down\n    Glyphs[\"pictBeaterHardTimpaniDown\"] = \"\\uE791\";\n    // U+E793  Hard timpani stick left\n    Glyphs[\"pictBeaterHardTimpaniLeft\"] = \"\\uE793\";\n    // U+E792  Hard timpani stick right\n    Glyphs[\"pictBeaterHardTimpaniRight\"] = \"\\uE792\";\n    // U+E790  Hard timpani stick up\n    Glyphs[\"pictBeaterHardTimpaniUp\"] = \"\\uE790\";\n    // U+E779  Hard xylophone stick down\n    Glyphs[\"pictBeaterHardXylophoneDown\"] = \"\\uE779\";\n    // U+E77B  Hard xylophone stick left\n    Glyphs[\"pictBeaterHardXylophoneLeft\"] = \"\\uE77B\";\n    // U+E77A  Hard xylophone stick right\n    Glyphs[\"pictBeaterHardXylophoneRight\"] = \"\\uE77A\";\n    // U+E778  Hard xylophone stick up\n    Glyphs[\"pictBeaterHardXylophoneUp\"] = \"\\uE778\";\n    // U+E7AB  Hard yarn beater down\n    Glyphs[\"pictBeaterHardYarnDown\"] = \"\\uE7AB\";\n    // U+E7AD  Hard yarn beater left\n    Glyphs[\"pictBeaterHardYarnLeft\"] = \"\\uE7AD\";\n    // U+E7AC  Hard yarn beater right\n    Glyphs[\"pictBeaterHardYarnRight\"] = \"\\uE7AC\";\n    // U+E7AA  Hard yarn beater up\n    Glyphs[\"pictBeaterHardYarnUp\"] = \"\\uE7AA\";\n    // U+E7D4  Jazz sticks down\n    Glyphs[\"pictBeaterJazzSticksDown\"] = \"\\uE7D4\";\n    // U+E7D3  Jazz sticks up\n    Glyphs[\"pictBeaterJazzSticksUp\"] = \"\\uE7D3\";\n    // U+E7E2  Knitting needle\n    Glyphs[\"pictBeaterKnittingNeedle\"] = \"\\uE7E2\";\n    // U+E7DF  Chime hammer up\n    Glyphs[\"pictBeaterMallet\"] = \"\\uE7DF\";\n    // U+E7EC  Chime hammer down\n    Glyphs[\"pictBeaterMalletDown\"] = \"\\uE7EC\";\n    // U+E79B  Medium bass drum stick down\n    Glyphs[\"pictBeaterMediumBassDrumDown\"] = \"\\uE79B\";\n    // U+E79A  Medium bass drum stick up\n    Glyphs[\"pictBeaterMediumBassDrumUp\"] = \"\\uE79A\";\n    // U+E78D  Medium timpani stick down\n    Glyphs[\"pictBeaterMediumTimpaniDown\"] = \"\\uE78D\";\n    // U+E78F  Medium timpani stick left\n    Glyphs[\"pictBeaterMediumTimpaniLeft\"] = \"\\uE78F\";\n    // U+E78E  Medium timpani stick right\n    Glyphs[\"pictBeaterMediumTimpaniRight\"] = \"\\uE78E\";\n    // U+E78C  Medium timpani stick up\n    Glyphs[\"pictBeaterMediumTimpaniUp\"] = \"\\uE78C\";\n    // U+E775  Medium xylophone stick down\n    Glyphs[\"pictBeaterMediumXylophoneDown\"] = \"\\uE775\";\n    // U+E777  Medium xylophone stick left\n    Glyphs[\"pictBeaterMediumXylophoneLeft\"] = \"\\uE777\";\n    // U+E776  Medium xylophone stick right\n    Glyphs[\"pictBeaterMediumXylophoneRight\"] = \"\\uE776\";\n    // U+E774  Medium xylophone stick up\n    Glyphs[\"pictBeaterMediumXylophoneUp\"] = \"\\uE774\";\n    // U+E7A7  Medium yarn beater down\n    Glyphs[\"pictBeaterMediumYarnDown\"] = \"\\uE7A7\";\n    // U+E7A9  Medium yarn beater left\n    Glyphs[\"pictBeaterMediumYarnLeft\"] = \"\\uE7A9\";\n    // U+E7A8  Medium yarn beater right\n    Glyphs[\"pictBeaterMediumYarnRight\"] = \"\\uE7A8\";\n    // U+E7A6  Medium yarn beater up\n    Glyphs[\"pictBeaterMediumYarnUp\"] = \"\\uE7A6\";\n    // U+E79F  Metal bass drum stick down\n    Glyphs[\"pictBeaterMetalBassDrumDown\"] = \"\\uE79F\";\n    // U+E79E  Metal bass drum stick up\n    Glyphs[\"pictBeaterMetalBassDrumUp\"] = \"\\uE79E\";\n    // U+E7C8  Metal beater down\n    Glyphs[\"pictBeaterMetalDown\"] = \"\\uE7C8\";\n    // U+E7E0  Metal hammer\n    Glyphs[\"pictBeaterMetalHammer\"] = \"\\uE7E0\";\n    // U+E7CA  Metal beater, left\n    Glyphs[\"pictBeaterMetalLeft\"] = \"\\uE7CA\";\n    // U+E7C9  Metal beater, right\n    Glyphs[\"pictBeaterMetalRight\"] = \"\\uE7C9\";\n    // U+E7C7  Metal beater, up\n    Glyphs[\"pictBeaterMetalUp\"] = \"\\uE7C7\";\n    // U+E7D2  Snare sticks down\n    Glyphs[\"pictBeaterSnareSticksDown\"] = \"\\uE7D2\";\n    // U+E7D1  Snare sticks up\n    Glyphs[\"pictBeaterSnareSticksUp\"] = \"\\uE7D1\";\n    // U+E799  Soft bass drum stick down\n    Glyphs[\"pictBeaterSoftBassDrumDown\"] = \"\\uE799\";\n    // U+E798  Soft bass drum stick up\n    Glyphs[\"pictBeaterSoftBassDrumUp\"] = \"\\uE798\";\n    // U+E781  Soft glockenspiel stick down\n    Glyphs[\"pictBeaterSoftGlockenspielDown\"] = \"\\uE781\";\n    // U+E783  Soft glockenspiel stick left\n    Glyphs[\"pictBeaterSoftGlockenspielLeft\"] = \"\\uE783\";\n    // U+E782  Soft glockenspiel stick right\n    Glyphs[\"pictBeaterSoftGlockenspielRight\"] = \"\\uE782\";\n    // U+E780  Soft glockenspiel stick up\n    Glyphs[\"pictBeaterSoftGlockenspielUp\"] = \"\\uE780\";\n    // U+E789  Soft timpani stick down\n    Glyphs[\"pictBeaterSoftTimpaniDown\"] = \"\\uE789\";\n    // U+E78B  Soft timpani stick left\n    Glyphs[\"pictBeaterSoftTimpaniLeft\"] = \"\\uE78B\";\n    // U+E78A  Soft timpani stick right\n    Glyphs[\"pictBeaterSoftTimpaniRight\"] = \"\\uE78A\";\n    // U+E788  Soft timpani stick up\n    Glyphs[\"pictBeaterSoftTimpaniUp\"] = \"\\uE788\";\n    // U+E7DB  Soft xylophone beaters\n    Glyphs[\"pictBeaterSoftXylophone\"] = \"\\uE7DB\";\n    // U+E771  Soft xylophone stick down\n    Glyphs[\"pictBeaterSoftXylophoneDown\"] = \"\\uE771\";\n    // U+E773  Soft xylophone stick left\n    Glyphs[\"pictBeaterSoftXylophoneLeft\"] = \"\\uE773\";\n    // U+E772  Soft xylophone stick right\n    Glyphs[\"pictBeaterSoftXylophoneRight\"] = \"\\uE772\";\n    // U+E770  Soft xylophone stick up\n    Glyphs[\"pictBeaterSoftXylophoneUp\"] = \"\\uE770\";\n    // U+E7A3  Soft yarn beater down\n    Glyphs[\"pictBeaterSoftYarnDown\"] = \"\\uE7A3\";\n    // U+E7A5  Soft yarn beater left\n    Glyphs[\"pictBeaterSoftYarnLeft\"] = \"\\uE7A5\";\n    // U+E7A4  Soft yarn beater right\n    Glyphs[\"pictBeaterSoftYarnRight\"] = \"\\uE7A4\";\n    // U+E7A2  Soft yarn beater up\n    Glyphs[\"pictBeaterSoftYarnUp\"] = \"\\uE7A2\";\n    // U+E7DC  Spoon-shaped wooden mallet\n    Glyphs[\"pictBeaterSpoonWoodenMallet\"] = \"\\uE7DC\";\n    // U+E7AF  Superball beater down\n    Glyphs[\"pictBeaterSuperballDown\"] = \"\\uE7AF\";\n    // U+E7B1  Superball beater left\n    Glyphs[\"pictBeaterSuperballLeft\"] = \"\\uE7B1\";\n    // U+E7B0  Superball beater right\n    Glyphs[\"pictBeaterSuperballRight\"] = \"\\uE7B0\";\n    // U+E7AE  Superball beater up\n    Glyphs[\"pictBeaterSuperballUp\"] = \"\\uE7AE\";\n    // U+E7D6  Triangle beater down\n    Glyphs[\"pictBeaterTriangleDown\"] = \"\\uE7D6\";\n    // U+E7EF  Triangle beater plain\n    Glyphs[\"pictBeaterTrianglePlain\"] = \"\\uE7EF\";\n    // U+E7D5  Triangle beater up\n    Glyphs[\"pictBeaterTriangleUp\"] = \"\\uE7D5\";\n    // U+E7D8  Wire brushes down\n    Glyphs[\"pictBeaterWireBrushesDown\"] = \"\\uE7D8\";\n    // U+E7D7  Wire brushes up\n    Glyphs[\"pictBeaterWireBrushesUp\"] = \"\\uE7D7\";\n    // U+E795  Wood timpani stick down\n    Glyphs[\"pictBeaterWoodTimpaniDown\"] = \"\\uE795\";\n    // U+E797  Wood timpani stick left\n    Glyphs[\"pictBeaterWoodTimpaniLeft\"] = \"\\uE797\";\n    // U+E796  Wood timpani stick right\n    Glyphs[\"pictBeaterWoodTimpaniRight\"] = \"\\uE796\";\n    // U+E794  Wood timpani stick up\n    Glyphs[\"pictBeaterWoodTimpaniUp\"] = \"\\uE794\";\n    // U+E77D  Wood xylophone stick down\n    Glyphs[\"pictBeaterWoodXylophoneDown\"] = \"\\uE77D\";\n    // U+E77F  Wood xylophone stick left\n    Glyphs[\"pictBeaterWoodXylophoneLeft\"] = \"\\uE77F\";\n    // U+E77E  Wood xylophone stick right\n    Glyphs[\"pictBeaterWoodXylophoneRight\"] = \"\\uE77E\";\n    // U+E77C  Wood xylophone stick up\n    Glyphs[\"pictBeaterWoodXylophoneUp\"] = \"\\uE77C\";\n    // U+E714  Bell\n    Glyphs[\"pictBell\"] = \"\\uE714\";\n    // U+E72A  Bell of cymbal\n    Glyphs[\"pictBellOfCymbal\"] = \"\\uE72A\";\n    // U+E713  Bell plate\n    Glyphs[\"pictBellPlate\"] = \"\\uE713\";\n    // U+E71A  Bell tree\n    Glyphs[\"pictBellTree\"] = \"\\uE71A\";\n    // U+E751  Bird whistle\n    Glyphs[\"pictBirdWhistle\"] = \"\\uE751\";\n    // U+E6F7  Board clapper\n    Glyphs[\"pictBoardClapper\"] = \"\\uE6F7\";\n    // U+E6DD  Bongos\n    Glyphs[\"pictBongos\"] = \"\\uE6DD\";\n    // U+E6E1  Brake drum\n    Glyphs[\"pictBrakeDrum\"] = \"\\uE6E1\";\n    // U+E743  Cabasa\n    Glyphs[\"pictCabasa\"] = \"\\uE743\";\n    // U+E761  Cannon\n    Glyphs[\"pictCannon\"] = \"\\uE761\";\n    // U+E755  Car horn\n    Glyphs[\"pictCarHorn\"] = \"\\uE755\";\n    // U+E6F8  Castanets\n    Glyphs[\"pictCastanets\"] = \"\\uE6F8\";\n    // U+E6F9  Castanets with handle\n    Glyphs[\"pictCastanetsWithHandle\"] = \"\\uE6F9\";\n    // U+E6B0  Celesta\n    Glyphs[\"pictCelesta\"] = \"\\uE6B0\";\n    // U+E716  Cencerro\n    Glyphs[\"pictCencerro\"] = \"\\uE716\";\n    // U+E7FE  Center (Weinberg)\n    Glyphs[\"pictCenter1\"] = \"\\uE7FE\";\n    // U+E7FF  Center (Ghent)\n    Glyphs[\"pictCenter2\"] = \"\\uE7FF\";\n    // U+E800  Center (Caltabiano)\n    Glyphs[\"pictCenter3\"] = \"\\uE800\";\n    // U+E748  Chain rattle\n    Glyphs[\"pictChainRattle\"] = \"\\uE748\";\n    // U+E6C2  Chimes\n    Glyphs[\"pictChimes\"] = \"\\uE6C2\";\n    // U+E726  Chinese cymbal\n    Glyphs[\"pictChineseCymbal\"] = \"\\uE726\";\n    // U+E805  Choke (Weinberg)\n    Glyphs[\"pictChokeCymbal\"] = \"\\uE805\";\n    // U+E6F2  Claves\n    Glyphs[\"pictClaves\"] = \"\\uE6F2\";\n    // U+E7E7  Coins\n    Glyphs[\"pictCoins\"] = \"\\uE7E7\";\n    // U+E6DE  Conga\n    Glyphs[\"pictConga\"] = \"\\uE6DE\";\n    // U+E711  Cow bell\n    Glyphs[\"pictCowBell\"] = \"\\uE711\";\n    // U+E720  Crash cymbals\n    Glyphs[\"pictCrashCymbals\"] = \"\\uE720\";\n    // U+E6AE  Crotales\n    Glyphs[\"pictCrotales\"] = \"\\uE6AE\";\n    // U+E80C  Combining crush for stem\n    Glyphs[\"pictCrushStem\"] = \"\\uE80C\";\n    // U+E6E4  Cuica\n    Glyphs[\"pictCuica\"] = \"\\uE6E4\";\n    // U+E728  Cymbal tongs\n    Glyphs[\"pictCymbalTongs\"] = \"\\uE728\";\n    // U+E7F9  Damp\n    Glyphs[\"pictDamp1\"] = \"\\uE7F9\";\n    // U+E7FA  Damp 2\n    Glyphs[\"pictDamp2\"] = \"\\uE7FA\";\n    // U+E7FB  Damp 3\n    Glyphs[\"pictDamp3\"] = \"\\uE7FB\";\n    // U+E7FC  Damp 4\n    Glyphs[\"pictDamp4\"] = \"\\uE7FC\";\n    // U+E80D  Combining X for stem (dead note)\n    Glyphs[\"pictDeadNoteStem\"] = \"\\uE80D\";\n    // U+E7E8  Drum stick\n    Glyphs[\"pictDrumStick\"] = \"\\uE7E8\";\n    // U+E757  Duck call\n    Glyphs[\"pictDuckCall\"] = \"\\uE757\";\n    // U+E729  Edge of cymbal\n    Glyphs[\"pictEdgeOfCymbal\"] = \"\\uE729\";\n    // U+E6A9  Empty trapezoid\n    Glyphs[\"pictEmptyTrap\"] = \"\\uE6A9\";\n    // U+E727  Finger cymbals\n    Glyphs[\"pictFingerCymbals\"] = \"\\uE727\";\n    // U+E740  Flexatone\n    Glyphs[\"pictFlexatone\"] = \"\\uE740\";\n    // U+E6F5  Football rattle\n    Glyphs[\"pictFootballRatchet\"] = \"\\uE6F5\";\n    // U+E765  Glass harmonica\n    Glyphs[\"pictGlassHarmonica\"] = \"\\uE765\";\n    // U+E764  Glass harp\n    Glyphs[\"pictGlassHarp\"] = \"\\uE764\";\n    // U+E6C6  Glass plate chimes\n    Glyphs[\"pictGlassPlateChimes\"] = \"\\uE6C6\";\n    // U+E6C5  Glass tube chimes\n    Glyphs[\"pictGlassTubeChimes\"] = \"\\uE6C5\";\n    // U+E6A0  Glockenspiel\n    Glyphs[\"pictGlsp\"] = \"\\uE6A0\";\n    // U+E6AA  Glockenspiel (Smith Brindle)\n    Glyphs[\"pictGlspSmithBrindle\"] = \"\\uE6AA\";\n    // U+E6E2  Goblet drum (djembe, dumbek)\n    Glyphs[\"pictGobletDrum\"] = \"\\uE6E2\";\n    // U+E732  Gong\n    Glyphs[\"pictGong\"] = \"\\uE732\";\n    // U+E733  Gong with button (nipple)\n    Glyphs[\"pictGongWithButton\"] = \"\\uE733\";\n    // U+E6F3  Guiro\n    Glyphs[\"pictGuiro\"] = \"\\uE6F3\";\n    // U+E7C4  Hard gum beater, down\n    Glyphs[\"pictGumHardDown\"] = \"\\uE7C4\";\n    // U+E7C6  Hard gum beater, left\n    Glyphs[\"pictGumHardLeft\"] = \"\\uE7C6\";\n    // U+E7C5  Hard gum beater, right\n    Glyphs[\"pictGumHardRight\"] = \"\\uE7C5\";\n    // U+E7C3  Hard gum beater, up\n    Glyphs[\"pictGumHardUp\"] = \"\\uE7C3\";\n    // U+E7C0  Medium gum beater, down\n    Glyphs[\"pictGumMediumDown\"] = \"\\uE7C0\";\n    // U+E7C2  Medium gum beater, left\n    Glyphs[\"pictGumMediumLeft\"] = \"\\uE7C2\";\n    // U+E7C1  Medium gum beater, right\n    Glyphs[\"pictGumMediumRight\"] = \"\\uE7C1\";\n    // U+E7BF  Medium gum beater, up\n    Glyphs[\"pictGumMediumUp\"] = \"\\uE7BF\";\n    // U+E7BC  Soft gum beater, down\n    Glyphs[\"pictGumSoftDown\"] = \"\\uE7BC\";\n    // U+E7BE  Soft gum beater, left\n    Glyphs[\"pictGumSoftLeft\"] = \"\\uE7BE\";\n    // U+E7BD  Soft gum beater, right\n    Glyphs[\"pictGumSoftRight\"] = \"\\uE7BD\";\n    // U+E7BB  Soft gum beater, up\n    Glyphs[\"pictGumSoftUp\"] = \"\\uE7BB\";\n    // U+E7F6  Half-open\n    Glyphs[\"pictHalfOpen1\"] = \"\\uE7F6\";\n    // U+E7F7  Half-open 2 (Weinberg)\n    Glyphs[\"pictHalfOpen2\"] = \"\\uE7F7\";\n    // U+E715  Handbell\n    Glyphs[\"pictHandbell\"] = \"\\uE715\";\n    // U+E722  Hi-hat\n    Glyphs[\"pictHiHat\"] = \"\\uE722\";\n    // U+E723  Hi-hat cymbals on stand\n    Glyphs[\"pictHiHatOnStand\"] = \"\\uE723\";\n    // U+E767  Jaw harp\n    Glyphs[\"pictJawHarp\"] = \"\\uE767\";\n    // U+E719  Jingle bells\n    Glyphs[\"pictJingleBells\"] = \"\\uE719\";\n    // U+E756  Klaxon horn\n    Glyphs[\"pictKlaxonHorn\"] = \"\\uE756\";\n    // U+E807  Right hand (Agostini)\n    Glyphs[\"pictLeftHandCircle\"] = \"\\uE807\";\n    // U+E763  Lion's roar\n    Glyphs[\"pictLionsRoar\"] = \"\\uE763\";\n    // U+E6B1  Lithophone\n    Glyphs[\"pictLithophone\"] = \"\\uE6B1\";\n    // U+E6DF  Log drum\n    Glyphs[\"pictLogDrum\"] = \"\\uE6DF\";\n    // U+E75A  Lotus flute\n    Glyphs[\"pictLotusFlute\"] = \"\\uE75A\";\n    // U+E6A6  Marimba\n    Glyphs[\"pictMar\"] = \"\\uE6A6\";\n    // U+E6AC  Marimba (Smith Brindle)\n    Glyphs[\"pictMarSmithBrindle\"] = \"\\uE6AC\";\n    // U+E741  Maraca\n    Glyphs[\"pictMaraca\"] = \"\\uE741\";\n    // U+E742  Maracas\n    Glyphs[\"pictMaracas\"] = \"\\uE742\";\n    // U+E759  Megaphone\n    Glyphs[\"pictMegaphone\"] = \"\\uE759\";\n    // U+E6C8  Metal plate chimes\n    Glyphs[\"pictMetalPlateChimes\"] = \"\\uE6C8\";\n    // U+E6C7  Metal tube chimes\n    Glyphs[\"pictMetalTubeChimes\"] = \"\\uE6C7\";\n    // U+E766  Musical saw\n    Glyphs[\"pictMusicalSaw\"] = \"\\uE766\";\n    // U+E804  Normal position (Caltabiano)\n    Glyphs[\"pictNormalPosition\"] = \"\\uE804\";\n    // U+E7F4  On rim\n    Glyphs[\"pictOnRim\"] = \"\\uE7F4\";\n    // U+E7F8  Open\n    Glyphs[\"pictOpen\"] = \"\\uE7F8\";\n    // U+E7F5  Closed / rim shot\n    Glyphs[\"pictOpenRimShot\"] = \"\\uE7F5\";\n    // U+E760  Pistol shot\n    Glyphs[\"pictPistolShot\"] = \"\\uE760\";\n    // U+E752  Police whistle\n    Glyphs[\"pictPoliceWhistle\"] = \"\\uE752\";\n    // U+E6FA  Quijada (jawbone)\n    Glyphs[\"pictQuijada\"] = \"\\uE6FA\";\n    // U+E747  Rainstick\n    Glyphs[\"pictRainstick\"] = \"\\uE747\";\n    // U+E6F4  Ratchet\n    Glyphs[\"pictRatchet\"] = \"\\uE6F4\";\n    // U+E6FC  Reco-reco\n    Glyphs[\"pictRecoReco\"] = \"\\uE6FC\";\n    // U+E806  Left hand (Agostini)\n    Glyphs[\"pictRightHandSquare\"] = \"\\uE806\";\n    // U+E801  Rim or edge (Weinberg)\n    Glyphs[\"pictRim1\"] = \"\\uE801\";\n    // U+E802  Rim (Ghent)\n    Glyphs[\"pictRim2\"] = \"\\uE802\";\n    // U+E803  Rim (Caltabiano)\n    Glyphs[\"pictRim3\"] = \"\\uE803\";\n    // U+E7FD  Rim shot for stem\n    Glyphs[\"pictRimShotOnStem\"] = \"\\uE7FD\";\n    // U+E762  Sandpaper blocks\n    Glyphs[\"pictSandpaperBlocks\"] = \"\\uE762\";\n    // U+E7F3  Scrape around rim (counter-clockwise)\n    Glyphs[\"pictScrapeAroundRim\"] = \"\\uE7F3\";\n    // U+E80E  Scrape around rim (clockwise)\n    Glyphs[\"pictScrapeAroundRimClockwise\"] = \"\\uE80E\";\n    // U+E7F1  Scrape from center to edge\n    Glyphs[\"pictScrapeCenterToEdge\"] = \"\\uE7F1\";\n    // U+E7F2  Scrape from edge to center\n    Glyphs[\"pictScrapeEdgeToCenter\"] = \"\\uE7F2\";\n    // U+E718  Shell bells\n    Glyphs[\"pictShellBells\"] = \"\\uE718\";\n    // U+E6C4  Shell chimes\n    Glyphs[\"pictShellChimes\"] = \"\\uE6C4\";\n    // U+E753  Siren\n    Glyphs[\"pictSiren\"] = \"\\uE753\";\n    // U+E746  Sistrum\n    Glyphs[\"pictSistrum\"] = \"\\uE746\";\n    // U+E724  Sizzle cymbal\n    Glyphs[\"pictSizzleCymbal\"] = \"\\uE724\";\n    // U+E710  Sleigh bell\n    Glyphs[\"pictSleighBell\"] = \"\\uE710\";\n    // U+E734  Slide brush on gong\n    Glyphs[\"pictSlideBrushOnGong\"] = \"\\uE734\";\n    // U+E750  Slide whistle\n    Glyphs[\"pictSlideWhistle\"] = \"\\uE750\";\n    // U+E6E0  Slit drum\n    Glyphs[\"pictSlitDrum\"] = \"\\uE6E0\";\n    // U+E6D1  Snare drum\n    Glyphs[\"pictSnareDrum\"] = \"\\uE6D1\";\n    // U+E6D3  Military snare drum\n    Glyphs[\"pictSnareDrumMilitary\"] = \"\\uE6D3\";\n    // U+E6D2  Snare drum, snares off\n    Glyphs[\"pictSnareDrumSnaresOff\"] = \"\\uE6D2\";\n    // U+E6AF  Steel drums\n    Glyphs[\"pictSteelDrums\"] = \"\\uE6AF\";\n    // U+E7F0  Stick shot\n    Glyphs[\"pictStickShot\"] = \"\\uE7F0\";\n    // U+E7B2  Superball\n    Glyphs[\"pictSuperball\"] = \"\\uE7B2\";\n    // U+E721  Suspended cymbal\n    Glyphs[\"pictSuspendedCymbal\"] = \"\\uE721\";\n    // U+E808  Combining swish for stem\n    Glyphs[\"pictSwishStem\"] = \"\\uE808\";\n    // U+E6E3  Indian tabla\n    Glyphs[\"pictTabla\"] = \"\\uE6E3\";\n    // U+E730  Tam-tam\n    Glyphs[\"pictTamTam\"] = \"\\uE730\";\n    // U+E731  Tam-tam with beater (Smith Brindle)\n    Glyphs[\"pictTamTamWithBeater\"] = \"\\uE731\";\n    // U+E6DB  Tambourine\n    Glyphs[\"pictTambourine\"] = \"\\uE6DB\";\n    // U+E6F1  Temple blocks\n    Glyphs[\"pictTempleBlocks\"] = \"\\uE6F1\";\n    // U+E6D6  Tenor drum\n    Glyphs[\"pictTenorDrum\"] = \"\\uE6D6\";\n    // U+E744  Thundersheet\n    Glyphs[\"pictThundersheet\"] = \"\\uE744\";\n    // U+E6DC  Timbales\n    Glyphs[\"pictTimbales\"] = \"\\uE6DC\";\n    // U+E6D0  Timpani\n    Glyphs[\"pictTimpani\"] = \"\\uE6D0\";\n    // U+E6D7  Tom-tom\n    Glyphs[\"pictTomTom\"] = \"\\uE6D7\";\n    // U+E6D8  Chinese tom-tom\n    Glyphs[\"pictTomTomChinese\"] = \"\\uE6D8\";\n    // U+E6DA  Indo-American tom tom\n    Glyphs[\"pictTomTomIndoAmerican\"] = \"\\uE6DA\";\n    // U+E6D9  Japanese tom-tom\n    Glyphs[\"pictTomTomJapanese\"] = \"\\uE6D9\";\n    // U+E700  Triangle\n    Glyphs[\"pictTriangle\"] = \"\\uE700\";\n    // U+E6B2  Tubaphone\n    Glyphs[\"pictTubaphone\"] = \"\\uE6B2\";\n    // U+E6C0  Tubular bells\n    Glyphs[\"pictTubularBells\"] = \"\\uE6C0\";\n    // U+E80A  Combining turn left for stem\n    Glyphs[\"pictTurnLeftStem\"] = \"\\uE80A\";\n    // U+E80B  Combining turn left or right for stem\n    Glyphs[\"pictTurnRightLeftStem\"] = \"\\uE80B\";\n    // U+E809  Combining turn right for stem\n    Glyphs[\"pictTurnRightStem\"] = \"\\uE809\";\n    // U+E6A7  Vibraphone\n    Glyphs[\"pictVib\"] = \"\\uE6A7\";\n    // U+E6A8  Metallophone (vibraphone motor off)\n    Glyphs[\"pictVibMotorOff\"] = \"\\uE6A8\";\n    // U+E6AD  Vibraphone (Smith Brindle)\n    Glyphs[\"pictVibSmithBrindle\"] = \"\\uE6AD\";\n    // U+E745  Vibraslap\n    Glyphs[\"pictVibraslap\"] = \"\\uE745\";\n    // U+E725  Vietnamese hat cymbal\n    Glyphs[\"pictVietnameseHat\"] = \"\\uE725\";\n    // U+E6F6  Whip\n    Glyphs[\"pictWhip\"] = \"\\uE6F6\";\n    // U+E6C1  Wind chimes (glass)\n    Glyphs[\"pictWindChimesGlass\"] = \"\\uE6C1\";\n    // U+E754  Wind machine\n    Glyphs[\"pictWindMachine\"] = \"\\uE754\";\n    // U+E758  Wind whistle (or mouth siren)\n    Glyphs[\"pictWindWhistle\"] = \"\\uE758\";\n    // U+E6F0  Wood block\n    Glyphs[\"pictWoodBlock\"] = \"\\uE6F0\";\n    // U+E7B4  Wound beater, hard core down\n    Glyphs[\"pictWoundHardDown\"] = \"\\uE7B4\";\n    // U+E7B6  Wound beater, hard core left\n    Glyphs[\"pictWoundHardLeft\"] = \"\\uE7B6\";\n    // U+E7B5  Wound beater, hard core right\n    Glyphs[\"pictWoundHardRight\"] = \"\\uE7B5\";\n    // U+E7B3  Wound beater, hard core up\n    Glyphs[\"pictWoundHardUp\"] = \"\\uE7B3\";\n    // U+E7B8  Wound beater, soft core down\n    Glyphs[\"pictWoundSoftDown\"] = \"\\uE7B8\";\n    // U+E7BA  Wound beater, soft core left\n    Glyphs[\"pictWoundSoftLeft\"] = \"\\uE7BA\";\n    // U+E7B9  Wound beater, soft core right\n    Glyphs[\"pictWoundSoftRight\"] = \"\\uE7B9\";\n    // U+E7B7  Wound beater, soft core up\n    Glyphs[\"pictWoundSoftUp\"] = \"\\uE7B7\";\n    // U+E6A1  Xylophone\n    Glyphs[\"pictXyl\"] = \"\\uE6A1\";\n    // U+E6A3  Bass xylophone\n    Glyphs[\"pictXylBass\"] = \"\\uE6A3\";\n    // U+E6AB  Xylophone (Smith Brindle)\n    Glyphs[\"pictXylSmithBrindle\"] = \"\\uE6AB\";\n    // U+E6A2  Tenor xylophone\n    Glyphs[\"pictXylTenor\"] = \"\\uE6A2\";\n    // U+E6A5  Trough tenor xylophone\n    Glyphs[\"pictXylTenorTrough\"] = \"\\uE6A5\";\n    // U+E6A4  Trough xylophone\n    Glyphs[\"pictXylTrough\"] = \"\\uE6A4\";\n    // U+E632  Buzz pizzicato\n    Glyphs[\"pluckedBuzzPizzicato\"] = \"\\uE632\";\n    // U+E638  Damp\n    Glyphs[\"pluckedDamp\"] = \"\\uE638\";\n    // U+E639  Damp all\n    Glyphs[\"pluckedDampAll\"] = \"\\uE639\";\n    // U+E63B  Damp for stem\n    Glyphs[\"pluckedDampOnStem\"] = \"\\uE63B\";\n    // U+E637  Fingernail flick\n    Glyphs[\"pluckedFingernailFlick\"] = \"\\uE637\";\n    // U+E633  Left-hand pizzicato\n    Glyphs[\"pluckedLeftHandPizzicato\"] = \"\\uE633\";\n    // U+E63A  Plectrum\n    Glyphs[\"pluckedPlectrum\"] = \"\\uE63A\";\n    // U+E631  Snap pizzicato above\n    Glyphs[\"pluckedSnapPizzicatoAbove\"] = \"\\uE631\";\n    // U+E630  Snap pizzicato below\n    Glyphs[\"pluckedSnapPizzicatoBelow\"] = \"\\uE630\";\n    // U+E636  With fingernails\n    Glyphs[\"pluckedWithFingernails\"] = \"\\uE636\";\n    // U+E514  Quindicesima\n    Glyphs[\"quindicesima\"] = \"\\uE514\";\n    // U+E515  Quindicesima alta\n    Glyphs[\"quindicesimaAlta\"] = \"\\uE515\";\n    // U+E516  Quindicesima bassa\n    Glyphs[\"quindicesimaBassa\"] = \"\\uE516\";\n    // U+E51D  Quindicesima bassa (mb)\n    Glyphs[\"quindicesimaBassaMb\"] = \"\\uE51D\";\n    // U+E500  Repeat last bar\n    Glyphs[\"repeat1Bar\"] = \"\\uE500\";\n    // U+E501  Repeat last two bars\n    Glyphs[\"repeat2Bars\"] = \"\\uE501\";\n    // U+E502  Repeat last four bars\n    Glyphs[\"repeat4Bars\"] = \"\\uE502\";\n    // U+E505  Repeat bar lower dot\n    Glyphs[\"repeatBarLowerDot\"] = \"\\uE505\";\n    // U+E504  Repeat bar slash\n    Glyphs[\"repeatBarSlash\"] = \"\\uE504\";\n    // U+E503  Repeat bar upper dot\n    Glyphs[\"repeatBarUpperDot\"] = \"\\uE503\";\n    // U+E044  Single repeat dot\n    Glyphs[\"repeatDot\"] = \"\\uE044\";\n    // U+E043  Repeat dots\n    Glyphs[\"repeatDots\"] = \"\\uE043\";\n    // U+E040  Left (start) repeat sign\n    Glyphs[\"repeatLeft\"] = \"\\uE040\";\n    // U+E041  Right (end) repeat sign\n    Glyphs[\"repeatRight\"] = \"\\uE041\";\n    // U+E042  Right and left repeat sign\n    Glyphs[\"repeatRightLeft\"] = \"\\uE042\";\n    // U+E4ED  1024th rest\n    Glyphs[\"rest1024th\"] = \"\\uE4ED\";\n    // U+E4EA  128th (semihemidemisemiquaver) rest\n    Glyphs[\"rest128th\"] = \"\\uE4EA\";\n    // U+E4E7  16th (semiquaver) rest\n    Glyphs[\"rest16th\"] = \"\\uE4E7\";\n    // U+E4EB  256th rest\n    Glyphs[\"rest256th\"] = \"\\uE4EB\";\n    // U+E4E8  32nd (demisemiquaver) rest\n    Glyphs[\"rest32nd\"] = \"\\uE4E8\";\n    // U+E4EC  512th rest\n    Glyphs[\"rest512th\"] = \"\\uE4EC\";\n    // U+E4E9  64th (hemidemisemiquaver) rest\n    Glyphs[\"rest64th\"] = \"\\uE4E9\";\n    // U+E4E6  Eighth (quaver) rest\n    Glyphs[\"rest8th\"] = \"\\uE4E6\";\n    // U+E4E2  Double whole (breve) rest\n    Glyphs[\"restDoubleWhole\"] = \"\\uE4E2\";\n    // U+E4F3  Double whole rest on leger lines\n    Glyphs[\"restDoubleWholeLegerLine\"] = \"\\uE4F3\";\n    // U+E4EE  Multiple measure rest\n    Glyphs[\"restHBar\"] = \"\\uE4EE\";\n    // U+E4EF  H-bar, left half\n    Glyphs[\"restHBarLeft\"] = \"\\uE4EF\";\n    // U+E4F0  H-bar, middle\n    Glyphs[\"restHBarMiddle\"] = \"\\uE4F0\";\n    // U+E4F1  H-bar, right half\n    Glyphs[\"restHBarRight\"] = \"\\uE4F1\";\n    // U+E4E4  Half (minim) rest\n    Glyphs[\"restHalf\"] = \"\\uE4E4\";\n    // U+E4F5  Half rest on leger line\n    Glyphs[\"restHalfLegerLine\"] = \"\\uE4F5\";\n    // U+E4E1  Longa rest\n    Glyphs[\"restLonga\"] = \"\\uE4E1\";\n    // U+E4E0  Maxima rest\n    Glyphs[\"restMaxima\"] = \"\\uE4E0\";\n    // U+E4E5  Quarter (crotchet) rest\n    Glyphs[\"restQuarter\"] = \"\\uE4E5\";\n    // U+E4F2  Old-style quarter (crotchet) rest\n    Glyphs[\"restQuarterOld\"] = \"\\uE4F2\";\n    // U+E4F6  Z-style quarter (crotchet) rest\n    Glyphs[\"restQuarterZ\"] = \"\\uE4F6\";\n    // U+E4E3  Whole (semibreve) rest\n    Glyphs[\"restWhole\"] = \"\\uE4E3\";\n    // U+E4F4  Whole rest on leger line\n    Glyphs[\"restWholeLegerLine\"] = \"\\uE4F4\";\n    // U+E001  Reversed brace\n    Glyphs[\"reversedBrace\"] = \"\\uE001\";\n    // U+E006  Reversed bracket bottom\n    Glyphs[\"reversedBracketBottom\"] = \"\\uE006\";\n    // U+E005  Reversed bracket top\n    Glyphs[\"reversedBracketTop\"] = \"\\uE005\";\n    // U+E04D  Right repeat sign within bar\n    Glyphs[\"rightRepeatSmall\"] = \"\\uE04D\";\n    // U+EF00  Scale degree 1\n    Glyphs[\"scaleDegree1\"] = \"\\uEF00\";\n    // U+EF01  Scale degree 2\n    Glyphs[\"scaleDegree2\"] = \"\\uEF01\";\n    // U+EF02  Scale degree 3\n    Glyphs[\"scaleDegree3\"] = \"\\uEF02\";\n    // U+EF03  Scale degree 4\n    Glyphs[\"scaleDegree4\"] = \"\\uEF03\";\n    // U+EF04  Scale degree 5\n    Glyphs[\"scaleDegree5\"] = \"\\uEF04\";\n    // U+EF05  Scale degree 6\n    Glyphs[\"scaleDegree6\"] = \"\\uEF05\";\n    // U+EF06  Scale degree 7\n    Glyphs[\"scaleDegree7\"] = \"\\uEF06\";\n    // U+EF07  Scale degree 8\n    Glyphs[\"scaleDegree8\"] = \"\\uEF07\";\n    // U+EF08  Scale degree 9\n    Glyphs[\"scaleDegree9\"] = \"\\uEF08\";\n    // U+E06F  Schäffer clef\n    Glyphs[\"schaefferClef\"] = \"\\uE06F\";\n    // U+E072  Schäffer F clef to G clef change\n    Glyphs[\"schaefferFClefToGClef\"] = \"\\uE072\";\n    // U+E071  Schäffer G clef to F clef change\n    Glyphs[\"schaefferGClefToFClef\"] = \"\\uE071\";\n    // U+E070  Schäffer previous clef\n    Glyphs[\"schaefferPreviousClef\"] = \"\\uE070\";\n    // U+E047  Segno\n    Glyphs[\"segno\"] = \"\\uE047\";\n    // U+E04A  Segno (serpent)\n    Glyphs[\"segnoSerpent1\"] = \"\\uE04A\";\n    // U+E04B  Segno (serpent with vertical lines)\n    Glyphs[\"segnoSerpent2\"] = \"\\uE04B\";\n    // U+E06B  Semi-pitched percussion clef 1\n    Glyphs[\"semipitchedPercussionClef1\"] = \"\\uE06B\";\n    // U+E06C  Semi-pitched percussion clef 2\n    Glyphs[\"semipitchedPercussionClef2\"] = \"\\uE06C\";\n    // U+EC52  Flat\n    Glyphs[\"smnFlat\"] = \"\\uEC52\";\n    // U+EC53  Flat (white)\n    Glyphs[\"smnFlatWhite\"] = \"\\uEC53\";\n    // U+EC57  Double flat history sign\n    Glyphs[\"smnHistoryDoubleFlat\"] = \"\\uEC57\";\n    // U+EC55  Double sharp history sign\n    Glyphs[\"smnHistoryDoubleSharp\"] = \"\\uEC55\";\n    // U+EC56  Flat history sign\n    Glyphs[\"smnHistoryFlat\"] = \"\\uEC56\";\n    // U+EC54  Sharp history sign\n    Glyphs[\"smnHistorySharp\"] = \"\\uEC54\";\n    // U+EC58  Natural (N)\n    Glyphs[\"smnNatural\"] = \"\\uEC58\";\n    // U+EC50  Sharp stem up\n    Glyphs[\"smnSharp\"] = \"\\uEC50\";\n    // U+EC59  Sharp stem down\n    Glyphs[\"smnSharpDown\"] = \"\\uEC59\";\n    // U+EC51  Sharp (white) stem up\n    Glyphs[\"smnSharpWhite\"] = \"\\uEC51\";\n    // U+EC5A  Sharp (white) stem down\n    Glyphs[\"smnSharpWhiteDown\"] = \"\\uEC5A\";\n    // U+E00A  Split bar divider (bar spans a system break)\n    Glyphs[\"splitBarDivider\"] = \"\\uE00A\";\n    // U+E010  1-line staff\n    Glyphs[\"staff1Line\"] = \"\\uE010\";\n    // U+E01C  1-line staff (narrow)\n    Glyphs[\"staff1LineNarrow\"] = \"\\uE01C\";\n    // U+E016  1-line staff (wide)\n    Glyphs[\"staff1LineWide\"] = \"\\uE016\";\n    // U+E011  2-line staff\n    Glyphs[\"staff2Lines\"] = \"\\uE011\";\n    // U+E01D  2-line staff (narrow)\n    Glyphs[\"staff2LinesNarrow\"] = \"\\uE01D\";\n    // U+E017  2-line staff (wide)\n    Glyphs[\"staff2LinesWide\"] = \"\\uE017\";\n    // U+E012  3-line staff\n    Glyphs[\"staff3Lines\"] = \"\\uE012\";\n    // U+E01E  3-line staff (narrow)\n    Glyphs[\"staff3LinesNarrow\"] = \"\\uE01E\";\n    // U+E018  3-line staff (wide)\n    Glyphs[\"staff3LinesWide\"] = \"\\uE018\";\n    // U+E013  4-line staff\n    Glyphs[\"staff4Lines\"] = \"\\uE013\";\n    // U+E01F  4-line staff (narrow)\n    Glyphs[\"staff4LinesNarrow\"] = \"\\uE01F\";\n    // U+E019  4-line staff (wide)\n    Glyphs[\"staff4LinesWide\"] = \"\\uE019\";\n    // U+E014  5-line staff\n    Glyphs[\"staff5Lines\"] = \"\\uE014\";\n    // U+E020  5-line staff (narrow)\n    Glyphs[\"staff5LinesNarrow\"] = \"\\uE020\";\n    // U+E01A  5-line staff (wide)\n    Glyphs[\"staff5LinesWide\"] = \"\\uE01A\";\n    // U+E015  6-line staff\n    Glyphs[\"staff6Lines\"] = \"\\uE015\";\n    // U+E021  6-line staff (narrow)\n    Glyphs[\"staff6LinesNarrow\"] = \"\\uE021\";\n    // U+E01B  6-line staff (wide)\n    Glyphs[\"staff6LinesWide\"] = \"\\uE01B\";\n    // U+E00B  Staff divide arrow down\n    Glyphs[\"staffDivideArrowDown\"] = \"\\uE00B\";\n    // U+E00C  Staff divide arrow up\n    Glyphs[\"staffDivideArrowUp\"] = \"\\uE00C\";\n    // U+E00D  Staff divide arrows\n    Glyphs[\"staffDivideArrowUpDown\"] = \"\\uE00D\";\n    // U+EB98  Lower 1 staff position\n    Glyphs[\"staffPosLower1\"] = \"\\uEB98\";\n    // U+EB99  Lower 2 staff positions\n    Glyphs[\"staffPosLower2\"] = \"\\uEB99\";\n    // U+EB9A  Lower 3 staff positions\n    Glyphs[\"staffPosLower3\"] = \"\\uEB9A\";\n    // U+EB9B  Lower 4 staff positions\n    Glyphs[\"staffPosLower4\"] = \"\\uEB9B\";\n    // U+EB9C  Lower 5 staff positions\n    Glyphs[\"staffPosLower5\"] = \"\\uEB9C\";\n    // U+EB9D  Lower 6 staff positions\n    Glyphs[\"staffPosLower6\"] = \"\\uEB9D\";\n    // U+EB9E  Lower 7 staff positions\n    Glyphs[\"staffPosLower7\"] = \"\\uEB9E\";\n    // U+EB9F  Lower 8 staff positions\n    Glyphs[\"staffPosLower8\"] = \"\\uEB9F\";\n    // U+EB90  Raise 1 staff position\n    Glyphs[\"staffPosRaise1\"] = \"\\uEB90\";\n    // U+EB91  Raise 2 staff positions\n    Glyphs[\"staffPosRaise2\"] = \"\\uEB91\";\n    // U+EB92  Raise 3 staff positions\n    Glyphs[\"staffPosRaise3\"] = \"\\uEB92\";\n    // U+EB93  Raise 4 staff positions\n    Glyphs[\"staffPosRaise4\"] = \"\\uEB93\";\n    // U+EB94  Raise 5 staff positions\n    Glyphs[\"staffPosRaise5\"] = \"\\uEB94\";\n    // U+EB95  Raise 6 staff positions\n    Glyphs[\"staffPosRaise6\"] = \"\\uEB95\";\n    // U+EB96  Raise 7 staff positions\n    Glyphs[\"staffPosRaise7\"] = \"\\uEB96\";\n    // U+EB97  Raise 8 staff positions\n    Glyphs[\"staffPosRaise8\"] = \"\\uEB97\";\n    // U+E210  Combining stem\n    Glyphs[\"stem\"] = \"\\uE210\";\n    // U+E215  Combining bow on bridge stem\n    Glyphs[\"stemBowOnBridge\"] = \"\\uE215\";\n    // U+E216  Combining bow on tailpiece stem\n    Glyphs[\"stemBowOnTailpiece\"] = \"\\uE216\";\n    // U+E217  Combining buzz roll stem\n    Glyphs[\"stemBuzzRoll\"] = \"\\uE217\";\n    // U+E218  Combining damp stem\n    Glyphs[\"stemDamp\"] = \"\\uE218\";\n    // U+E21F  Combining harp string noise stem\n    Glyphs[\"stemHarpStringNoise\"] = \"\\uE21F\";\n    // U+E21A  Combining multiphonics (black) stem\n    Glyphs[\"stemMultiphonicsBlack\"] = \"\\uE21A\";\n    // U+E21C  Combining multiphonics (black and white) stem\n    Glyphs[\"stemMultiphonicsBlackWhite\"] = \"\\uE21C\";\n    // U+E21B  Combining multiphonics (white) stem\n    Glyphs[\"stemMultiphonicsWhite\"] = \"\\uE21B\";\n    // U+E213  Combining Penderecki unmeasured tremolo stem\n    Glyphs[\"stemPendereckiTremolo\"] = \"\\uE213\";\n    // U+E21E  Combining rim shot stem\n    Glyphs[\"stemRimShot\"] = \"\\uE21E\";\n    // U+E211  Combining sprechgesang stem\n    Glyphs[\"stemSprechgesang\"] = \"\\uE211\";\n    // U+E214  Combining sul ponticello (bow behind bridge) stem\n    Glyphs[\"stemSulPonticello\"] = \"\\uE214\";\n    // U+E21D  Combining sussurando stem\n    Glyphs[\"stemSussurando\"] = \"\\uE21D\";\n    // U+E212  Combining swished stem\n    Glyphs[\"stemSwished\"] = \"\\uE212\";\n    // U+E219  Combining vibrato pulse accent (Saunders) stem\n    Glyphs[\"stemVibratoPulse\"] = \"\\uE219\";\n    // U+E232  Stockhausen irregular tremolo (\"Morsen\", like Morse code)\n    Glyphs[\"stockhausenTremolo\"] = \"\\uE232\";\n    // U+E618  Bow behind bridge (sul ponticello)\n    Glyphs[\"stringsBowBehindBridge\"] = \"\\uE618\";\n    // U+E62A  Bow behind bridge on four strings\n    Glyphs[\"stringsBowBehindBridgeFourStrings\"] = \"\\uE62A\";\n    // U+E627  Bow behind bridge on one string\n    Glyphs[\"stringsBowBehindBridgeOneString\"] = \"\\uE627\";\n    // U+E629  Bow behind bridge on three strings\n    Glyphs[\"stringsBowBehindBridgeThreeStrings\"] = \"\\uE629\";\n    // U+E628  Bow behind bridge on two strings\n    Glyphs[\"stringsBowBehindBridgeTwoStrings\"] = \"\\uE628\";\n    // U+E619  Bow on top of bridge\n    Glyphs[\"stringsBowOnBridge\"] = \"\\uE619\";\n    // U+E61A  Bow on tailpiece\n    Glyphs[\"stringsBowOnTailpiece\"] = \"\\uE61A\";\n    // U+E626  Change bow direction, indeterminate\n    Glyphs[\"stringsChangeBowDirection\"] = \"\\uE626\";\n    // U+E610  Down bow\n    Glyphs[\"stringsDownBow\"] = \"\\uE610\";\n    // U+EE82  Down bow, away from body\n    Glyphs[\"stringsDownBowAwayFromBody\"] = \"\\uEE82\";\n    // U+EE84  Down bow, beyond bridge\n    Glyphs[\"stringsDownBowBeyondBridge\"] = \"\\uEE84\";\n    // U+EE80  Down bow, towards body\n    Glyphs[\"stringsDownBowTowardsBody\"] = \"\\uEE80\";\n    // U+E611  Turned down bow\n    Glyphs[\"stringsDownBowTurned\"] = \"\\uE611\";\n    // U+E622  Fouetté\n    Glyphs[\"stringsFouette\"] = \"\\uE622\";\n    // U+E615  Half-harmonic\n    Glyphs[\"stringsHalfHarmonic\"] = \"\\uE615\";\n    // U+E614  Harmonic\n    Glyphs[\"stringsHarmonic\"] = \"\\uE614\";\n    // U+E620  Jeté (gettato) above\n    Glyphs[\"stringsJeteAbove\"] = \"\\uE620\";\n    // U+E621  Jeté (gettato) below\n    Glyphs[\"stringsJeteBelow\"] = \"\\uE621\";\n    // U+E617  Mute off\n    Glyphs[\"stringsMuteOff\"] = \"\\uE617\";\n    // U+E616  Mute on\n    Glyphs[\"stringsMuteOn\"] = \"\\uE616\";\n    // U+E61B  Overpressure, down bow\n    Glyphs[\"stringsOverpressureDownBow\"] = \"\\uE61B\";\n    // U+E61F  Overpressure, no bow direction\n    Glyphs[\"stringsOverpressureNoDirection\"] = \"\\uE61F\";\n    // U+E61D  Overpressure possibile, down bow\n    Glyphs[\"stringsOverpressurePossibileDownBow\"] = \"\\uE61D\";\n    // U+E61E  Overpressure possibile, up bow\n    Glyphs[\"stringsOverpressurePossibileUpBow\"] = \"\\uE61E\";\n    // U+E61C  Overpressure, up bow\n    Glyphs[\"stringsOverpressureUpBow\"] = \"\\uE61C\";\n    // U+EE88  Scrape, circular clockwise\n    Glyphs[\"stringsScrapeCircularClockwise\"] = \"\\uEE88\";\n    // U+EE89  Scrape, circular counter-clockwise\n    Glyphs[\"stringsScrapeCircularCounterclockwise\"] = \"\\uEE89\";\n    // U+EE86  Scrape, parallel inward\n    Glyphs[\"stringsScrapeParallelInward\"] = \"\\uEE86\";\n    // U+EE87  Scrape, parallel outward\n    Glyphs[\"stringsScrapeParallelOutward\"] = \"\\uEE87\";\n    // U+E624  Thumb position\n    Glyphs[\"stringsThumbPosition\"] = \"\\uE624\";\n    // U+E625  Turned thumb position\n    Glyphs[\"stringsThumbPositionTurned\"] = \"\\uE625\";\n    // U+EE8A  Triple chop, inward\n    Glyphs[\"stringsTripleChopInward\"] = \"\\uEE8A\";\n    // U+EE8B  Triple chop, outward\n    Glyphs[\"stringsTripleChopOutward\"] = \"\\uEE8B\";\n    // U+E612  Up bow\n    Glyphs[\"stringsUpBow\"] = \"\\uE612\";\n    // U+EE83  Up bow, away from body\n    Glyphs[\"stringsUpBowAwayFromBody\"] = \"\\uEE83\";\n    // U+EE85  Up bow, beyond bridge\n    Glyphs[\"stringsUpBowBeyondBridge\"] = \"\\uEE85\";\n    // U+EE81  Up bow, towards body\n    Glyphs[\"stringsUpBowTowardsBody\"] = \"\\uEE81\";\n    // U+E613  Turned up bow\n    Glyphs[\"stringsUpBowTurned\"] = \"\\uE613\";\n    // U+E623  Vibrato pulse accent (Saunders) for stem\n    Glyphs[\"stringsVibratoPulse\"] = \"\\uE623\";\n    // U+EE72  Swiss rudiments doublé black notehead\n    Glyphs[\"swissRudimentsNoteheadBlackDouble\"] = \"\\uEE72\";\n    // U+EE70  Swiss rudiments flam black notehead\n    Glyphs[\"swissRudimentsNoteheadBlackFlam\"] = \"\\uEE70\";\n    // U+EE73  Swiss rudiments doublé half (minim) notehead\n    Glyphs[\"swissRudimentsNoteheadHalfDouble\"] = \"\\uEE73\";\n    // U+EE71  Swiss rudiments flam half (minim) notehead\n    Glyphs[\"swissRudimentsNoteheadHalfFlam\"] = \"\\uEE71\";\n    // U+E007  System divider\n    Glyphs[\"systemDivider\"] = \"\\uE007\";\n    // U+E009  Extra long system divider\n    Glyphs[\"systemDividerExtraLong\"] = \"\\uE009\";\n    // U+E008  Long system divider\n    Glyphs[\"systemDividerLong\"] = \"\\uE008\";\n    // U+E1FC  Augmentation dot\n    Glyphs[\"textAugmentationDot\"] = \"\\uE1FC\";\n    // U+E1F5  Black note, fractional 16th beam, long stem\n    Glyphs[\"textBlackNoteFrac16thLongStem\"] = \"\\uE1F5\";\n    // U+E1F4  Black note, fractional 16th beam, short stem\n    Glyphs[\"textBlackNoteFrac16thShortStem\"] = \"\\uE1F4\";\n    // U+E1F6  Black note, fractional 32nd beam, long stem\n    Glyphs[\"textBlackNoteFrac32ndLongStem\"] = \"\\uE1F6\";\n    // U+E1F3  Black note, fractional 8th beam, long stem\n    Glyphs[\"textBlackNoteFrac8thLongStem\"] = \"\\uE1F3\";\n    // U+E1F2  Black note, fractional 8th beam, short stem\n    Glyphs[\"textBlackNoteFrac8thShortStem\"] = \"\\uE1F2\";\n    // U+E1F1  Black note, long stem\n    Glyphs[\"textBlackNoteLongStem\"] = \"\\uE1F1\";\n    // U+E1F0  Black note, short stem\n    Glyphs[\"textBlackNoteShortStem\"] = \"\\uE1F0\";\n    // U+E1FA  Continuing 16th beam for long stem\n    Glyphs[\"textCont16thBeamLongStem\"] = \"\\uE1FA\";\n    // U+E1F9  Continuing 16th beam for short stem\n    Glyphs[\"textCont16thBeamShortStem\"] = \"\\uE1F9\";\n    // U+E1FB  Continuing 32nd beam for long stem\n    Glyphs[\"textCont32ndBeamLongStem\"] = \"\\uE1FB\";\n    // U+E1F8  Continuing 8th beam for long stem\n    Glyphs[\"textCont8thBeamLongStem\"] = \"\\uE1F8\";\n    // U+E1F7  Continuing 8th beam for short stem\n    Glyphs[\"textCont8thBeamShortStem\"] = \"\\uE1F7\";\n    // U+E209  Headless black note, fractional 16th beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac16thLongStem\"] = \"\\uE209\";\n    // U+E208  Headless black note, fractional 16th beam, short stem\n    Glyphs[\"textHeadlessBlackNoteFrac16thShortStem\"] = \"\\uE208\";\n    // U+E20A  Headless black note, fractional 32nd beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac32ndLongStem\"] = \"\\uE20A\";\n    // U+E207  Headless black note, fractional 8th beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac8thLongStem\"] = \"\\uE207\";\n    // U+E206  Headless black note, fractional 8th beam, short stem\n    Glyphs[\"textHeadlessBlackNoteFrac8thShortStem\"] = \"\\uE206\";\n    // U+E205  Headless black note, long stem\n    Glyphs[\"textHeadlessBlackNoteLongStem\"] = \"\\uE205\";\n    // U+E204  Headless black note, short stem\n    Glyphs[\"textHeadlessBlackNoteShortStem\"] = \"\\uE204\";\n    // U+E1FD  Tie\n    Glyphs[\"textTie\"] = \"\\uE1FD\";\n    // U+E202  Tuplet number 3 for long stem\n    Glyphs[\"textTuplet3LongStem\"] = \"\\uE202\";\n    // U+E1FF  Tuplet number 3 for short stem\n    Glyphs[\"textTuplet3ShortStem\"] = \"\\uE1FF\";\n    // U+E203  Tuplet bracket end for long stem\n    Glyphs[\"textTupletBracketEndLongStem\"] = \"\\uE203\";\n    // U+E200  Tuplet bracket end for short stem\n    Glyphs[\"textTupletBracketEndShortStem\"] = \"\\uE200\";\n    // U+E201  Tuplet bracket start for long stem\n    Glyphs[\"textTupletBracketStartLongStem\"] = \"\\uE201\";\n    // U+E1FE  Tuplet bracket start for short stem\n    Glyphs[\"textTupletBracketStartShortStem\"] = \"\\uE1FE\";\n    // U+E080  Time signature 0\n    Glyphs[\"timeSig0\"] = \"\\uE080\";\n    // U+ECF0  Reversed time signature 0\n    Glyphs[\"timeSig0Reversed\"] = \"\\uECF0\";\n    // U+ECE0  Turned time signature 0\n    Glyphs[\"timeSig0Turned\"] = \"\\uECE0\";\n    // U+E081  Time signature 1\n    Glyphs[\"timeSig1\"] = \"\\uE081\";\n    // U+ECF1  Reversed time signature 1\n    Glyphs[\"timeSig1Reversed\"] = \"\\uECF1\";\n    // U+ECE1  Turned time signature 1\n    Glyphs[\"timeSig1Turned\"] = \"\\uECE1\";\n    // U+E082  Time signature 2\n    Glyphs[\"timeSig2\"] = \"\\uE082\";\n    // U+ECF2  Reversed time signature 2\n    Glyphs[\"timeSig2Reversed\"] = \"\\uECF2\";\n    // U+ECE2  Turned time signature 2\n    Glyphs[\"timeSig2Turned\"] = \"\\uECE2\";\n    // U+E083  Time signature 3\n    Glyphs[\"timeSig3\"] = \"\\uE083\";\n    // U+ECF3  Reversed time signature 3\n    Glyphs[\"timeSig3Reversed\"] = \"\\uECF3\";\n    // U+ECE3  Turned time signature 3\n    Glyphs[\"timeSig3Turned\"] = \"\\uECE3\";\n    // U+E084  Time signature 4\n    Glyphs[\"timeSig4\"] = \"\\uE084\";\n    // U+ECF4  Reversed time signature 4\n    Glyphs[\"timeSig4Reversed\"] = \"\\uECF4\";\n    // U+ECE4  Turned time signature 4\n    Glyphs[\"timeSig4Turned\"] = \"\\uECE4\";\n    // U+E085  Time signature 5\n    Glyphs[\"timeSig5\"] = \"\\uE085\";\n    // U+ECF5  Reversed time signature 5\n    Glyphs[\"timeSig5Reversed\"] = \"\\uECF5\";\n    // U+ECE5  Turned time signature 5\n    Glyphs[\"timeSig5Turned\"] = \"\\uECE5\";\n    // U+E086  Time signature 6\n    Glyphs[\"timeSig6\"] = \"\\uE086\";\n    // U+ECF6  Reversed time signature 6\n    Glyphs[\"timeSig6Reversed\"] = \"\\uECF6\";\n    // U+ECE6  Turned time signature 6\n    Glyphs[\"timeSig6Turned\"] = \"\\uECE6\";\n    // U+E087  Time signature 7\n    Glyphs[\"timeSig7\"] = \"\\uE087\";\n    // U+ECF7  Reversed time signature 7\n    Glyphs[\"timeSig7Reversed\"] = \"\\uECF7\";\n    // U+ECE7  Turned time signature 7\n    Glyphs[\"timeSig7Turned\"] = \"\\uECE7\";\n    // U+E088  Time signature 8\n    Glyphs[\"timeSig8\"] = \"\\uE088\";\n    // U+ECF8  Reversed time signature 8\n    Glyphs[\"timeSig8Reversed\"] = \"\\uECF8\";\n    // U+ECE8  Turned time signature 8\n    Glyphs[\"timeSig8Turned\"] = \"\\uECE8\";\n    // U+E089  Time signature 9\n    Glyphs[\"timeSig9\"] = \"\\uE089\";\n    // U+ECF9  Reversed time signature 9\n    Glyphs[\"timeSig9Reversed\"] = \"\\uECF9\";\n    // U+ECE9  Turned time signature 9\n    Glyphs[\"timeSig9Turned\"] = \"\\uECE9\";\n    // U+EC80  Left bracket for whole time signature\n    Glyphs[\"timeSigBracketLeft\"] = \"\\uEC80\";\n    // U+EC82  Left bracket for numerator only\n    Glyphs[\"timeSigBracketLeftSmall\"] = \"\\uEC82\";\n    // U+EC81  Right bracket for whole time signature\n    Glyphs[\"timeSigBracketRight\"] = \"\\uEC81\";\n    // U+EC83  Right bracket for numerator only\n    Glyphs[\"timeSigBracketRightSmall\"] = \"\\uEC83\";\n    // U+E09F  Control character for denominator digit\n    Glyphs[\"timeSigCombDenominator\"] = \"\\uE09F\";\n    // U+E09E  Control character for numerator digit\n    Glyphs[\"timeSigCombNumerator\"] = \"\\uE09E\";\n    // U+E096  Time signature comma\n    Glyphs[\"timeSigComma\"] = \"\\uE096\";\n    // U+E08A  Common time\n    Glyphs[\"timeSigCommon\"] = \"\\uE08A\";\n    // U+ECFA  Reversed common time\n    Glyphs[\"timeSigCommonReversed\"] = \"\\uECFA\";\n    // U+ECEA  Turned common time\n    Glyphs[\"timeSigCommonTurned\"] = \"\\uECEA\";\n    // U+EC85  Cut time (Bach)\n    Glyphs[\"timeSigCut2\"] = \"\\uEC85\";\n    // U+EC86  Cut triple time (9/8)\n    Glyphs[\"timeSigCut3\"] = \"\\uEC86\";\n    // U+E08B  Cut time\n    Glyphs[\"timeSigCutCommon\"] = \"\\uE08B\";\n    // U+ECFB  Reversed cut time\n    Glyphs[\"timeSigCutCommonReversed\"] = \"\\uECFB\";\n    // U+ECEB  Turned cut time\n    Glyphs[\"timeSigCutCommonTurned\"] = \"\\uECEB\";\n    // U+E08F  Time signature equals\n    Glyphs[\"timeSigEquals\"] = \"\\uE08F\";\n    // U+E098  Time signature fraction ½\n    Glyphs[\"timeSigFractionHalf\"] = \"\\uE098\";\n    // U+E09A  Time signature fraction ⅓\n    Glyphs[\"timeSigFractionOneThird\"] = \"\\uE09A\";\n    // U+E097  Time signature fraction ¼\n    Glyphs[\"timeSigFractionQuarter\"] = \"\\uE097\";\n    // U+E099  Time signature fraction ¾\n    Glyphs[\"timeSigFractionThreeQuarters\"] = \"\\uE099\";\n    // U+E09B  Time signature fraction ⅔\n    Glyphs[\"timeSigFractionTwoThirds\"] = \"\\uE09B\";\n    // U+E08E  Time signature fraction slash\n    Glyphs[\"timeSigFractionalSlash\"] = \"\\uE08E\";\n    // U+E090  Time signature minus\n    Glyphs[\"timeSigMinus\"] = \"\\uE090\";\n    // U+E091  Time signature multiply\n    Glyphs[\"timeSigMultiply\"] = \"\\uE091\";\n    // U+E09D  Open time signature (Penderecki)\n    Glyphs[\"timeSigOpenPenderecki\"] = \"\\uE09D\";\n    // U+E094  Left parenthesis for whole time signature\n    Glyphs[\"timeSigParensLeft\"] = \"\\uE094\";\n    // U+E092  Left parenthesis for numerator only\n    Glyphs[\"timeSigParensLeftSmall\"] = \"\\uE092\";\n    // U+E095  Right parenthesis for whole time signature\n    Glyphs[\"timeSigParensRight\"] = \"\\uE095\";\n    // U+E093  Right parenthesis for numerator only\n    Glyphs[\"timeSigParensRightSmall\"] = \"\\uE093\";\n    // U+E08C  Time signature +\n    Glyphs[\"timeSigPlus\"] = \"\\uE08C\";\n    // U+E08D  Time signature + (for numerators)\n    Glyphs[\"timeSigPlusSmall\"] = \"\\uE08D\";\n    // U+EC84  Time signature slash separator\n    Glyphs[\"timeSigSlash\"] = \"\\uEC84\";\n    // U+E09C  Open time signature\n    Glyphs[\"timeSigX\"] = \"\\uE09C\";\n    // U+E220  Combining tremolo 1\n    Glyphs[\"tremolo1\"] = \"\\uE220\";\n    // U+E221  Combining tremolo 2\n    Glyphs[\"tremolo2\"] = \"\\uE221\";\n    // U+E222  Combining tremolo 3\n    Glyphs[\"tremolo3\"] = \"\\uE222\";\n    // U+E223  Combining tremolo 4\n    Glyphs[\"tremolo4\"] = \"\\uE223\";\n    // U+E224  Combining tremolo 5\n    Glyphs[\"tremolo5\"] = \"\\uE224\";\n    // U+E22E  Divide measured tremolo by 2\n    Glyphs[\"tremoloDivisiDots2\"] = \"\\uE22E\";\n    // U+E22F  Divide measured tremolo by 3\n    Glyphs[\"tremoloDivisiDots3\"] = \"\\uE22F\";\n    // U+E230  Divide measured tremolo by 4\n    Glyphs[\"tremoloDivisiDots4\"] = \"\\uE230\";\n    // U+E231  Divide measured tremolo by 6\n    Glyphs[\"tremoloDivisiDots6\"] = \"\\uE231\";\n    // U+E225  Fingered tremolo 1\n    Glyphs[\"tremoloFingered1\"] = \"\\uE225\";\n    // U+E226  Fingered tremolo 2\n    Glyphs[\"tremoloFingered2\"] = \"\\uE226\";\n    // U+E227  Fingered tremolo 3\n    Glyphs[\"tremoloFingered3\"] = \"\\uE227\";\n    // U+E228  Fingered tremolo 4\n    Glyphs[\"tremoloFingered4\"] = \"\\uE228\";\n    // U+E229  Fingered tremolo 5\n    Glyphs[\"tremoloFingered5\"] = \"\\uE229\";\n    // U+E5F2  Triple-tongue above\n    Glyphs[\"tripleTongueAbove\"] = \"\\uE5F2\";\n    // U+E5F3  Triple-tongue below\n    Glyphs[\"tripleTongueBelow\"] = \"\\uE5F3\";\n    // U+E880  Tuplet 0\n    Glyphs[\"tuplet0\"] = \"\\uE880\";\n    // U+E881  Tuplet 1\n    Glyphs[\"tuplet1\"] = \"\\uE881\";\n    // U+E882  Tuplet 2\n    Glyphs[\"tuplet2\"] = \"\\uE882\";\n    // U+E883  Tuplet 3\n    Glyphs[\"tuplet3\"] = \"\\uE883\";\n    // U+E884  Tuplet 4\n    Glyphs[\"tuplet4\"] = \"\\uE884\";\n    // U+E885  Tuplet 5\n    Glyphs[\"tuplet5\"] = \"\\uE885\";\n    // U+E886  Tuplet 6\n    Glyphs[\"tuplet6\"] = \"\\uE886\";\n    // U+E887  Tuplet 7\n    Glyphs[\"tuplet7\"] = \"\\uE887\";\n    // U+E888  Tuplet 8\n    Glyphs[\"tuplet8\"] = \"\\uE888\";\n    // U+E889  Tuplet 9\n    Glyphs[\"tuplet9\"] = \"\\uE889\";\n    // U+E88A  Tuplet colon\n    Glyphs[\"tupletColon\"] = \"\\uE88A\";\n    // U+E22C  Wieniawski unmeasured tremolo\n    Glyphs[\"unmeasuredTremolo\"] = \"\\uE22C\";\n    // U+E22D  Wieniawski unmeasured tremolo (simpler)\n    Glyphs[\"unmeasuredTremoloSimple\"] = \"\\uE22D\";\n    // U+E069  Unpitched percussion clef 1\n    Glyphs[\"unpitchedPercussionClef1\"] = \"\\uE069\";\n    // U+E06A  Unpitched percussion clef 2\n    Glyphs[\"unpitchedPercussionClef2\"] = \"\\uE06A\";\n    // U+E517  Ventiduesima\n    Glyphs[\"ventiduesima\"] = \"\\uE517\";\n    // U+E518  Ventiduesima alta\n    Glyphs[\"ventiduesimaAlta\"] = \"\\uE518\";\n    // U+E519  Ventiduesima bassa\n    Glyphs[\"ventiduesimaBassa\"] = \"\\uE519\";\n    // U+E51E  Ventiduesima bassa (mb)\n    Glyphs[\"ventiduesimaBassaMb\"] = \"\\uE51E\";\n    // U+E649  Finger click (Stockhausen)\n    Glyphs[\"vocalFingerClickStockhausen\"] = \"\\uE649\";\n    // U+E64B  Halb gesungen (semi-sprechgesang)\n    Glyphs[\"vocalHalbGesungen\"] = \"\\uE64B\";\n    // U+E640  Mouth closed\n    Glyphs[\"vocalMouthClosed\"] = \"\\uE640\";\n    // U+E642  Mouth open\n    Glyphs[\"vocalMouthOpen\"] = \"\\uE642\";\n    // U+E644  Mouth pursed\n    Glyphs[\"vocalMouthPursed\"] = \"\\uE644\";\n    // U+E641  Mouth slightly open\n    Glyphs[\"vocalMouthSlightlyOpen\"] = \"\\uE641\";\n    // U+E643  Mouth wide open\n    Glyphs[\"vocalMouthWideOpen\"] = \"\\uE643\";\n    // U+E647  Nasal voice\n    Glyphs[\"vocalNasalVoice\"] = \"\\uE647\";\n    // U+E645  Sprechgesang\n    Glyphs[\"vocalSprechgesang\"] = \"\\uE645\";\n    // U+E648  Tongue click (Stockhausen)\n    Glyphs[\"vocalTongueClickStockhausen\"] = \"\\uE648\";\n    // U+E64A  Tongue and finger click (Stockhausen)\n    Glyphs[\"vocalTongueFingerClickStockhausen\"] = \"\\uE64A\";\n    // U+E646  Combining sussurando for stem\n    Glyphs[\"vocalsSussurando\"] = \"\\uE646\";\n    // U+EAAA  Arpeggiato wiggle segment, downwards\n    Glyphs[\"wiggleArpeggiatoDown\"] = \"\\uEAAA\";\n    // U+EAAE  Arpeggiato arrowhead down\n    Glyphs[\"wiggleArpeggiatoDownArrow\"] = \"\\uEAAE\";\n    // U+EAAC  Arpeggiato downward swash\n    Glyphs[\"wiggleArpeggiatoDownSwash\"] = \"\\uEAAC\";\n    // U+EAA9  Arpeggiato wiggle segment, upwards\n    Glyphs[\"wiggleArpeggiatoUp\"] = \"\\uEAA9\";\n    // U+EAAD  Arpeggiato arrowhead up\n    Glyphs[\"wiggleArpeggiatoUpArrow\"] = \"\\uEAAD\";\n    // U+EAAB  Arpeggiato upward swash\n    Glyphs[\"wiggleArpeggiatoUpSwash\"] = \"\\uEAAB\";\n    // U+EAC9  Circular motion segment\n    Glyphs[\"wiggleCircular\"] = \"\\uEAC9\";\n    // U+EAC0  Constant circular motion segment\n    Glyphs[\"wiggleCircularConstant\"] = \"\\uEAC0\";\n    // U+EAC1  Constant circular motion segment (flipped)\n    Glyphs[\"wiggleCircularConstantFlipped\"] = \"\\uEAC1\";\n    // U+EAC3  Constant circular motion segment (flipped, large)\n    Glyphs[\"wiggleCircularConstantFlippedLarge\"] = \"\\uEAC3\";\n    // U+EAC2  Constant circular motion segment (large)\n    Glyphs[\"wiggleCircularConstantLarge\"] = \"\\uEAC2\";\n    // U+EACB  Circular motion end\n    Glyphs[\"wiggleCircularEnd\"] = \"\\uEACB\";\n    // U+EAC8  Circular motion segment, large\n    Glyphs[\"wiggleCircularLarge\"] = \"\\uEAC8\";\n    // U+EAC7  Circular motion segment, larger\n    Glyphs[\"wiggleCircularLarger\"] = \"\\uEAC7\";\n    // U+EAC6  Circular motion segment, larger still\n    Glyphs[\"wiggleCircularLargerStill\"] = \"\\uEAC6\";\n    // U+EAC5  Circular motion segment, largest\n    Glyphs[\"wiggleCircularLargest\"] = \"\\uEAC5\";\n    // U+EACA  Circular motion segment, small\n    Glyphs[\"wiggleCircularSmall\"] = \"\\uEACA\";\n    // U+EAC4  Circular motion start\n    Glyphs[\"wiggleCircularStart\"] = \"\\uEAC4\";\n    // U+EAAF  Glissando wiggle segment\n    Glyphs[\"wiggleGlissando\"] = \"\\uEAAF\";\n    // U+EABD  Group glissando 1\n    Glyphs[\"wiggleGlissandoGroup1\"] = \"\\uEABD\";\n    // U+EABE  Group glissando 2\n    Glyphs[\"wiggleGlissandoGroup2\"] = \"\\uEABE\";\n    // U+EABF  Group glissando 3\n    Glyphs[\"wiggleGlissandoGroup3\"] = \"\\uEABF\";\n    // U+EAF0  Quasi-random squiggle 1\n    Glyphs[\"wiggleRandom1\"] = \"\\uEAF0\";\n    // U+EAF1  Quasi-random squiggle 2\n    Glyphs[\"wiggleRandom2\"] = \"\\uEAF1\";\n    // U+EAF2  Quasi-random squiggle 3\n    Glyphs[\"wiggleRandom3\"] = \"\\uEAF2\";\n    // U+EAF3  Quasi-random squiggle 4\n    Glyphs[\"wiggleRandom4\"] = \"\\uEAF3\";\n    // U+EABB  Sawtooth line segment\n    Glyphs[\"wiggleSawtooth\"] = \"\\uEABB\";\n    // U+EABA  Narrow sawtooth line segment\n    Glyphs[\"wiggleSawtoothNarrow\"] = \"\\uEABA\";\n    // U+EABC  Wide sawtooth line segment\n    Glyphs[\"wiggleSawtoothWide\"] = \"\\uEABC\";\n    // U+EAB8  Square wave line segment\n    Glyphs[\"wiggleSquareWave\"] = \"\\uEAB8\";\n    // U+EAB7  Narrow square wave line segment\n    Glyphs[\"wiggleSquareWaveNarrow\"] = \"\\uEAB7\";\n    // U+EAB9  Wide square wave line segment\n    Glyphs[\"wiggleSquareWaveWide\"] = \"\\uEAB9\";\n    // U+EAA4  Trill wiggle segment\n    Glyphs[\"wiggleTrill\"] = \"\\uEAA4\";\n    // U+EAA3  Trill wiggle segment, fast\n    Glyphs[\"wiggleTrillFast\"] = \"\\uEAA3\";\n    // U+EAA2  Trill wiggle segment, faster\n    Glyphs[\"wiggleTrillFaster\"] = \"\\uEAA2\";\n    // U+EAA1  Trill wiggle segment, faster still\n    Glyphs[\"wiggleTrillFasterStill\"] = \"\\uEAA1\";\n    // U+EAA0  Trill wiggle segment, fastest\n    Glyphs[\"wiggleTrillFastest\"] = \"\\uEAA0\";\n    // U+EAA5  Trill wiggle segment, slow\n    Glyphs[\"wiggleTrillSlow\"] = \"\\uEAA5\";\n    // U+EAA6  Trill wiggle segment, slower\n    Glyphs[\"wiggleTrillSlower\"] = \"\\uEAA6\";\n    // U+EAA7  Trill wiggle segment, slower still\n    Glyphs[\"wiggleTrillSlowerStill\"] = \"\\uEAA7\";\n    // U+EAA8  Trill wiggle segment, slowest\n    Glyphs[\"wiggleTrillSlowest\"] = \"\\uEAA8\";\n    // U+EAEE  Vibrato largest, slower\n    Glyphs[\"wiggleVIbratoLargestSlower\"] = \"\\uEAEE\";\n    // U+EAE0  Vibrato medium, slower\n    Glyphs[\"wiggleVIbratoMediumSlower\"] = \"\\uEAE0\";\n    // U+EAB0  Vibrato / shake wiggle segment\n    Glyphs[\"wiggleVibrato\"] = \"\\uEAB0\";\n    // U+EAE5  Vibrato large, fast\n    Glyphs[\"wiggleVibratoLargeFast\"] = \"\\uEAE5\";\n    // U+EAE4  Vibrato large, faster\n    Glyphs[\"wiggleVibratoLargeFaster\"] = \"\\uEAE4\";\n    // U+EAE3  Vibrato large, faster still\n    Glyphs[\"wiggleVibratoLargeFasterStill\"] = \"\\uEAE3\";\n    // U+EAE2  Vibrato large, fastest\n    Glyphs[\"wiggleVibratoLargeFastest\"] = \"\\uEAE2\";\n    // U+EAE6  Vibrato large, slow\n    Glyphs[\"wiggleVibratoLargeSlow\"] = \"\\uEAE6\";\n    // U+EAE7  Vibrato large, slower\n    Glyphs[\"wiggleVibratoLargeSlower\"] = \"\\uEAE7\";\n    // U+EAE8  Vibrato large, slowest\n    Glyphs[\"wiggleVibratoLargeSlowest\"] = \"\\uEAE8\";\n    // U+EAEC  Vibrato largest, fast\n    Glyphs[\"wiggleVibratoLargestFast\"] = \"\\uEAEC\";\n    // U+EAEB  Vibrato largest, faster\n    Glyphs[\"wiggleVibratoLargestFaster\"] = \"\\uEAEB\";\n    // U+EAEA  Vibrato largest, faster still\n    Glyphs[\"wiggleVibratoLargestFasterStill\"] = \"\\uEAEA\";\n    // U+EAE9  Vibrato largest, fastest\n    Glyphs[\"wiggleVibratoLargestFastest\"] = \"\\uEAE9\";\n    // U+EAED  Vibrato largest, slow\n    Glyphs[\"wiggleVibratoLargestSlow\"] = \"\\uEAED\";\n    // U+EAEF  Vibrato largest, slowest\n    Glyphs[\"wiggleVibratoLargestSlowest\"] = \"\\uEAEF\";\n    // U+EADE  Vibrato medium, fast\n    Glyphs[\"wiggleVibratoMediumFast\"] = \"\\uEADE\";\n    // U+EADD  Vibrato medium, faster\n    Glyphs[\"wiggleVibratoMediumFaster\"] = \"\\uEADD\";\n    // U+EADC  Vibrato medium, faster still\n    Glyphs[\"wiggleVibratoMediumFasterStill\"] = \"\\uEADC\";\n    // U+EADB  Vibrato medium, fastest\n    Glyphs[\"wiggleVibratoMediumFastest\"] = \"\\uEADB\";\n    // U+EADF  Vibrato medium, slow\n    Glyphs[\"wiggleVibratoMediumSlow\"] = \"\\uEADF\";\n    // U+EAE1  Vibrato medium, slowest\n    Glyphs[\"wiggleVibratoMediumSlowest\"] = \"\\uEAE1\";\n    // U+EAD7  Vibrato small, fast\n    Glyphs[\"wiggleVibratoSmallFast\"] = \"\\uEAD7\";\n    // U+EAD6  Vibrato small, faster\n    Glyphs[\"wiggleVibratoSmallFaster\"] = \"\\uEAD6\";\n    // U+EAD5  Vibrato small, faster still\n    Glyphs[\"wiggleVibratoSmallFasterStill\"] = \"\\uEAD5\";\n    // U+EAD4  Vibrato small, fastest\n    Glyphs[\"wiggleVibratoSmallFastest\"] = \"\\uEAD4\";\n    // U+EAD8  Vibrato small, slow\n    Glyphs[\"wiggleVibratoSmallSlow\"] = \"\\uEAD8\";\n    // U+EAD9  Vibrato small, slower\n    Glyphs[\"wiggleVibratoSmallSlower\"] = \"\\uEAD9\";\n    // U+EADA  Vibrato small, slowest\n    Glyphs[\"wiggleVibratoSmallSlowest\"] = \"\\uEADA\";\n    // U+EAD0  Vibrato smallest, fast\n    Glyphs[\"wiggleVibratoSmallestFast\"] = \"\\uEAD0\";\n    // U+EACF  Vibrato smallest, faster\n    Glyphs[\"wiggleVibratoSmallestFaster\"] = \"\\uEACF\";\n    // U+EACE  Vibrato smallest, faster still\n    Glyphs[\"wiggleVibratoSmallestFasterStill\"] = \"\\uEACE\";\n    // U+EACD  Vibrato smallest, fastest\n    Glyphs[\"wiggleVibratoSmallestFastest\"] = \"\\uEACD\";\n    // U+EAD1  Vibrato smallest, slow\n    Glyphs[\"wiggleVibratoSmallestSlow\"] = \"\\uEAD1\";\n    // U+EAD2  Vibrato smallest, slower\n    Glyphs[\"wiggleVibratoSmallestSlower\"] = \"\\uEAD2\";\n    // U+EAD3  Vibrato smallest, slowest\n    Glyphs[\"wiggleVibratoSmallestSlowest\"] = \"\\uEAD3\";\n    // U+EACC  Vibrato start\n    Glyphs[\"wiggleVibratoStart\"] = \"\\uEACC\";\n    // U+EAB1  Wide vibrato / shake wiggle segment\n    Glyphs[\"wiggleVibratoWide\"] = \"\\uEAB1\";\n    // U+EAB5  Wavy line segment\n    Glyphs[\"wiggleWavy\"] = \"\\uEAB5\";\n    // U+EAB4  Narrow wavy line segment\n    Glyphs[\"wiggleWavyNarrow\"] = \"\\uEAB4\";\n    // U+EAB6  Wide wavy line segment\n    Glyphs[\"wiggleWavyWide\"] = \"\\uEAB6\";\n    // U+E5F4  Closed hole\n    Glyphs[\"windClosedHole\"] = \"\\uE5F4\";\n    // U+E5FB  Flatter embouchure\n    Glyphs[\"windFlatEmbouchure\"] = \"\\uE5FB\";\n    // U+E5F6  Half-closed hole\n    Glyphs[\"windHalfClosedHole1\"] = \"\\uE5F6\";\n    // U+E5F7  Half-closed hole 2\n    Glyphs[\"windHalfClosedHole2\"] = \"\\uE5F7\";\n    // U+E5F8  Half-open hole\n    Glyphs[\"windHalfClosedHole3\"] = \"\\uE5F8\";\n    // U+E5FE  Somewhat relaxed embouchure\n    Glyphs[\"windLessRelaxedEmbouchure\"] = \"\\uE5FE\";\n    // U+E600  Somewhat tight embouchure\n    Glyphs[\"windLessTightEmbouchure\"] = \"\\uE600\";\n    // U+E60A  Mouthpiece or hand pop\n    Glyphs[\"windMouthpiecePop\"] = \"\\uE60A\";\n    // U+E607  Combining multiphonics (black) for stem\n    Glyphs[\"windMultiphonicsBlackStem\"] = \"\\uE607\";\n    // U+E609  Combining multiphonics (black and white) for stem\n    Glyphs[\"windMultiphonicsBlackWhiteStem\"] = \"\\uE609\";\n    // U+E608  Combining multiphonics (white) for stem\n    Glyphs[\"windMultiphonicsWhiteStem\"] = \"\\uE608\";\n    // U+E5F9  Open hole\n    Glyphs[\"windOpenHole\"] = \"\\uE5F9\";\n    // U+E606  Much more reed (push inwards)\n    Glyphs[\"windReedPositionIn\"] = \"\\uE606\";\n    // U+E604  Normal reed position\n    Glyphs[\"windReedPositionNormal\"] = \"\\uE604\";\n    // U+E605  Very little reed (pull outwards)\n    Glyphs[\"windReedPositionOut\"] = \"\\uE605\";\n    // U+E5FD  Relaxed embouchure\n    Glyphs[\"windRelaxedEmbouchure\"] = \"\\uE5FD\";\n    // U+E60B  Rim only\n    Glyphs[\"windRimOnly\"] = \"\\uE60B\";\n    // U+E5FC  Sharper embouchure\n    Glyphs[\"windSharpEmbouchure\"] = \"\\uE5FC\";\n    // U+E603  Very tight embouchure / strong air pressure\n    Glyphs[\"windStrongAirPressure\"] = \"\\uE603\";\n    // U+E5F5  Three-quarters closed hole\n    Glyphs[\"windThreeQuartersClosedHole\"] = \"\\uE5F5\";\n    // U+E5FF  Tight embouchure\n    Glyphs[\"windTightEmbouchure\"] = \"\\uE5FF\";\n    // U+E5FA  Trill key\n    Glyphs[\"windTrillKey\"] = \"\\uE5FA\";\n    // U+E601  Very tight embouchure\n    Glyphs[\"windVeryTightEmbouchure\"] = \"\\uE601\";\n    // U+E602  Very relaxed embouchure / weak air-pressure\n    Glyphs[\"windWeakAirPressure\"] = \"\\uE602\";\n})(Glyphs || (Glyphs = {}));\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { RuntimeError } from './util';\n/** Music implements some standard music theory routines. */\nexport class Music {\n    /** Number of an canonical notes (12). */\n    static get NUM_TONES() {\n        return this.canonicalNotes.length;\n    }\n    /** Names of root notes ('c', 'd',...) */\n    static get roots() {\n        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n    }\n    /** Values of the root notes.*/\n    static get rootValues() {\n        return [0, 2, 4, 5, 7, 9, 11];\n    }\n    /** Indexes of the root notes.*/\n    static get rootIndexes() {\n        return {\n            c: 0,\n            d: 1,\n            e: 2,\n            f: 3,\n            g: 4,\n            a: 5,\n            b: 6,\n        };\n    }\n    /** Names of canonical notes ('c', 'c#', 'd',...). */\n    static get canonicalNotes() {\n        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n    }\n    /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n    static get diatonicIntervals() {\n        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n    }\n    /** NoteAccidental associated to diatonic intervals. */\n    static get diatonicAccidentals() {\n        return {\n            unison: { note: 0, accidental: 0 },\n            m2: { note: 1, accidental: -1 },\n            M2: { note: 1, accidental: 0 },\n            m3: { note: 2, accidental: -1 },\n            M3: { note: 2, accidental: 0 },\n            p4: { note: 3, accidental: 0 },\n            dim5: { note: 4, accidental: -1 },\n            p5: { note: 4, accidental: 0 },\n            m6: { note: 5, accidental: -1 },\n            M6: { note: 5, accidental: 0 },\n            b7: { note: 6, accidental: -1 },\n            M7: { note: 6, accidental: 0 },\n            octave: { note: 7, accidental: 0 },\n        };\n    }\n    /** Semitones shift associated to intervals .*/\n    static get intervals() {\n        return {\n            u: 0,\n            unison: 0,\n            m2: 1,\n            b2: 1,\n            min2: 1,\n            S: 1,\n            H: 1,\n            2: 2,\n            M2: 2,\n            maj2: 2,\n            T: 2,\n            W: 2,\n            m3: 3,\n            b3: 3,\n            min3: 3,\n            M3: 4,\n            3: 4,\n            maj3: 4,\n            4: 5,\n            p4: 5,\n            '#4': 6,\n            b5: 6,\n            aug4: 6,\n            dim5: 6,\n            5: 7,\n            p5: 7,\n            '#5': 8,\n            b6: 8,\n            aug5: 8,\n            6: 9,\n            M6: 9,\n            maj6: 9,\n            b7: 10,\n            m7: 10,\n            min7: 10,\n            dom7: 10,\n            M7: 11,\n            maj7: 11,\n            8: 12,\n            octave: 12,\n        };\n    }\n    /** Semitones shifts associated with scales. */\n    static get scales() {\n        return {\n            major: [2, 2, 1, 2, 2, 2, 1],\n            minor: [2, 1, 2, 2, 1, 2, 2],\n            ionian: [2, 2, 1, 2, 2, 2, 1],\n            dorian: [2, 1, 2, 2, 2, 1, 2],\n            phyrgian: [1, 2, 2, 2, 1, 2, 2],\n            lydian: [2, 2, 2, 1, 2, 2, 1],\n            mixolydian: [2, 2, 1, 2, 2, 1, 2],\n            aeolian: [2, 1, 2, 2, 1, 2, 2],\n            locrian: [1, 2, 2, 1, 2, 2, 2],\n        };\n    }\n    /** Scales associated with m (minor) and M (major). */\n    static get scaleTypes() {\n        return {\n            M: Music.scales.major,\n            m: Music.scales.minor,\n        };\n    }\n    /** Accidentals abbreviations. */\n    static get accidentals() {\n        return ['bb', 'b', 'n', '#', '##'];\n    }\n    /** Note values. */\n    static get noteValues() {\n        return {\n            c: { rootIndex: 0, intVal: 0 },\n            cn: { rootIndex: 0, intVal: 0 },\n            'c#': { rootIndex: 0, intVal: 1 },\n            'c##': { rootIndex: 0, intVal: 2 },\n            cb: { rootIndex: 0, intVal: 11 },\n            cbb: { rootIndex: 0, intVal: 10 },\n            d: { rootIndex: 1, intVal: 2 },\n            dn: { rootIndex: 1, intVal: 2 },\n            'd#': { rootIndex: 1, intVal: 3 },\n            'd##': { rootIndex: 1, intVal: 4 },\n            db: { rootIndex: 1, intVal: 1 },\n            dbb: { rootIndex: 1, intVal: 0 },\n            e: { rootIndex: 2, intVal: 4 },\n            en: { rootIndex: 2, intVal: 4 },\n            'e#': { rootIndex: 2, intVal: 5 },\n            'e##': { rootIndex: 2, intVal: 6 },\n            eb: { rootIndex: 2, intVal: 3 },\n            ebb: { rootIndex: 2, intVal: 2 },\n            f: { rootIndex: 3, intVal: 5 },\n            fn: { rootIndex: 3, intVal: 5 },\n            'f#': { rootIndex: 3, intVal: 6 },\n            'f##': { rootIndex: 3, intVal: 7 },\n            fb: { rootIndex: 3, intVal: 4 },\n            fbb: { rootIndex: 3, intVal: 3 },\n            g: { rootIndex: 4, intVal: 7 },\n            gn: { rootIndex: 4, intVal: 7 },\n            'g#': { rootIndex: 4, intVal: 8 },\n            'g##': { rootIndex: 4, intVal: 9 },\n            gb: { rootIndex: 4, intVal: 6 },\n            gbb: { rootIndex: 4, intVal: 5 },\n            a: { rootIndex: 5, intVal: 9 },\n            an: { rootIndex: 5, intVal: 9 },\n            'a#': { rootIndex: 5, intVal: 10 },\n            'a##': { rootIndex: 5, intVal: 11 },\n            ab: { rootIndex: 5, intVal: 8 },\n            abb: { rootIndex: 5, intVal: 7 },\n            b: { rootIndex: 6, intVal: 11 },\n            bn: { rootIndex: 6, intVal: 11 },\n            'b#': { rootIndex: 6, intVal: 0 },\n            'b##': { rootIndex: 6, intVal: 1 },\n            bb: { rootIndex: 6, intVal: 10 },\n            bbb: { rootIndex: 6, intVal: 9 },\n        };\n    }\n    isValidNoteValue(note) {\n        return note >= 0 && note < Music.canonicalNotes.length;\n    }\n    isValidIntervalValue(interval) {\n        return interval >= 0 && interval < Music.diatonicIntervals.length;\n    }\n    /** Return root and accidental associated to a note. */\n    getNoteParts(noteString) {\n        if (!noteString || noteString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        if (noteString.length > 3) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        const note = noteString.toLowerCase();\n        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n        const match = regex.exec(note);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            return {\n                root,\n                accidental,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n    }\n    /** Return root, accidental and type associated to a key. */\n    getKeyParts(keyString) {\n        if (!keyString || keyString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n        }\n        const key = keyString.toLowerCase();\n        // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n        const match = regex.exec(key);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            let type = match[3];\n            // Unspecified type implies major\n            if (!type)\n                type = 'M';\n            return {\n                root,\n                accidental,\n                type,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n        }\n    }\n    /** Note value associated to a note name. */\n    getNoteValue(noteString) {\n        const value = Music.noteValues[noteString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n        }\n        return value.intVal;\n    }\n    /** Interval value associated to an interval name. */\n    getIntervalValue(intervalString) {\n        const value = Music.intervals[intervalString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n        }\n        return value;\n    }\n    /** Canonical note name associated to a value. */\n    getCanonicalNoteName(noteValue) {\n        if (!this.isValidNoteValue(noteValue)) {\n            throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n        }\n        return Music.canonicalNotes[noteValue];\n    }\n    /** Interval name associated to a value. */\n    getCanonicalIntervalName(intervalValue) {\n        if (!this.isValidIntervalValue(intervalValue)) {\n            throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n        }\n        return Music.diatonicIntervals[intervalValue];\n    }\n    /**\n     * Given a note, interval, and interval direction, produce the relative note.\n     */\n    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n        if (sum < 0)\n            sum += Music.NUM_TONES;\n        return sum;\n    }\n    /**\n     * Given a root and note value, produce the relative note name.\n     */\n    getRelativeNoteName(root, noteValue) {\n        const parts = this.getNoteParts(root);\n        const rootValue = this.getNoteValue(parts.root);\n        let interval = noteValue - rootValue;\n        if (Math.abs(interval) > Music.NUM_TONES - 3) {\n            let multiplier = 1;\n            if (interval > 0)\n                multiplier = -1;\n            // Possibly wrap around. (Add +1 for modulo operator)\n            const reverseInterval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n            if (Math.abs(reverseInterval) > 2) {\n                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n            }\n            else {\n                interval = reverseInterval;\n            }\n        }\n        if (Math.abs(interval) > 2) {\n            throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n        }\n        let relativeNoteName = parts.root;\n        if (interval > 0) {\n            for (let i = 1; i <= interval; ++i) {\n                relativeNoteName += '#';\n            }\n        }\n        else if (interval < 0) {\n            for (let i = -1; i >= interval; --i) {\n                relativeNoteName += 'b';\n            }\n        }\n        return relativeNoteName;\n    }\n    /**\n     * Return scale tones, given intervals. Each successive interval is\n     * relative to the previous one, e.g., Major Scale:\n     *\n     *   TTSTTTS = [2,2,1,2,2,2,1]\n     *\n     * When used with key = 0, returns C scale (which is isomorphic to\n     * interval list).\n     */\n    getScaleTones(key, intervals) {\n        const tones = [key];\n        let nextNote = key;\n        for (let i = 0; i < intervals.length; i++) {\n            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n            if (nextNote !== key)\n                tones.push(nextNote);\n        }\n        return tones;\n    }\n    /**\n     * Return the interval of a note, given a diatonic scale.\n     * e.g., given the scale C, and the note E, returns M3.\n     */\n    getIntervalBetween(note1, note2, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n            throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n        }\n        let difference = direction === 1 ? note2 - note1 : note1 - note2;\n        if (difference < 0)\n            difference += Music.NUM_TONES;\n        return difference;\n    }\n    /**\n     * Create a scale map that represents the pitch state for a\n     * `keySignature`. For example, passing a `G` to `keySignature` would\n     * return a scale map with every note naturalized except for `F` which\n     * has an `F#` state.\n     */\n    createScaleMap(keySignature) {\n        const keySigParts = this.getKeyParts(keySignature);\n        if (!keySigParts.type)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n        const scaleName = Music.scaleTypes[keySigParts.type];\n        let keySigString = keySigParts.root;\n        if (keySigParts.accidental)\n            keySigString += keySigParts.accidental;\n        if (!scaleName)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n        const noteLocation = Music.rootIndexes[keySigParts.root];\n        const scaleMap = {};\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            let noteName = this.getRelativeNoteName(rootName, scale[i]);\n            if (noteName.length === 1) {\n                noteName += 'n';\n            }\n            scaleMap[rootName] = noteName;\n        }\n        return scaleMap;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { Fraction } from './fraction';\nimport { Glyphs } from './glyphs';\nimport { RuntimeError } from './util';\nconst RESOLUTION = 16384;\n/**\n * Map duration numbers to 'ticks', the unit of duration used throughout VexFlow.\n * For example, a quarter note is 4, so it maps to RESOLUTION / 4 = 4096 ticks.\n */\nconst durations = {\n    '1/2': RESOLUTION * 2,\n    1: RESOLUTION / 1,\n    2: RESOLUTION / 2,\n    4: RESOLUTION / 4,\n    8: RESOLUTION / 8,\n    16: RESOLUTION / 16,\n    32: RESOLUTION / 32,\n    64: RESOLUTION / 64,\n    128: RESOLUTION / 128,\n    256: RESOLUTION / 256,\n};\nconst durationAliases = {\n    w: '1',\n    h: '2',\n    q: '4',\n    // This is the default duration used to render bars (BarNote). Bars no longer\n    // consume ticks, so this should be a no-op.\n    // TODO(0xfe): This needs to be cleaned up.\n    b: '256',\n};\nconst keySignatures = {\n    C: { num: 0 },\n    Am: { num: 0 },\n    F: { accidental: 'b', num: 1 },\n    Dm: { accidental: 'b', num: 1 },\n    Bb: { accidental: 'b', num: 2 },\n    Gm: { accidental: 'b', num: 2 },\n    Eb: { accidental: 'b', num: 3 },\n    Cm: { accidental: 'b', num: 3 },\n    Ab: { accidental: 'b', num: 4 },\n    Fm: { accidental: 'b', num: 4 },\n    Db: { accidental: 'b', num: 5 },\n    Bbm: { accidental: 'b', num: 5 },\n    Gb: { accidental: 'b', num: 6 },\n    Ebm: { accidental: 'b', num: 6 },\n    Cb: { accidental: 'b', num: 7 },\n    Abm: { accidental: 'b', num: 7 },\n    G: { accidental: '#', num: 1 },\n    Em: { accidental: '#', num: 1 },\n    D: { accidental: '#', num: 2 },\n    Bm: { accidental: '#', num: 2 },\n    A: { accidental: '#', num: 3 },\n    'F#m': { accidental: '#', num: 3 },\n    E: { accidental: '#', num: 4 },\n    'C#m': { accidental: '#', num: 4 },\n    B: { accidental: '#', num: 5 },\n    'G#m': { accidental: '#', num: 5 },\n    'F#': { accidental: '#', num: 6 },\n    'D#m': { accidental: '#', num: 6 },\n    'C#': { accidental: '#', num: 7 },\n    'A#m': { accidental: '#', num: 7 },\n};\nconst clefs = {\n    treble: { lineShift: 0 },\n    bass: { lineShift: 6 },\n    tenor: { lineShift: 4 },\n    alto: { lineShift: 3 },\n    soprano: { lineShift: 1 },\n    percussion: { lineShift: 0 },\n    'mezzo-soprano': { lineShift: 2 },\n    'baritone-c': { lineShift: 5 },\n    'baritone-f': { lineShift: 5 },\n    subbass: { lineShift: 7 },\n    french: { lineShift: -1 },\n};\nconst notesInfo = {\n    C: { index: 0, intVal: 0 },\n    CN: { index: 0, intVal: 0 },\n    'C#': { index: 0, intVal: 1 },\n    'C##': { index: 0, intVal: 2 },\n    CB: { index: 0, intVal: 11 },\n    CBB: { index: 0, intVal: 10 },\n    D: { index: 1, intVal: 2 },\n    DN: { index: 1, intVal: 2 },\n    'D#': { index: 1, intVal: 3 },\n    'D##': { index: 1, intVal: 4 },\n    DB: { index: 1, intVal: 1 },\n    DBB: { index: 1, intVal: 0 },\n    E: { index: 2, intVal: 4 },\n    EN: { index: 2, intVal: 4 },\n    'E#': { index: 2, intVal: 5 },\n    'E##': { index: 2, intVal: 6 },\n    EB: { index: 2, intVal: 3 },\n    EBB: { index: 2, intVal: 2 },\n    F: { index: 3, intVal: 5 },\n    FN: { index: 3, intVal: 5 },\n    'F#': { index: 3, intVal: 6 },\n    'F##': { index: 3, intVal: 7 },\n    FB: { index: 3, intVal: 4 },\n    FBB: { index: 3, intVal: 3 },\n    G: { index: 4, intVal: 7 },\n    GN: { index: 4, intVal: 7 },\n    'G#': { index: 4, intVal: 8 },\n    'G##': { index: 4, intVal: 9 },\n    GB: { index: 4, intVal: 6 },\n    GBB: { index: 4, intVal: 5 },\n    A: { index: 5, intVal: 9 },\n    AN: { index: 5, intVal: 9 },\n    'A#': { index: 5, intVal: 10 },\n    'A##': { index: 5, intVal: 11 },\n    AB: { index: 5, intVal: 8 },\n    ABB: { index: 5, intVal: 7 },\n    B: { index: 6, intVal: 11 },\n    BN: { index: 6, intVal: 11 },\n    'B#': { index: 6, intVal: 12 },\n    'B##': { index: 6, intVal: 13 },\n    BB: { index: 6, intVal: 10 },\n    BBB: { index: 6, intVal: 9 },\n    R: { index: 6 }, // Rest\n    X: { index: 6 },\n};\nconst validNoteTypes = {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n    g: { name: 'ghost' },\n    d: { name: 'diamond' },\n    x: { name: 'x' },\n    ci: { name: 'circled' },\n    cx: { name: 'circle x' },\n    sf: { name: 'slashed' },\n    sb: { name: 'slashed backward' },\n    sq: { name: 'square' },\n    tu: { name: 'triangle up' },\n    td: { name: 'triangle down' },\n};\nconst accidentals = {\n    '#': Glyphs.accidentalSharp,\n    '##': Glyphs.accidentalDoubleSharp,\n    b: Glyphs.accidentalFlat,\n    bb: Glyphs.accidentalDoubleFlat,\n    n: Glyphs.accidentalNatural,\n    '{': Glyphs.accidentalParensLeft,\n    '}': Glyphs.accidentalParensRight,\n    db: Glyphs.accidentalThreeQuarterTonesFlatZimmermann,\n    d: Glyphs.accidentalQuarterToneFlatStein,\n    '++': Glyphs.accidentalThreeQuarterTonesSharpStein,\n    '+': Glyphs.accidentalQuarterToneSharpStein,\n    '+-': Glyphs.accidentalKucukMucennebSharp,\n    bs: Glyphs.accidentalBakiyeFlat,\n    bss: Glyphs.accidentalBuyukMucennebFlat,\n    o: Glyphs.accidentalSori,\n    k: Glyphs.accidentalKoron,\n    bbs: Glyphs.accidentalBuyukMucennebSharp,\n    '++-': Glyphs.accidentalBuyukMucennebSharp,\n    ashs: Glyphs.accidentalBuyukMucennebSharp,\n    afhf: Glyphs.accidentalBuyukMucennebSharp,\n};\n// Helps determine the layout of accidentals.\nconst accidentalColumns = {\n    1: {\n        a: [1],\n        b: [1],\n    },\n    2: {\n        a: [1, 2],\n    },\n    3: {\n        a: [1, 3, 2],\n        b: [1, 2, 1],\n        secondOnBottom: [1, 2, 3],\n    },\n    4: {\n        a: [1, 3, 4, 2],\n        b: [1, 2, 3, 1],\n        spacedOutTetrachord: [1, 2, 1, 2],\n    },\n    5: {\n        a: [1, 3, 5, 4, 2],\n        b: [1, 2, 4, 3, 1],\n        spacedOutPentachord: [1, 2, 3, 2, 1],\n        verySpacedOutPentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n        a: [1, 3, 5, 6, 4, 2],\n        b: [1, 2, 4, 5, 3, 1],\n        spacedOutHexachord: [1, 3, 2, 1, 3, 2],\n        verySpacedOutHexachord: [1, 2, 1, 2, 1, 2],\n    },\n};\nconst articulations = {\n    'a.': { code: Glyphs.augmentationDot, betweenLines: true }, // Staccato\n    av: {\n        aboveCode: Glyphs.articStaccatissimoAbove,\n        belowCode: Glyphs.articStaccatissimoBelow,\n        betweenLines: true,\n    }, // Staccatissimo\n    'a>': {\n        aboveCode: Glyphs.articAccentAbove,\n        belowCode: Glyphs.articAccentBelow,\n        betweenLines: true,\n    }, // Accent\n    'a-': {\n        aboveCode: Glyphs.articTenutoAbove,\n        belowCode: Glyphs.articTenutoBelow,\n        betweenLines: true,\n    }, // Tenuto\n    'a^': {\n        aboveCode: Glyphs.articMarcatoAbove,\n        belowCode: Glyphs.articMarcatoBelow,\n        betweenLines: false,\n    }, // Marcato\n    'a+': { code: Glyphs.pluckedLeftHandPizzicato, betweenLines: false }, // Left hand pizzicato\n    ao: {\n        aboveCode: Glyphs.pluckedSnapPizzicatoAbove,\n        belowCode: Glyphs.pluckedSnapPizzicatoBelow,\n        betweenLines: false,\n    }, // Snap pizzicato\n    ah: { code: Glyphs.stringsHarmonic, betweenLines: false }, // Natural harmonic or open note\n    'a@': { aboveCode: Glyphs.fermataAbove, belowCode: Glyphs.fermataBelow, betweenLines: false }, // Fermata\n    'a@a': { code: Glyphs.fermataAbove, betweenLines: false }, // Fermata above staff\n    'a@u': { code: Glyphs.fermataBelow, betweenLines: false }, // Fermata below staff\n    'a@s': { aboveCode: Glyphs.fermataShortAbove, belowCode: Glyphs.fermataShortBelow, betweenLines: false }, // Fermata short\n    'a@as': { code: Glyphs.fermataShortAbove, betweenLines: false }, // Fermata short above staff\n    'a@us': { code: Glyphs.fermataShortBelow, betweenLines: false }, // Fermata short below staff\n    'a@l': { aboveCode: Glyphs.fermataLongAbove, belowCode: Glyphs.fermataLongBelow, betweenLines: false }, // Fermata long\n    'a@al': { code: Glyphs.fermataLongAbove, betweenLines: false }, // Fermata long above staff\n    'a@ul': { code: Glyphs.fermataLongBelow, betweenLines: false }, // Fermata long below staff\n    'a@vl': {\n        aboveCode: Glyphs.fermataVeryLongAbove,\n        belowCode: Glyphs.fermataVeryLongBelow,\n        betweenLines: false,\n    }, // Fermata very long\n    'a@avl': { code: Glyphs.fermataVeryLongAbove, betweenLines: false }, // Fermata very long above staff\n    'a@uvl': { code: Glyphs.fermataVeryLongBelow, betweenLines: false }, // Fermata very long below staff\n    'a|': { code: Glyphs.stringsUpBow, betweenLines: false }, // Bow up - up stroke\n    am: { code: Glyphs.stringsDownBow, betweenLines: false }, // Bow down - down stroke\n    'a,': { code: Glyphs.pictChokeCymbal, betweenLines: false }, // Choked\n};\nconst ornaments = {\n    mordent: Glyphs.ornamentShortTrill,\n    mordentInverted: Glyphs.ornamentMordent,\n    turn: Glyphs.ornamentTurn,\n    turnInverted: Glyphs.ornamentTurnSlash,\n    tr: Glyphs.ornamentTrill,\n    upprall: Glyphs.ornamentPrecompSlideTrillDAnglebert,\n    downprall: Glyphs.ornamentPrecompDoubleCadenceUpperPrefix,\n    prallup: Glyphs.ornamentPrecompTrillSuffixDandrieu,\n    pralldown: Glyphs.ornamentPrecompTrillLowerSuffix,\n    upmordent: Glyphs.ornamentPrecompSlideTrillBach,\n    downmordent: Glyphs.ornamentPrecompDoubleCadenceUpperPrefixTurn,\n    lineprall: Glyphs.ornamentPrecompAppoggTrill,\n    prallprall: Glyphs.ornamentTremblement,\n    scoop: Glyphs.brassScoop,\n    doit: Glyphs.brassDoitMedium,\n    fall: Glyphs.brassFallLipShort,\n    doitLong: Glyphs.brassLiftMedium,\n    fallLong: Glyphs.brassFallRoughMedium,\n    bend: Glyphs.brassBend,\n    plungerClosed: Glyphs.brassMuteClosed,\n    plungerOpen: Glyphs.brassMuteOpen,\n    flip: Glyphs.brassFlip,\n    jazzTurn: Glyphs.brassJazzTurn,\n    smear: Glyphs.brassSmear,\n};\nexport class Tables {\n    static clefProperties(clef) {\n        if (!clef || !(clef in clefs))\n            throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n        return clefs[clef];\n    }\n    /**\n     * @param keyOctaveGlyph a string in the format \"key/octave\" (e.g., \"c/5\") or \"key/octave/custom-note-head-code\" (e.g., \"g/5/t3\").\n     * @param clef\n     * @param params a struct with one option, `octaveShift` for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n     * @returns properties for the specified note.\n     */\n    static keyProperties(keyOctaveGlyph, clef = 'treble', type = 'N', params) {\n        let options = { octaveShift: 0, duration: '4' };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        const duration = Tables.sanitizeDuration(options.duration);\n        const pieces = keyOctaveGlyph.split('/');\n        if (pieces.length < 2) {\n            throw new RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);\n        }\n        const key = pieces[0].toUpperCase();\n        type = type.toUpperCase();\n        const value = notesInfo[key];\n        if (!value)\n            throw new RuntimeError('BadArguments', 'Invalid key name: ' + key);\n        let octave = parseInt(pieces[1], 10);\n        // .octaveShift is the shift to compensate for clef 8va/8vb.\n        octave -= options.octaveShift;\n        const baseIndex = octave * 7 - 4 * 7;\n        let line = (baseIndex + value.index) / 2;\n        line += Tables.clefProperties(clef).lineShift;\n        // Integer value for note arithmetic.\n        const intValue = typeof value.intVal !== 'undefined' ? octave * 12 + value.intVal : undefined;\n        // If the user specified a glyph, overwrite the glyph code.\n        let code = '';\n        let glyphName = 'N';\n        if (pieces.length > 2 && pieces[2]) {\n            glyphName = pieces[2].toUpperCase();\n        }\n        else if (type !== 'N') {\n            glyphName = type;\n        }\n        else\n            glyphName = key;\n        code = this.codeNoteHead(glyphName, duration);\n        return {\n            key,\n            octave,\n            line,\n            intValue,\n            code,\n            displaced: false,\n        };\n    }\n    static integerToNote(integer) {\n        if (typeof integer === 'undefined' || integer < 0 || integer > 11) {\n            throw new RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);\n        }\n        const table = {\n            0: 'C',\n            1: 'C#',\n            2: 'D',\n            3: 'D#',\n            4: 'E',\n            5: 'F',\n            6: 'F#',\n            7: 'G',\n            8: 'G#',\n            9: 'A',\n            10: 'A#',\n            11: 'B',\n        };\n        const noteValue = table[integer];\n        if (!noteValue) {\n            throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n        }\n        return noteValue;\n    }\n    // Used by annotation.ts and bend.ts. Clearly this implementation only works for the default font size.\n    // TODO: The actual width depends on the font family, size, weight, style.\n    static textWidth(text) {\n        return 7 * text.toString().length;\n    }\n    static articulationCodes(artic) {\n        return articulations[artic];\n    }\n    static accidentalCodes(accidental) {\n        var _a;\n        return (_a = accidentals[accidental]) !== null && _a !== void 0 ? _a : accidental;\n    }\n    static ornamentCodes(ornament) {\n        var _a;\n        return (_a = ornaments[ornament]) !== null && _a !== void 0 ? _a : ornament;\n    }\n    static keySignature(spec) {\n        const keySpec = keySignatures[spec];\n        if (!keySpec) {\n            throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n        }\n        if (!keySpec.accidental) {\n            return [];\n        }\n        const accidentalList = {\n            b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n            '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n        };\n        const notes = accidentalList[keySpec.accidental];\n        const accList = [];\n        for (let i = 0; i < keySpec.num; ++i) {\n            const line = notes[i];\n            accList.push({ type: keySpec.accidental, line });\n        }\n        return accList;\n    }\n    static getKeySignatures() {\n        return keySignatures;\n    }\n    static hasKeySignature(spec) {\n        return spec in keySignatures;\n    }\n    /**\n     * Convert duration aliases to the number based duration.\n     * If the input isn't an alias, simply return the input.\n     * @param duration\n     * @returns Example: 'q' -> '4', '8' -> '8'\n     */\n    static sanitizeDuration(duration) {\n        const durationNumber = durationAliases[duration];\n        if (durationNumber !== undefined) {\n            duration = durationNumber;\n        }\n        if (durations[duration] === undefined) {\n            throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n        }\n        return duration;\n    }\n    /** Convert the `duration` to a fraction. */\n    static durationToFraction(duration) {\n        return new Fraction().parse(Tables.sanitizeDuration(duration));\n    }\n    /** Convert the `duration` to a number. */\n    static durationToNumber(duration) {\n        return Tables.durationToFraction(duration).value();\n    }\n    /* Convert the `duration` to total ticks. */\n    static durationToTicks(duration) {\n        duration = Tables.sanitizeDuration(duration);\n        const ticks = durations[duration];\n        if (ticks === undefined) {\n            throw new RuntimeError('InvalidDuration');\n        }\n        return ticks;\n    }\n    static codeNoteHead(type, duration) {\n        switch (type) {\n            /* Diamond */\n            case 'D0':\n                return Glyphs.noteheadDiamondWhole;\n            case 'D1':\n                return Glyphs.noteheadDiamondHalf;\n            case 'D2':\n                return Glyphs.noteheadDiamondBlack;\n            case 'D3':\n                return Glyphs.noteheadDiamondBlack;\n            /* Triangle */\n            case 'T0':\n                return Glyphs.noteheadTriangleUpWhole;\n            case 'T1':\n                return Glyphs.noteheadTriangleUpHalf;\n            case 'T2':\n                return Glyphs.noteheadTriangleUpBlack;\n            case 'T3':\n                return Glyphs.noteheadTriangleUpBlack;\n            /* Cross */\n            case 'X0':\n                return Glyphs.noteheadXWhole;\n            case 'X1':\n                return Glyphs.noteheadXHalf;\n            case 'X2':\n                return Glyphs.noteheadXBlack;\n            case 'X3':\n                return Glyphs.noteheadCircleX;\n            /* Square */\n            case 'S1':\n                return Glyphs.noteheadSquareWhite;\n            case 'S2':\n                return Glyphs.noteheadSquareBlack;\n            /* Rectangle */\n            case 'R1':\n                return Glyphs.noteheadSquareWhite; // no smufl code\n            case 'R2':\n                return Glyphs.noteheadSquareWhite; // no smufl code\n            case 'DO':\n                return Glyphs.noteheadTriangleUpBlack;\n            case 'RE':\n                return Glyphs.noteheadMoonBlack;\n            case 'MI':\n                return Glyphs.noteheadDiamondBlack;\n            case 'FA':\n                return Glyphs.noteheadTriangleLeftBlack;\n            case 'FAUP':\n                return Glyphs.noteheadTriangleRightBlack;\n            case 'SO':\n                return Glyphs.noteheadBlack;\n            case 'LA':\n                return Glyphs.noteheadSquareBlack;\n            case 'TI':\n                return Glyphs.noteheadTriangleRoundDownBlack;\n            case 'DI': // Diamond\n            case 'H': // Harmonics\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadDiamondDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadDiamondWhole;\n                    case '2':\n                        return Glyphs.noteheadDiamondHalf;\n                    default:\n                        return Glyphs.noteheadDiamondBlack;\n                }\n            case 'X':\n            case 'M': // Muted\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadXDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadXWhole;\n                    case '2':\n                        return Glyphs.noteheadXHalf;\n                    default:\n                        return Glyphs.noteheadXBlack;\n                }\n            case 'CX':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadCircleXDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadCircleXWhole;\n                    case '2':\n                        return Glyphs.noteheadCircleXHalf;\n                    default:\n                        return Glyphs.noteheadCircleX;\n                }\n            case 'CI':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadCircledDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadCircledWhole;\n                    case '2':\n                        return Glyphs.noteheadCircledHalf;\n                    default:\n                        return Glyphs.noteheadCircledBlack;\n                }\n            case 'SQ':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadDoubleWholeSquare;\n                    case '1':\n                        return Glyphs.noteheadSquareWhite;\n                    case '2':\n                        return Glyphs.noteheadSquareWhite;\n                    default:\n                        return Glyphs.noteheadSquareBlack;\n                }\n            case 'TU':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadTriangleUpDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadTriangleUpWhole;\n                    case '2':\n                        return Glyphs.noteheadTriangleUpHalf;\n                    default:\n                        return Glyphs.noteheadTriangleUpBlack;\n                }\n            case 'TD':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadTriangleDownDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadTriangleDownWhole;\n                    case '2':\n                        return Glyphs.noteheadTriangleDownHalf;\n                    default:\n                        return Glyphs.noteheadTriangleDownBlack;\n                }\n            case 'SF':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadSlashedDoubleWhole1;\n                    case '1':\n                        return Glyphs.noteheadSlashedWhole1;\n                    case '2':\n                        return Glyphs.noteheadSlashedHalf1;\n                    default:\n                        return Glyphs.noteheadSlashedBlack1;\n                }\n            case 'SB':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadSlashedDoubleWhole2;\n                    case '1':\n                        return Glyphs.noteheadSlashedWhole2;\n                    case '2':\n                        return Glyphs.noteheadSlashedHalf2;\n                    default:\n                        return Glyphs.noteheadSlashedBlack2;\n                }\n            case 'R':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.restDoubleWhole;\n                    case '1':\n                        return Glyphs.restWhole;\n                    case '2':\n                        return Glyphs.restHalf;\n                    case '4':\n                        return Glyphs.restQuarter;\n                    case '8':\n                        return Glyphs.rest8th;\n                    case '16':\n                        return Glyphs.rest16th;\n                    case '32':\n                        return Glyphs.rest32nd;\n                    case '64':\n                        return Glyphs.rest64th;\n                    case '128':\n                        return Glyphs.rest128th;\n                }\n                break;\n            case 'S':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadSlashWhiteDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadSlashWhiteWhole;\n                    case '2':\n                        return Glyphs.noteheadSlashWhiteHalf;\n                    default:\n                        return Glyphs.noteheadSlashVerticalEnds;\n                }\n            default:\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadWhole;\n                    case '2':\n                        return Glyphs.noteheadHalf;\n                    default:\n                        return Glyphs.noteheadBlack;\n                }\n        }\n        return Glyphs.null;\n    }\n}\nTables.UNISON = true;\nTables.SOFTMAX_FACTOR = 10;\nTables.STEM_WIDTH = 1.5;\nTables.STEM_HEIGHT = 35;\nTables.STAVE_LINE_THICKNESS = 1;\nTables.RENDER_PRECISION_PLACES = 3;\nTables.RESOLUTION = RESOLUTION;\n// 1/2, 1, 2, 4, 8, 16, 32, 64, 128\n// NOTE: There is no 256 here! However, there are other mentions of 256 in this file.\n// For example, in durations has a 256 key, and sanitizeDuration() can return 256.\n// The sanitizeDuration() bit may need to be removed by 0xfe.\nTables.durationCodes = {\n    '1/2': {\n        stem: false,\n    },\n    1: {\n        stem: false,\n    },\n    2: {\n        stem: true,\n    },\n    4: {\n        stem: true,\n    },\n    8: {\n        stem: true,\n        beamCount: 1,\n        stemBeamExtension: 0,\n        codeFlagUp: Glyphs.flag8thUp,\n    },\n    16: {\n        beamCount: 2,\n        stemBeamExtension: 0,\n        stem: true,\n        codeFlagUp: Glyphs.flag16thUp,\n    },\n    32: {\n        beamCount: 3,\n        stemBeamExtension: 7.5,\n        stem: true,\n        codeFlagUp: Glyphs.flag32ndUp,\n    },\n    64: {\n        beamCount: 4,\n        stemBeamExtension: 15,\n        stem: true,\n        codeFlagUp: Glyphs.flag64thUp,\n    },\n    128: {\n        beamCount: 5,\n        stemBeamExtension: 22.5,\n        stem: true,\n        codeFlagUp: Glyphs.flag128thUp,\n    },\n};\nTables.NOTATION_FONT_SCALE = 39;\nTables.TABLATURE_FONT_SCALE = 39;\nTables.SLASH_NOTEHEAD_WIDTH = 15;\nTables.STAVE_LINE_DISTANCE = 10;\n// HACK:\n// Since text origins are positioned at the baseline, we must\n// compensate for the ascender of the text. Of course, 1 staff space is\n// a very poor approximation.\n//\n// This will be deprecated in the future. This is a temporary solution until\n// we have more robust text metrics.\nTables.TEXT_HEIGHT_OFFSET_HACK = 1;\nTables.accidentalColumnsTable = accidentalColumns;\n// TODO: Should these be moved to glyphs.ts? We could have a non-SMuFL section....\nTables.unicode = {\n    // ♯ accidental sharp\n    sharp: '\\u266f',\n    // ♭ accidental flat\n    flat: '\\u266d',\n    // ♮ accidental natural\n    natural: '\\u266e',\n    // △ major seventh\n    triangle: '\\u25b3',\n    // ø half-diminished\n    'o-with-slash': '\\u00f8',\n    // ° diminished\n    degrees: '\\u00b0',\n    // ○ diminished\n    circle: '\\u25cb',\n};\n/* The list of valid note types. Used by note.ts during parseNoteStruct(). */\nTables.validTypes = validNoteTypes;\n// Default time signature.\nTables.TIME4_4 = {\n    numBeats: 4,\n    beatValue: 4,\n    resolution: RESOLUTION,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _Accidental_checkCollision;\nimport { Fraction } from './fraction';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Music } from './music';\nimport { Tables } from './tables';\nimport { Category, isAccidental, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Accidental.DEBUG)\n        log('VexFlow.Accidental', args);\n}\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\nexport class Accidental extends Modifier {\n    /** Accidentals category string. */\n    static get CATEGORY() {\n        return Category.Accidental;\n    }\n    /** Arrange accidentals inside a ModifierContext. */\n    static format(accidentals, state) {\n        // If there are no accidentals, no need to format their positions.\n        if (!accidentals || accidentals.length === 0)\n            return;\n        const noteheadAccidentalPadding = Metrics.get('Accidental.noteheadAccidentalPadding');\n        const leftShift = state.leftShift + noteheadAccidentalPadding;\n        const accidentalSpacing = Metrics.get('Accidental.accidentalSpacing');\n        const additionalPadding = Metrics.get('Accidental.leftPadding'); // padding to the left of all accidentals\n        const accidentalLinePositionsAndSpaceNeeds = [];\n        let prevNote = undefined;\n        let extraXSpaceNeededForLeftDisplacedNotehead = 0;\n        // First determine the accidentals' Y positions from the note.keys\n        for (let i = 0; i < accidentals.length; ++i) {\n            const accidental = accidentals[i];\n            const note = accidental.getNote();\n            const stave = note.getStave();\n            const index = accidental.checkIndex();\n            const props = note.getKeyProps()[index];\n            if (note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    // If the current extra left-space needed isn't as big as this note's,\n                    // then we need to use this note's.\n                    extraXSpaceNeededForLeftDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx() - note.getXShift(), extraXSpaceNeededForLeftDisplacedNotehead);\n                }\n                prevNote = note;\n            }\n            if (stave) {\n                const lineSpace = stave.getSpacingBetweenLines();\n                const y = stave.getYForLine(props.line);\n                const accLine = Math.round((y / lineSpace) * 2) / 2;\n                accidentalLinePositionsAndSpaceNeeds.push({\n                    y,\n                    line: accLine,\n                    extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,\n                    accidental: accidental,\n                    spacingBetweenStaveLines: lineSpace,\n                });\n            }\n            else {\n                accidentalLinePositionsAndSpaceNeeds.push({\n                    line: props.line,\n                    extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,\n                    accidental: accidental,\n                });\n            }\n        }\n        // Sort accidentals by line number.\n        accidentalLinePositionsAndSpaceNeeds.sort((a, b) => b.line - a.line);\n        const staveLineAccidentalLayoutMetrics = [];\n        // amount by which all accidentals must be shifted right or left for\n        // stem flipping, notehead shifting concerns.\n        let maxExtraXSpaceNeeded = 0;\n        // Create an array of unique line numbers (staveLineAccidentalLayoutMetrics)\n        // from accidentalLinePositionsAndSpaceNeeds\n        for (let i = 0; i < accidentalLinePositionsAndSpaceNeeds.length; i++) {\n            const accidentalLinePositionAndSpaceNeeds = accidentalLinePositionsAndSpaceNeeds[i];\n            const accidentalType = accidentalLinePositionAndSpaceNeeds.accidental.type;\n            const priorLineMetric = staveLineAccidentalLayoutMetrics[staveLineAccidentalLayoutMetrics.length - 1];\n            let currentLineMetric;\n            // if this is the first line, or a new line, add a staveLineAccidentalLayoutMetric\n            if (!priorLineMetric || (priorLineMetric === null || priorLineMetric === void 0 ? void 0 : priorLineMetric.line) !== accidentalLinePositionAndSpaceNeeds.line) {\n                currentLineMetric = {\n                    line: accidentalLinePositionAndSpaceNeeds.line,\n                    flatLine: true,\n                    dblSharpLine: true,\n                    numAcc: 0,\n                    width: 0,\n                    column: 0,\n                };\n                staveLineAccidentalLayoutMetrics.push(currentLineMetric);\n            }\n            else {\n                currentLineMetric = priorLineMetric;\n            }\n            // if this accidental is not a flat, the accidental needs 3.0 lines lower\n            // clearance instead of 2.5 lines for b or bb.\n            if (accidentalType !== 'b' && accidentalType !== 'bb') {\n                currentLineMetric.flatLine = false;\n            }\n            // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n            if (accidentalType !== '##') {\n                currentLineMetric.dblSharpLine = false;\n            }\n            // Track how many accidentals are on this line:\n            currentLineMetric.numAcc++;\n            // Track the total xOffset needed for this line which will be needed\n            // for formatting lines w/ multiple accidentals:\n            // width = accidental width + universal spacing between accidentals\n            currentLineMetric.width += accidentalLinePositionAndSpaceNeeds.accidental.getWidth() + accidentalSpacing;\n            // if this extraXSpaceNeeded is the largest so far, use it as the starting point for\n            // all accidental columns.\n            maxExtraXSpaceNeeded = Math.max(accidentalLinePositionAndSpaceNeeds.extraXSpaceNeeded, maxExtraXSpaceNeeded);\n        }\n        // ### Place Accidentals in Columns\n        //\n        // Default to a classic triangular layout (middle accidental farthest left),\n        // but follow exceptions as outlined in G. Read's _Music Notation_ and\n        // Elaine Gould's _Behind Bars_.\n        //\n        // Additionally, this implements different vertical collision rules for\n        // flats (only need 2.5 lines clearance below) and double sharps (only\n        // need 2.5 lines of clearance above or below).\n        //\n        // Classic layouts and exception patterns are found in the 'tables.js'\n        // in 'Tables.accidentalColumnsTable'\n        //\n        // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n        // using as few columns as possible for the verticle structure.\n        //\n        // TODO (?): Allow column to be specified for an accidental at run-time?\n        let totalColumns = 0;\n        // establish the boundaries for a group of notes with clashing accidentals:\n        for (let i = 0; i < staveLineAccidentalLayoutMetrics.length; i++) {\n            let noFurtherConflicts = false;\n            const groupStart = i;\n            let groupEnd = i;\n            while (groupEnd + 1 < staveLineAccidentalLayoutMetrics.length && !noFurtherConflicts) {\n                // if this note conflicts with the next:\n                if (__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[groupEnd], staveLineAccidentalLayoutMetrics[groupEnd + 1])) {\n                    // include the next note in the group:\n                    groupEnd++;\n                }\n                else {\n                    noFurtherConflicts = true;\n                }\n            }\n            // Gets an a line from the `lineList`, relative to the current group\n            const getGroupLine = (index) => staveLineAccidentalLayoutMetrics[groupStart + index];\n            const getGroupLines = (indexes) => indexes.map(getGroupLine);\n            const lineDifference = (indexA, indexB) => {\n                const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n                return a - b;\n            };\n            const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, line1, line2));\n            // Set columns for the lines in this group:\n            const groupLength = groupEnd - groupStart + 1;\n            // Set the accidental column for each line of the group\n            let endCase = __classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[groupStart], staveLineAccidentalLayoutMetrics[groupEnd])\n                ? 'a'\n                : 'b';\n            switch (groupLength) {\n                case 3:\n                    if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n                        endCase = 'secondOnBottom';\n                    }\n                    break;\n                case 4:\n                    if (notColliding([0, 2], [1, 3])) {\n                        endCase = 'spacedOutTetrachord';\n                    }\n                    break;\n                case 5:\n                    if (endCase === 'b' && notColliding([1, 3])) {\n                        endCase = 'spacedOutPentachord';\n                        if (notColliding([0, 2], [2, 4])) {\n                            endCase = 'verySpacedOutPentachord';\n                        }\n                    }\n                    break;\n                case 6:\n                    if (notColliding([0, 3], [1, 4], [2, 5])) {\n                        endCase = 'spacedOutHexachord';\n                    }\n                    if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n                        endCase = 'verySpacedOutHexachord';\n                    }\n                    break;\n                default:\n                    break;\n            }\n            let groupMember;\n            let column;\n            // If the group contains seven members or more, use ascending parallel lines\n            // of accidentals, using as few columns as possible while avoiding collisions.\n            if (groupLength >= 7) {\n                // First, determine how many columns to use:\n                let patternLength = 2;\n                let collisionDetected = true;\n                while (collisionDetected === true) {\n                    collisionDetected = false;\n                    for (let line = 0; line + patternLength < staveLineAccidentalLayoutMetrics.length; line++) {\n                        if (__classPrivateFieldGet(this, _a, \"m\", _Accidental_checkCollision).call(this, staveLineAccidentalLayoutMetrics[line], staveLineAccidentalLayoutMetrics[line + patternLength])) {\n                            collisionDetected = true;\n                            patternLength++;\n                            break;\n                        }\n                    }\n                }\n                // Then, assign a column to each line of accidentals\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = ((groupMember - i) % patternLength) + 1;\n                    staveLineAccidentalLayoutMetrics[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            else {\n                // If the group contains fewer than seven members, use the layouts from\n                // the Tables.accidentalColumnsTable (See: tables.ts).\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n                    staveLineAccidentalLayoutMetrics[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            // Increment i to the last note that was set, so that if a lower set of notes\n            // does not conflict at all with this group, it can have its own classic shape.\n            i = groupEnd;\n        }\n        // ### Convert Columns to xOffsets\n        //\n        // This keeps columns aligned, even if they have different accidentals within them\n        // which sometimes results in a larger xOffset than is an accidental might need\n        // to preserve the symmetry of the accidental shape.\n        //\n        // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n        // music with complex chord clusters.\n        //\n        // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n        // parallel columns.\n        // track each column's max width, which will be used as initial shift of later columns:\n        const columnWidths = [];\n        const columnXOffsets = [];\n        for (let i = 0; i <= totalColumns; i++) {\n            columnWidths[i] = 0;\n            columnXOffsets[i] = 0;\n        }\n        columnWidths[0] = leftShift + maxExtraXSpaceNeeded;\n        columnXOffsets[0] = leftShift;\n        // Fill columnWidths with widest needed x-space;\n        // this is what keeps the columns parallel.\n        staveLineAccidentalLayoutMetrics.forEach((line) => {\n            if (line.width > columnWidths[line.column])\n                columnWidths[line.column] = line.width;\n        });\n        for (let i = 1; i < columnWidths.length; i++) {\n            // this column's offset = this column's width + previous column's offset\n            columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n        }\n        const totalShift = columnXOffsets[columnXOffsets.length - 1];\n        // Set the xShift for each accidental according to column offsets:\n        let accCount = 0;\n        staveLineAccidentalLayoutMetrics.forEach((line) => {\n            let lineWidth = 0;\n            const lastAccOnLine = accCount + line.numAcc;\n            // handle all of the accidentals on a given line:\n            for (accCount; accCount < lastAccOnLine; accCount++) {\n                const xShift = columnXOffsets[line.column - 1] + lineWidth + maxExtraXSpaceNeeded;\n                accidentalLinePositionsAndSpaceNeeds[accCount].accidental.setXShift(xShift);\n                // keep track of the width of accidentals we've added so far, so that when\n                // we loop, we add space for them.\n                lineWidth += accidentalLinePositionsAndSpaceNeeds[accCount].accidental.getWidth() + accidentalSpacing;\n                L('Line, accCount, shift: ', line.line, accCount, xShift);\n            }\n        });\n        // update the overall layout with the full width of the accidental shapes:\n        state.leftShift = totalShift + additionalPadding;\n    }\n    /**\n     * Use this method to automatically apply accidentals to a set of `voices`.\n     * The accidentals will be remembered between all the voices provided.\n     * Optionally, you can also provide an initial `keySignature`.\n     */\n    static applyAccidentals(voices, keySignature) {\n        const tickPositions = [];\n        const tickNoteMap = {};\n        // Sort the tickables in each voice by their tick position in the voice.\n        voices.forEach((voice) => {\n            const tickPosition = new Fraction(0, 1);\n            const tickable = voice.getTickables();\n            tickable.forEach((t) => {\n                if (t.shouldIgnoreTicks())\n                    return;\n                const notesAtPosition = tickNoteMap[tickPosition.value()];\n                if (!notesAtPosition) {\n                    tickPositions.push(tickPosition.value());\n                    tickNoteMap[tickPosition.value()] = [t];\n                }\n                else {\n                    notesAtPosition.push(t);\n                }\n                tickPosition.add(t.getTicks());\n            });\n        });\n        const music = new Music();\n        // Default key signature is C major.\n        if (!keySignature)\n            keySignature = 'C';\n        // Get the scale map, which represents the current state of each pitch.\n        const scaleMapKey = music.createScaleMap(keySignature);\n        const scaleMap = {};\n        tickPositions.forEach((tickPos) => {\n            const tickables = tickNoteMap[tickPos];\n            // Array to store all pitches that modified accidental states\n            // at this tick position\n            const modifiedPitches = [];\n            const processNote = (t) => {\n                // Only StaveNote implements .addModifier(), which is used below.\n                if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n                    return;\n                }\n                // Go through each key and determine if an accidental should be applied.\n                const staveNote = t;\n                staveNote.keys.forEach((keyString, keyIndex) => {\n                    const key = music.getNoteParts(keyString.split('/')[0]);\n                    const octave = keyString.split('/')[1];\n                    // Force a natural for every key without an accidental\n                    const accidentalString = key.accidental || 'n';\n                    const pitch = key.root + accidentalString;\n                    // Determine if the current pitch has the same accidental\n                    // as the scale state\n                    if (!scaleMap[key.root + octave])\n                        scaleMap[key.root + octave] = scaleMapKey[key.root];\n                    const sameAccidental = scaleMap[key.root + octave] === pitch;\n                    // Determine if an identical pitch in the chord already\n                    // modified the accidental state\n                    const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\n                    // Remove accidentals\n                    staveNote.getModifiers().forEach((modifier, index) => {\n                        if (isAccidental(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {\n                            staveNote.getModifiers().splice(index, 1);\n                        }\n                    });\n                    // Add the accidental to the StaveNote\n                    if (!sameAccidental || (sameAccidental && previouslyModified)) {\n                        // Modify the scale map so that the root pitch has an\n                        // updated state\n                        scaleMap[key.root + octave] = pitch;\n                        // Create the accidental\n                        const accidental = new _a(accidentalString);\n                        // Attach the accidental to the StaveNote\n                        staveNote.addModifier(accidental, keyIndex);\n                        // Add the pitch to list of pitches that modified accidentals\n                        modifiedPitches.push(keyString);\n                    }\n                });\n                // process grace notes\n                staveNote.getModifiers().forEach((modifier) => {\n                    if (isGraceNoteGroup(modifier)) {\n                        modifier.getGraceNotes().forEach(processNote);\n                    }\n                });\n            };\n            tickables.forEach(processNote);\n        });\n    }\n    /**\n     * Create accidental.\n     * @param type value from `VexFlow.accidentalCodes.accidentals` table in `tables.ts`.\n     * For example: `#`, `##`, `b`, `n`, etc.\n     */\n    constructor(type) {\n        super();\n        L('New accidental: ', type);\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        // Cautionary accidentals have parentheses around them\n        this.cautionary = false;\n        this.reset();\n    }\n    reset() {\n        this.text = '';\n        if (!this.cautionary) {\n            this.text += Tables.accidentalCodes(this.type);\n            this.fontInfo.size = Metrics.get('Accidental.fontSize');\n        }\n        else {\n            this.text += Tables.accidentalCodes('{');\n            this.text += Tables.accidentalCodes(this.type);\n            this.text += Tables.accidentalCodes('}');\n            this.fontInfo.size = Metrics.get('Accidental.cautionary.fontSize');\n        }\n        // Accidentals attached to grace notes are rendered smaller.\n        if (isGraceNote(this.note)) {\n            this.fontInfo.size = Metrics.get('Accidental.grace.fontSize');\n        }\n    }\n    /** Attach this accidental to `note`, which must be a `StaveNote`. */\n    setNote(note) {\n        defined(note, 'ArgumentError', `Bad note value: ${note}`);\n        this.note = note;\n        this.reset();\n        return this;\n    }\n    /** If called, draws parenthesis around accidental. */\n    setAsCautionary() {\n        this.cautionary = true;\n        this.reset();\n        return this;\n    }\n    /** Render accidental onto canvas. */\n    draw() {\n        const { type, position, index } = this;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // Figure out the start `x` and `y` coordinates for note and index.\n        const start = note.getModifierStartXY(position, index);\n        this.x = start.x - this.width;\n        this.y = start.y;\n        L('Rendering: ', type, start.x, start.y);\n        this.renderText(ctx, 0, 0);\n    }\n}\n_a = Accidental, _Accidental_checkCollision = function _Accidental_checkCollision(line1, line2) {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) {\n        // then line 2 is on top\n        clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n        if (line1.dblSharpLine)\n            clearance -= 0.5;\n    }\n    else {\n        // line 1 is on top\n        clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n        if (line2.dblSharpLine)\n            clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line1, Line2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n};\n/** To enable logging for this class. Set `VexFlow.Accidental.DEBUG` to `true`. */\nAccidental.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStemmableNote, isTabNote } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Annotation.DEBUG)\n        log('VexFlow.Annotation', args);\n}\nexport var AnnotationHorizontalJustify;\n(function (AnnotationHorizontalJustify) {\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));\nexport var AnnotationVerticalJustify;\n(function (AnnotationVerticalJustify) {\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"BOTTOM\"] = 3] = \"BOTTOM\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n    /** Annotations category string. */\n    static get CATEGORY() {\n        return Category.Annotation;\n    }\n    // Use the same padding for annotations as note head so the\n    // words don't run into each other.\n    static get minAnnotationPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Arrange annotations within a `ModifierContext` */\n    static format(annotations, state) {\n        if (!annotations || annotations.length === 0)\n            return false;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (let i = 0; i < annotations.length; ++i) {\n            const annotation = annotations[i];\n            // Text height is expressed in fractional stave spaces.\n            const textLines = (2 + Font.convertSizeToPixelValue(annotation.fontInfo.size)) / Tables.STAVE_LINE_DISTANCE;\n            let verticalSpaceNeeded = textLines;\n            const note = annotation.checkAttachedNote();\n            const glyphWidth = note.getGlyphWidth();\n            // Get the text width from the font metrics.\n            const textWidth = annotation.getWidth();\n            if (annotation.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n                maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                leftWidth = Math.max(leftWidth, textWidth) + Annotation.minAnnotationPadding;\n            }\n            else if (annotation.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n                maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                rightWidth = Math.max(rightWidth, textWidth);\n            }\n            else {\n                leftWidth = Math.max(leftWidth, textWidth / 2) + Annotation.minAnnotationPadding;\n                rightWidth = Math.max(rightWidth, textWidth / 2);\n                maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n            }\n            const stave = note.getStave();\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            let lines = 5;\n            if (isTabNote(note)) {\n                if (note.renderOptions.drawStem) {\n                    const stem = note.getStem();\n                    if (stem) {\n                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                    }\n                }\n                else {\n                    stemHeight = 0;\n                }\n            }\n            else if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem && note.getNoteType() === 'n') {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (annotation.verticalJustification === this.VerticalJustify.TOP) {\n                let noteLine = note.getLineNumber(true);\n                if (isTabNote(note)) {\n                    noteLine = lines - (note.leastString() - 0.5);\n                }\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                const curTop = noteLine + state.topTextLine + 0.5;\n                if (curTop < lines) {\n                    annotation.setTextLine(lines - noteLine);\n                    verticalSpaceNeeded += lines - noteLine;\n                    state.topTextLine = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.topTextLine);\n                    state.topTextLine += verticalSpaceNeeded;\n                }\n            }\n            else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {\n                let noteLine = lines - note.getLineNumber();\n                if (isTabNote(note)) {\n                    noteLine = note.greatestString() - 1;\n                }\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                const curBottom = noteLine + state.textLine + 1;\n                if (curBottom < lines) {\n                    annotation.setTextLine(lines - curBottom);\n                    verticalSpaceNeeded += lines - curBottom;\n                    state.textLine = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.textLine);\n                    state.textLine += verticalSpaceNeeded;\n                }\n            }\n            else {\n                annotation.setTextLine(state.textLine);\n            }\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));\n        state.leftShift += leftOverlap;\n        state.rightShift += rightOverlap;\n        return true;\n    }\n    /**\n     * Annotations inherit from `Modifier` and is positioned correctly when\n     * in a `ModifierContext`.\n     * Create a new `Annotation` with the string `text`.\n     */\n    constructor(text) {\n        super();\n        this.text = text;\n        this.horizontalJustification = AnnotationHorizontalJustify.CENTER;\n        // warning: the default in the constructor is TOP, but in the factory the default is BOTTOM.\n        // this is to support legacy application that may expect this.\n        this.verticalJustification = AnnotationVerticalJustify.TOP;\n    }\n    /**\n     * Set vertical position of text (above or below stave).\n     * @param just value in `AnnotationVerticalJustify`.\n     */\n    setVerticalJustification(just) {\n        this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n        return this;\n    }\n    /**\n     * Get horizontal justification.\n     */\n    getJustification() {\n        return this.horizontalJustification;\n    }\n    /**\n     * Set horizontal justification.\n     * @param justification value in `Annotation.Justify`.\n     */\n    setJustification(just) {\n        this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;\n        return this;\n    }\n    /** Render text beside the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        const start = note.getModifierStartXY(ModifierPosition.ABOVE, this.index);\n        this.setRendered();\n        // Apply style might not save context, if this.style is undefined, so we\n        // still need to save context state just before this, since we will be\n        // changing ctx parameters below.\n        this.applyStyle();\n        ctx.openGroup('annotation', this.getAttribute('id'));\n        const textWidth = this.getWidth();\n        const textHeight = Font.convertSizeToPixelValue(this.fontInfo.size);\n        let x;\n        let y;\n        if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n            x = start.x - textWidth;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {\n            x = start.x - textWidth / 2;\n        } /* CENTER_STEM */\n        else {\n            x = note.getStemX() - textWidth / 2;\n        }\n        let stemExt = {};\n        let spacing = 0;\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        if (hasStem) {\n            stemExt = note.checkStem().getExtents();\n            spacing = stave.getSpacingBetweenLines();\n        }\n        if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {\n            // Use the largest (lowest) Y value\n            const ys = note.getYs();\n            y = ys.reduce((a, b) => (a > b ? a : b));\n            y += (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE + textHeight;\n            if (hasStem && stemDirection === Stem.DOWN) {\n                y = Math.max(y, stemExt.topY + textHeight + spacing * this.textLine);\n            }\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {\n            const yt = note.getYForTopText(this.textLine) - 1;\n            const yb = stave.getYForBottomText(this.textLine);\n            y = yt + (yb - yt) / 2 + textHeight / 2;\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {\n            const topY = Math.min(...note.getYs());\n            y = topY - (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE;\n            if (hasStem && stemDirection === Stem.UP) {\n                // If the stem is above the stave already, go with default line width vs. actual\n                // since the lines between don't really matter.\n                spacing = stemExt.topY < stave.getTopLineTopY() ? Tables.STAVE_LINE_DISTANCE : spacing;\n                y = Math.min(y, stemExt.topY - spacing * (this.textLine + 1));\n            }\n        } /* CENTER_STEM */\n        else {\n            const extents = note.getStemExtents();\n            y = extents.topY + (extents.baseY - extents.topY) / 2 + textHeight / 2;\n        }\n        L('Rendering annotation: ', this.text, x, y);\n        this.x = x;\n        this.y = y;\n        this.renderText(ctx, 0, 0);\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Annotation.DEBUG` to `true`. */\nAnnotation.DEBUG = false;\n/** Text annotations can be positioned and justified relative to the note. */\nAnnotation.HorizontalJustify = AnnotationHorizontalJustify;\nAnnotation.HorizontalJustifyString = {\n    left: AnnotationHorizontalJustify.LEFT,\n    right: AnnotationHorizontalJustify.RIGHT,\n    center: AnnotationHorizontalJustify.CENTER,\n    centerStem: AnnotationHorizontalJustify.CENTER_STEM,\n};\nAnnotation.VerticalJustify = AnnotationVerticalJustify;\nAnnotation.VerticalJustifyString = {\n    above: AnnotationVerticalJustify.TOP,\n    top: AnnotationVerticalJustify.TOP,\n    below: AnnotationVerticalJustify.BOTTOM,\n    bottom: AnnotationVerticalJustify.BOTTOM,\n    center: AnnotationVerticalJustify.CENTER,\n    centerStem: AnnotationVerticalJustify.CENTER_STEM,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Stem.DEBUG)\n        log('VexFlow.Stem', args);\n}\nexport class Stem extends Element {\n    static get CATEGORY() {\n        return Category.Stem;\n    }\n    // Stem directions\n    static get UP() {\n        return 1;\n    }\n    static get DOWN() {\n        return -1;\n    }\n    // Theme\n    static get WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static get HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        super();\n        this.stemUpYOffset = 0;\n        this.stemDownYOffset = 0;\n        this.stemUpYBaseOffset = 0;\n        this.stemDownYBaseOffset = 0;\n        // Default notehead x bounds\n        this.xBegin = (_a = options === null || options === void 0 ? void 0 : options.xBegin) !== null && _a !== void 0 ? _a : 0;\n        this.xEnd = (_b = options === null || options === void 0 ? void 0 : options.xEnd) !== null && _b !== void 0 ? _b : 0;\n        // Y bounds for top/bottom most notehead\n        this.yTop = (_c = options === null || options === void 0 ? void 0 : options.yTop) !== null && _c !== void 0 ? _c : 0;\n        this.yBottom = (_d = options === null || options === void 0 ? void 0 : options.yBottom) !== null && _d !== void 0 ? _d : 0;\n        // Stem top extension\n        this.stemExtension = (_e = options === null || options === void 0 ? void 0 : options.stemExtension) !== null && _e !== void 0 ? _e : 0;\n        // Direction of the stem\n        this.stemDirection = (_f = options === null || options === void 0 ? void 0 : options.stemDirection) !== null && _f !== void 0 ? _f : 0;\n        // Flag to override all draw calls\n        this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;\n        this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;\n        this.stemletHeight = (_g = options === null || options === void 0 ? void 0 : options.stemletHeight) !== null && _g !== void 0 ? _g : 0;\n        // Use to adjust the rendered height without affecting\n        // the results of `.getExtents()`\n        this.renderHeightAdjustment = 0;\n        this.setOptions(options);\n    }\n    setOptions(options) {\n        var _a, _b, _c, _d;\n        // Changing where the stem meets the head\n        this.stemUpYOffset = (_a = options === null || options === void 0 ? void 0 : options.stemUpYOffset) !== null && _a !== void 0 ? _a : 0;\n        this.stemDownYOffset = (_b = options === null || options === void 0 ? void 0 : options.stemDownYOffset) !== null && _b !== void 0 ? _b : 0;\n        this.stemUpYBaseOffset = (_c = options === null || options === void 0 ? void 0 : options.stemUpYBaseOffset) !== null && _c !== void 0 ? _c : 0;\n        this.stemDownYBaseOffset = (_d = options === null || options === void 0 ? void 0 : options.stemDownYBaseOffset) !== null && _d !== void 0 ? _d : 0;\n    }\n    // Set the x bounds for the default notehead\n    setNoteHeadXBounds(xBegin, xEnd) {\n        this.xBegin = xBegin;\n        this.xEnd = xEnd;\n        return this;\n    }\n    // Set the direction of the stem in relation to the noteheads\n    setDirection(direction) {\n        this.stemDirection = direction;\n    }\n    // Set the extension for the stem, generally for flags or beams\n    setExtension(ext) {\n        this.stemExtension = ext;\n    }\n    getExtension() {\n        return this.stemExtension;\n    }\n    // The the y bounds for the top and bottom noteheads\n    setYBounds(yTop, yBottom) {\n        this.yTop = yTop;\n        this.yBottom = yBottom;\n    }\n    // Gets the entire height for the stem\n    getHeight() {\n        const yOffset = this.stemDirection === Stem.UP ? this.stemUpYOffset : this.stemDownYOffset;\n        const unsignedHeight = this.yBottom - this.yTop + (Stem.HEIGHT - yOffset + this.stemExtension); // parentheses just for grouping.\n        return unsignedHeight * this.stemDirection;\n    }\n    getBoundingBox() {\n        throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n    }\n    // Get the y coordinates for the very base of the stem to the top of\n    // the extension\n    getExtents() {\n        const isStemUp = this.stemDirection === Stem.UP;\n        const ys = [this.yTop, this.yBottom];\n        const stemHeight = Stem.HEIGHT + this.stemExtension;\n        const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n        const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n        const stemTipY = innerMostNoteheadY + stemHeight * -this.stemDirection;\n        return { topY: stemTipY, baseY: outerMostNoteheadY };\n    }\n    setVisibility(isVisible) {\n        this.hide = !isVisible;\n        return this;\n    }\n    setStemlet(isStemlet, stemletHeight) {\n        this.isStemlet = isStemlet;\n        this.stemletHeight = stemletHeight;\n        return this;\n    }\n    adjustHeightForFlag() {\n        this.renderHeightAdjustment = Metrics.get('Stem.heightAdjustmentForFlag', -3);\n    }\n    adjustHeightForBeam() {\n        this.renderHeightAdjustment = -Stem.WIDTH / 2;\n    }\n    // Render the stem onto the canvas\n    draw() {\n        this.setRendered();\n        if (this.hide)\n            return;\n        const ctx = this.checkContext();\n        let stemX;\n        let stemY;\n        const stemDirection = this.stemDirection;\n        let yBaseOffset = 0;\n        if (stemDirection === Stem.DOWN) {\n            // Down stems are rendered to the left of the head.\n            stemX = this.xBegin;\n            stemY = this.yTop + this.stemDownYOffset;\n            yBaseOffset = this.stemDownYBaseOffset;\n        }\n        else {\n            // Up stems are rendered to the right of the head.\n            stemX = this.xEnd;\n            stemY = this.yBottom - this.stemUpYOffset;\n            yBaseOffset = this.stemUpYBaseOffset;\n        }\n        const stemHeight = this.getHeight();\n        L('Rendering stem - ', 'Top Y: ', this.yTop, 'Bottom Y: ', this.yBottom);\n        // The offset from the stem's base which is required fo satisfy the stemlet height\n        const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stemDirection : 0;\n        // Draw the stem\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('stem', this.getAttribute('id'));\n        ctx.beginPath();\n        ctx.setLineWidth(Stem.WIDTH);\n        ctx.moveTo(stemX, stemY - stemletYOffset + yBaseOffset);\n        ctx.lineTo(stemX, stemY - stemHeight - this.renderHeightAdjustment * stemDirection);\n        ctx.stroke();\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Stem.DEBUG` to `true`. */\nStem.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns.\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isGraceNote, isStaveNote, isStemmableNote, isTabNote } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Articulation.DEBUG)\n        log('VexFlow.Articulation', args);\n}\nconst { ABOVE, BELOW } = Modifier.Position;\nfunction roundToNearestHalf(mathFn, value) {\n    return mathFn(value / 0.5) * 0.5;\n}\n// This includes both staff and ledger lines\nfunction isWithinLines(line, position) {\n    return position === ABOVE ? line <= 5 : line >= 1;\n}\nfunction getRoundingFunction(line, position) {\n    if (isWithinLines(line, position)) {\n        if (position === ABOVE) {\n            return Math.ceil;\n        }\n        else {\n            return Math.floor;\n        }\n    }\n    else {\n        return Math.round;\n    }\n}\nfunction snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {\n    // Initially, snap to nearest staff line or space\n    const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n    const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n    const onStaffLine = snappedLine % 1 === 0;\n    if (canSnapToStaffSpace && onStaffLine) {\n        const HALF_STAFF_SPACE = 0.5;\n        return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n    }\n    else {\n        return snappedLine;\n    }\n}\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nconst isStaveOrGraceNote = (note) => isStaveNote(note) || isGraceNote(note);\nexport function getTopY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return stemBaseY;\n            }\n        }\n        else {\n            return Math.min(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return note.checkStave().getYForTopText(textLine);\n            }\n        }\n        else {\n            return note.checkStave().getYForTopText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\nexport function getBottomY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemBaseY;\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return Math.max(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return note.checkStave().getYForBottomText(textLine);\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return note.checkStave().getYForBottomText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nexport function getInitialOffset(note, position) {\n    const isOnStemTip = (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n        (position === BELOW && note.getStemDirection() === Stem.DOWN);\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem() && isOnStemTip) {\n            return 0.5;\n        }\n        else {\n            // this amount is larger than the stem-tip offset because we start from\n            // the center of the notehead\n            return 1;\n        }\n    }\n    else {\n        if (note.hasStem() && isOnStemTip) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `VexFlow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n    /** Articulations category string. */\n    static get CATEGORY() {\n        return Category.Articulation;\n    }\n    /**\n     * FIXME:\n     * Most of the complex formatting logic (ie: snapping to space) is\n     * actually done in .render(). But that logic belongs in this method.\n     *\n     * Unfortunately, this isn't possible because, by this point, stem lengths\n     * have not yet been finalized. Finalized stem lengths are required to determine the\n     * initial position of any stem-side articulation.\n     *\n     * This indicates that all objects should have their stave set before being\n     * formatted. It can't be an optional if you want accurate vertical positioning.\n     * Consistently positioned articulations that play nice with other modifiers\n     * won't be possible until we stop relying on render-time formatting.\n     *\n     * Ideally, when this function has completed, the vertical articulation positions\n     * should be ready to render without further adjustment. But the current state\n     * is far from this ideal.\n     */\n    static format(articulations, state) {\n        if (!articulations || articulations.length === 0)\n            return false;\n        const margin = 0.5;\n        let maxGlyphWidth = 0;\n        const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), articulation.height / 10 + margin);\n        articulations.forEach((articulation) => {\n            const note = articulation.checkAttachedNote();\n            maxGlyphWidth = Math.max(note.getGlyphWidth(), maxGlyphWidth);\n            let lines = 5;\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            // Decide if we need to consider beam direction in placement.\n            if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem) {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            const stave = note.getStave();\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (articulation.getPosition() === ABOVE) {\n                let noteLine = note.getLineNumber(true);\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.topTextLine, ABOVE);\n                const curTop = noteLine + state.topTextLine + 0.5;\n                // If articulation must be above stave, add lines between note and stave top\n                if (!articulation.articulation.betweenLines && curTop < lines) {\n                    increment += lines - curTop;\n                }\n                articulation.setTextLine(state.topTextLine);\n                state.topTextLine += increment;\n            }\n            else if (articulation.getPosition() === BELOW) {\n                let noteLine = Math.max(lines - note.getLineNumber(), 0);\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.textLine, BELOW);\n                const curBottom = noteLine + state.textLine + 0.5;\n                // if articulation must be below stave, add lines from note to stave bottom\n                if (!articulation.articulation.betweenLines && curBottom < lines) {\n                    increment += lines - curBottom;\n                }\n                articulation.setTextLine(state.textLine);\n                state.textLine += increment;\n            }\n        });\n        const width = articulations\n            .map((articulation) => articulation.getWidth())\n            .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n        const overlap = Math.min(Math.max(width - maxGlyphWidth, 0), Math.max(width - (state.leftShift + state.rightShift), 0));\n        state.leftShift += overlap / 2;\n        state.rightShift += overlap / 2;\n        return true;\n    }\n    static easyScoreHook({ articulations }, note, builder) {\n        if (!articulations)\n            return;\n        const articNameToCode = {\n            staccato: 'a.',\n            tenuto: 'a-',\n            accent: 'a>',\n        };\n        articulations\n            .split(',')\n            .map((articString) => articString.trim().split('.'))\n            .map(([name, position]) => {\n            const artic = { type: articNameToCode[name] };\n            if (position)\n                artic.position = Modifier.PositionString[position];\n            return builder.getFactory().Articulation(artic);\n        })\n            .map((artic) => note.addModifier(artic, 0));\n    }\n    /**\n     * Create a new articulation.\n     * @param type entry in `VexFlow.articulationCodes` in `tables.ts` or Glyph code.\n     *\n     * Notes default positions (see https://w3c.github.io/smufl/latest/tables/articulation.html):\n     * - Even codes will be positioned ABOVE\n     * - Odd codes will be positioned BELOW\n     */\n    constructor(type) {\n        var _a;\n        super();\n        this.heightShift = 0;\n        this.type = type;\n        this.position = ABOVE;\n        if (!Tables.articulationCodes(this.type)) {\n            if (((_a = this.type.codePointAt(0)) !== null && _a !== void 0 ? _a : 0) % 2 === 0)\n                this.position = ABOVE;\n            else\n                this.position = BELOW;\n        }\n        this.articulation = { betweenLines: false };\n        this.reset();\n    }\n    reset() {\n        this.articulation = Tables.articulationCodes(this.type);\n        // Use type as glyph code, if not defined as articulation code\n        if (!this.articulation) {\n            this.articulation = { code: this.type, betweenLines: false };\n        }\n        const code = (this.position === ABOVE ? this.articulation.aboveCode : this.articulation.belowCode) ||\n            this.articulation.code ||\n            Glyphs.null;\n        this.text = code;\n    }\n    /** Set if articulation should be rendered between lines. */\n    setBetweenLines(betweenLines = true) {\n        this.articulation.betweenLines = betweenLines;\n        return this;\n    }\n    /** Render articulation in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const index = this.checkIndex();\n        const { position, textLine } = this;\n        const canSitBetweenLines = this.articulation.betweenLines;\n        const stave = note.checkStave();\n        const staffSpace = stave.getSpacingBetweenLines();\n        const isTab = isTabNote(note);\n        // Articulations are centered over/under the note head.\n        const { x } = note.getModifierStartXY(position, index);\n        const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n        const initialOffset = getInitialOffset(note, position);\n        let y = {\n            [ABOVE]: () => {\n                this.setOrigin(0.5, 1);\n                const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n            [BELOW]: () => {\n                this.setOrigin(0.5, 0);\n                const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n        }[position]();\n        if (!isTab) {\n            const offsetDirection = position === ABOVE ? -1 : +1;\n            const noteLine = note.getKeyProps()[index].line;\n            const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n            const articLine = distanceFromNote + Number(noteLine);\n            const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n            if (isWithinLines(snappedLine, position))\n                this.setOrigin(0.5, 0.5);\n            y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;\n        }\n        L(`Rendering articulation at (x: ${x}, y: ${y})`);\n        this.x = x;\n        this.y = y;\n        this.renderText(ctx, 0, 0);\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Articulation.DEBUG` to `true`. */\nArticulation.DEBUG = false;\nArticulation.INITIAL_OFFSET = -0.5;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Category } from './typeguard';\nexport class RenderContext {\n    static get CATEGORY() {\n        return Category.RenderContext;\n    }\n    set font(f) {\n        this.setFont(f);\n    }\n    get font() {\n        return this.getFont();\n    }\n}\n/**\n * Draw a tiny dot marker on the specified context. A great debugging aid.\n * @param ctx context\n * @param x dot x coordinate\n * @param y dot y coordinate\n * @param color\n */\nexport function drawDot(ctx, x, y, color = '#F55') {\n    ctx.save();\n    ctx.setFillStyle(color);\n    // draw a circle\n    ctx.beginPath();\n    ctx.arc(x, y, 3, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _Tickable_preFormatted, _Tickable_postFormatted;\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport class Tickable extends Element {\n    static get CATEGORY() {\n        return Category.Tickable;\n    }\n    constructor() {\n        super();\n        _Tickable_preFormatted.set(this, false);\n        _Tickable_postFormatted.set(this, false);\n        // These properties represent the duration of\n        // this tickable element.\n        this.ticks = new Fraction(0, 1); // Fractional value of ticks\n        this.intrinsicTicks = 0; // Floating point value of ticks\n        this.tickMultiplier = new Fraction(1, 1);\n        this.modifiers = [];\n        this.tupletStack = [];\n        this.alignCenter = false;\n        this.centerXShift = 0; // Shift from tick context if center aligned\n        // This flag tells the formatter to ignore this tickable during\n        // formatting and justification. It is set by tickables such as BarNote.\n        this.ignoreTicks = false;\n        // This is a space for an external formatting class or function to maintain\n        // metrics.\n        this.formatterMetrics = {\n            // The freedom of a tickable is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n            // The simplified rational duration of this tick as a string. It can be\n            // used as an index to a map or hashtable.\n            duration: '',\n            // The number of formatting iterations undergone.\n            iterations: 0,\n            // The space in pixels allocated by this formatter, along with the mean space\n            // for tickables of this duration, and the deviation from the mean.\n            space: {\n                used: 0,\n                mean: 0,\n                deviation: 0,\n            },\n        };\n    }\n    /** Reset the Tickable, this function will be overloaded. */\n    reset() {\n        return this;\n    }\n    /** Return the ticks. */\n    getTicks() {\n        return this.ticks;\n    }\n    /** Check if it ignores the ticks. */\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    /** Ignore the ticks. */\n    setIgnoreTicks(flag) {\n        this.ignoreTicks = flag;\n        return this;\n    }\n    /** Get width of note. Used by the formatter for positioning. */\n    getWidth() {\n        if (!__classPrivateFieldGet(this, _Tickable_preFormatted, \"f\")) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n        }\n        return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n    }\n    /** Get `x` position of this tick context. */\n    getX() {\n        const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n        return tickContext.getX() + this.xShift;\n    }\n    /** Return the formatterMetrics. */\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n    /** Return the center `x` shift. */\n    getCenterXShift() {\n        if (this.isCenterAligned()) {\n            return this.centerXShift;\n        }\n        return 0;\n    }\n    /** Set the center `x` shift. */\n    setCenterXShift(centerXShift) {\n        this.centerXShift = centerXShift;\n        return this;\n    }\n    // Check if tickable is center aligned. */\n    isCenterAligned() {\n        return this.alignCenter;\n    }\n    // Set/unset center alignment. */\n    setCenterAlignment(alignCenter) {\n        this.alignCenter = alignCenter;\n        return this;\n    }\n    /**\n     * Return the associated voice. Every tickable must be associated with a voice.\n     * This allows formatters and preFormatter to associate them with the right modifierContexts.\n     */\n    getVoice() {\n        return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n    }\n    /** Set the associated voice. */\n    setVoice(voice) {\n        this.voice = voice;\n    }\n    /** Get the tuplet. */\n    getTuplet() {\n        return this.tuplet;\n    }\n    /** Return a list of Tuplets. */\n    getTupletStack() {\n        return this.tupletStack;\n    }\n    /**\n     * Reset the specific Tuplet (if this is not provided, all tuplets are reset).\n     * Remove any prior tuplets from the tick calculation and\n     * reset the intrinsic tick value.\n     */\n    resetTuplet(tuplet) {\n        let noteCount;\n        let notesOccupied;\n        if (tuplet) {\n            const i = this.tupletStack.indexOf(tuplet);\n            if (i !== -1) {\n                this.tupletStack.splice(i, 1);\n                noteCount = tuplet.getNoteCount();\n                notesOccupied = tuplet.getNotesOccupied();\n                // Revert old multiplier by inverting numerator & denom.:\n                this.applyTickMultiplier(noteCount, notesOccupied);\n            }\n            return this;\n        }\n        while (this.tupletStack.length) {\n            tuplet = this.tupletStack.pop();\n            noteCount = tuplet.getNoteCount();\n            notesOccupied = tuplet.getNotesOccupied();\n            // Revert old multiplier by inverting numerator & denom.:\n            this.applyTickMultiplier(noteCount, notesOccupied);\n        }\n        return this;\n    }\n    /** Attach to new tuplet. */\n    setTuplet(tuplet) {\n        if (tuplet) {\n            this.tupletStack.push(tuplet);\n            const noteCount = tuplet.getNoteCount();\n            const notesOccupied = tuplet.getNotesOccupied();\n            this.applyTickMultiplier(notesOccupied, noteCount);\n        }\n        this.tuplet = tuplet;\n        return this;\n    }\n    /**\n     * Add self to the provided ModifierContext `mc`.\n     * If this tickable has modifiers, set modifierContext.\n     * @returns this\n     */\n    addToModifierContext(mc) {\n        this.modifierContext = mc;\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            this.modifierContext.addMember(this.modifiers[i]);\n        }\n        this.modifierContext.addMember(this);\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n        return this;\n    }\n    /**\n     * Optional, if tickable has modifiers, associate a Modifier.\n     * @param mod the modifier\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addModifier(modifier, index = 0) {\n        this.modifiers.push(modifier);\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n        return this;\n    }\n    /** Get the list of associated modifiers. */\n    getModifiers() {\n        return this.modifiers;\n    }\n    /** Set the Tick Context. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        __classPrivateFieldSet(this, _Tickable_preFormatted, false, \"f\");\n    }\n    checkTickContext(message = 'Tickable has no tick context.') {\n        return defined(this.tickContext, 'NoTickContext', message);\n    }\n    /** Preformat the Tickable. */\n    preFormat() {\n        if (__classPrivateFieldGet(this, _Tickable_preFormatted, \"f\"))\n            return;\n        this.width = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            this.width += this.modifierContext.getWidth();\n        }\n    }\n    /** Set preformatted status. */\n    set preFormatted(value) {\n        __classPrivateFieldSet(this, _Tickable_preFormatted, value, \"f\");\n    }\n    get preFormatted() {\n        return __classPrivateFieldGet(this, _Tickable_preFormatted, \"f\");\n    }\n    /** Postformat the Tickable. */\n    postFormat() {\n        if (__classPrivateFieldGet(this, _Tickable_postFormatted, \"f\"))\n            return this;\n        __classPrivateFieldSet(this, _Tickable_postFormatted, true, \"f\");\n        return this;\n    }\n    /** Set postformatted status. */\n    set postFormatted(value) {\n        __classPrivateFieldSet(this, _Tickable_postFormatted, value, \"f\");\n    }\n    get postFormatted() {\n        return __classPrivateFieldGet(this, _Tickable_postFormatted, \"f\");\n    }\n    /** Return the intrinsic ticks. */\n    getIntrinsicTicks() {\n        return this.intrinsicTicks;\n    }\n    /** Set the intrinsic ticks. */\n    setIntrinsicTicks(intrinsicTicks) {\n        this.intrinsicTicks = intrinsicTicks;\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Get the tick multiplier. */\n    getTickMultiplier() {\n        return this.tickMultiplier;\n    }\n    /** Apply a tick multiplier. */\n    applyTickMultiplier(numerator, denominator) {\n        this.tickMultiplier.multiply(numerator, denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Set the duration. */\n    setDuration(duration) {\n        const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(ticks);\n        this.intrinsicTicks = this.ticks.value();\n    }\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        return tickContext.getX();\n    }\n    /** Attach this note to a modifier context. */\n    setModifierContext(mc) {\n        this.modifierContext = mc;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n    }\n}\n_Tickable_preFormatted = new WeakMap(), _Tickable_postFormatted = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport var StaveModifierPosition;\n(function (StaveModifierPosition) {\n    StaveModifierPosition[StaveModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    StaveModifierPosition[StaveModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    StaveModifierPosition[StaveModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    StaveModifierPosition[StaveModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    StaveModifierPosition[StaveModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n    StaveModifierPosition[StaveModifierPosition[\"BEGIN\"] = 5] = \"BEGIN\";\n    StaveModifierPosition[StaveModifierPosition[\"END\"] = 6] = \"END\";\n})(StaveModifierPosition || (StaveModifierPosition = {}));\nexport class StaveModifier extends Element {\n    static get CATEGORY() {\n        return Category.StaveModifier;\n    }\n    static get Position() {\n        return StaveModifierPosition;\n    }\n    constructor() {\n        super();\n        this.padding = 10;\n        this.position = StaveModifierPosition.ABOVE;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setPosition(position) {\n        this.position = position;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getPadding(index) {\n        return index !== undefined && index < 2 ? 0 : this.padding;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    setLayoutMetrics(layoutMetrics) {\n        this.layoutMetrics = layoutMetrics;\n        return this;\n    }\n    getLayoutMetrics() {\n        return this.layoutMetrics;\n    }\n    // eslint-disable-next-line\n    draw(...args) {\n        // DO NOTHING.\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// @author: Larry Kuhns 2011\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport var BarlineType;\n(function (BarlineType) {\n    BarlineType[BarlineType[\"SINGLE\"] = 1] = \"SINGLE\";\n    BarlineType[BarlineType[\"DOUBLE\"] = 2] = \"DOUBLE\";\n    BarlineType[BarlineType[\"END\"] = 3] = \"END\";\n    BarlineType[BarlineType[\"REPEAT_BEGIN\"] = 4] = \"REPEAT_BEGIN\";\n    BarlineType[BarlineType[\"REPEAT_END\"] = 5] = \"REPEAT_END\";\n    BarlineType[BarlineType[\"REPEAT_BOTH\"] = 6] = \"REPEAT_BOTH\";\n    BarlineType[BarlineType[\"NONE\"] = 7] = \"NONE\";\n})(BarlineType || (BarlineType = {}));\nexport class Barline extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Barline;\n    }\n    static get type() {\n        return BarlineType;\n    }\n    static get typeString() {\n        return {\n            single: BarlineType.SINGLE,\n            double: BarlineType.DOUBLE,\n            end: BarlineType.END,\n            repeatBegin: BarlineType.REPEAT_BEGIN,\n            repeatEnd: BarlineType.REPEAT_END,\n            repeatBoth: BarlineType.REPEAT_BOTH,\n            none: BarlineType.NONE,\n        };\n    }\n    constructor(type) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        const TYPE = BarlineType;\n        this.widths = {};\n        this.widths[TYPE.SINGLE] = 5;\n        this.widths[TYPE.DOUBLE] = 5;\n        this.widths[TYPE.END] = 5;\n        this.widths[TYPE.REPEAT_BEGIN] = 5;\n        this.widths[TYPE.REPEAT_END] = 5;\n        this.widths[TYPE.REPEAT_BOTH] = 5;\n        this.widths[TYPE.NONE] = 5;\n        this.paddings = {};\n        this.paddings[TYPE.SINGLE] = 0;\n        this.paddings[TYPE.DOUBLE] = 0;\n        this.paddings[TYPE.END] = 0;\n        this.paddings[TYPE.REPEAT_BEGIN] = 15;\n        this.paddings[TYPE.REPEAT_END] = 15;\n        this.paddings[TYPE.REPEAT_BOTH] = 15;\n        this.paddings[TYPE.NONE] = 0;\n        this.layoutMetricsMap = {};\n        this.layoutMetricsMap[TYPE.SINGLE] = {\n            xMin: 0,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.DOUBLE] = {\n            xMin: -3,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.END] = {\n            xMin: -5,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_END] = {\n            xMin: -10,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n            xMin: -2,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n            xMin: -10,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.NONE] = {\n            xMin: 0,\n            xMax: 0,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        this.setWidth(this.widths[this.type]);\n        this.setPadding(this.paddings[this.type]);\n        this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n        return this;\n    }\n    // Draw barlines\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('stavebarline', this.getAttribute('id'));\n        switch (this.type) {\n            case BarlineType.SINGLE:\n                this.drawVerticalBar(stave, this.x, false);\n                break;\n            case BarlineType.DOUBLE:\n                this.drawVerticalBar(stave, this.x, true);\n                break;\n            case BarlineType.END:\n                this.drawVerticalEndBar(stave, this.x);\n                break;\n            case BarlineType.REPEAT_BEGIN:\n                // If the barline is shifted over (in front of clef/time/key)\n                // Draw vertical bar at the beginning.\n                this.drawRepeatBar(stave, this.x, true);\n                if (stave.getX() !== this.x) {\n                    this.drawVerticalBar(stave, stave.getX());\n                }\n                break;\n            case BarlineType.REPEAT_END:\n                this.drawRepeatBar(stave, this.x, false);\n                break;\n            case BarlineType.REPEAT_BOTH:\n                this.drawRepeatBar(stave, this.x, false);\n                this.drawRepeatBar(stave, this.x, true);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n    drawVerticalBar(stave, x, doubleBar) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        if (doubleBar) {\n            staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n        }\n        staveCtx.fillRect(x, topY, 1, botY - topY);\n    }\n    drawVerticalEndBar(stave, x) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n    }\n    drawRepeatBar(stave, x, begin) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        let xShift = 3;\n        if (!begin) {\n            xShift = -5;\n        }\n        staveCtx.fillRect(x + xShift, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n        const dotRadius = 2;\n        // Shift dots left or right\n        if (begin) {\n            xShift += 4;\n        }\n        else {\n            xShift -= 4;\n        }\n        const dotX = x + xShift + dotRadius / 2;\n        // calculate the y offset based on number of stave lines\n        let yOffset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n        yOffset = yOffset / 2 - stave.getSpacingBetweenLines() / 2;\n        let dotY = topY + yOffset + dotRadius / 2;\n        // draw the top repeat dot\n        staveCtx.beginPath();\n        staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n        // draw the bottom repeat dot\n        dotY += stave.getSpacingBetweenLines();\n        staveCtx.beginPath();\n        staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// @author Aaron (@AaronDavidNewman)\n//\n// This implements chord symbols above/below a chord.\n// Chord symbols are modifiers that can be attached to notes.\n// They can contain multiple 'blocks' which represent text or\n// glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category, isStemmableNote } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `VexFlow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ChordSymbol.DEBUG)\n        log('VexFlow.ChordSymbol', args);\n}\nexport class ChordSymbolBlock extends Element {\n    constructor(text, symbolModifier, xShift, yShift, vAlign) {\n        super();\n        this.text = text;\n        this.symbolModifier = symbolModifier;\n        this.xShift = xShift;\n        this.yShift = yShift;\n        this.vAlign = vAlign;\n    }\n    isSuperscript() {\n        return this.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n    }\n    isSubscript() {\n        return this.symbolModifier === SymbolModifiers.SUBSCRIPT;\n    }\n}\nexport var ChordSymbolHorizontalJustify;\n(function (ChordSymbolHorizontalJustify) {\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));\nexport var ChordSymbolVerticalJustify;\n(function (ChordSymbolVerticalJustify) {\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"BOTTOM\"] = 2] = \"BOTTOM\";\n})(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));\nexport var SymbolModifiers;\n(function (SymbolModifiers) {\n    SymbolModifiers[SymbolModifiers[\"NONE\"] = 1] = \"NONE\";\n    SymbolModifiers[SymbolModifiers[\"SUBSCRIPT\"] = 2] = \"SUBSCRIPT\";\n    SymbolModifiers[SymbolModifiers[\"SUPERSCRIPT\"] = 3] = \"SUPERSCRIPT\";\n})(SymbolModifiers || (SymbolModifiers = {}));\n/**\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\n * As a modifier, it is attached to an existing note.\n */\nexport class ChordSymbol extends Modifier {\n    static get CATEGORY() {\n        return Category.ChordSymbol;\n    }\n    static get superSubRatio() {\n        return Metrics.get('ChordSymbol.superSubRatio');\n    }\n    static get spacingBetweenBlocks() {\n        return Metrics.get('ChordSymbol.spacing');\n    }\n    static get superscriptOffset() {\n        return Metrics.get('ChordSymbol.superscriptOffset');\n    }\n    static get subscriptOffset() {\n        return Metrics.get('ChordSymbol.subscriptOffset');\n    }\n    static get minPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /**\n     * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\n     * Estimate how many lines above/below the staff we need.\n     */\n    static format(symbols, state) {\n        if (!symbols || symbols.length === 0)\n            return false;\n        let width = 0;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (const symbol of symbols) {\n            const note = symbol.checkAttachedNote();\n            let lineSpaces = 1;\n            for (let j = 0; j < symbol.symbolBlocks.length; ++j) {\n                const block = symbol.symbolBlocks[j];\n                const sup = block.isSuperscript();\n                const sub = block.isSubscript();\n                block.setXShift(width);\n                // If there are super/subscripts, they extend beyond the line so\n                // assume they take up 2 lines\n                if (sup || sub) {\n                    lineSpaces = 2;\n                }\n                // If a subscript immediately follows a superscript block, try to\n                // overlay them.\n                if (sub && j > 0) {\n                    const prev = symbol.symbolBlocks[j - 1];\n                    if (prev.isSuperscript()) {\n                        // slide the symbol over so it lines up with superscript\n                        block.setXShift(width - prev.getWidth() - ChordSymbol.minPadding);\n                        block.vAlign = true;\n                        width +=\n                            -prev.getWidth() -\n                                ChordSymbol.minPadding +\n                                (prev.getWidth() > block.getWidth() ? prev.getWidth() - block.getWidth() : 0);\n                    }\n                }\n                width += block.getWidth() + ChordSymbol.minPadding;\n            }\n            if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {\n                symbol.setTextLine(state.topTextLine);\n                state.topTextLine += lineSpaces;\n            }\n            else {\n                symbol.setTextLine(state.textLine + 1);\n                state.textLine += lineSpaces + 1;\n            }\n            if (symbol.getReportWidth()) {\n                if (isStemmableNote(note)) {\n                    const glyphWidth = note.getGlyphWidth();\n                    if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.RIGHT) {\n                        maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                        leftWidth = Math.max(leftWidth, width) + ChordSymbol.minPadding;\n                    }\n                    else if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.LEFT) {\n                        maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                        rightWidth = Math.max(rightWidth, width);\n                    }\n                    else {\n                        leftWidth = Math.max(leftWidth, width / 2) + ChordSymbol.minPadding;\n                        rightWidth = Math.max(rightWidth, width / 2);\n                        maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                        maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n                    }\n                }\n                symbol.width = width;\n            }\n            width = 0; // reset symbol width\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));\n        state.leftShift += leftOverlap;\n        state.rightShift += rightOverlap;\n        return true;\n    }\n    constructor() {\n        super();\n        this.symbolBlocks = [];\n        this.horizontal = ChordSymbolHorizontalJustify.LEFT;\n        this.vertical = ChordSymbolVerticalJustify.TOP;\n        this.reportWidth = true;\n    }\n    /**\n     * The offset is specified in `em`. Scale this value by the font size in pixels.\n     */\n    get superscriptOffset() {\n        return ChordSymbol.superscriptOffset * Font.convertSizeToPixelValue(this.fontInfo.size);\n    }\n    get subscriptOffset() {\n        return ChordSymbol.subscriptOffset * Font.convertSizeToPixelValue(this.fontInfo.size);\n    }\n    setReportWidth(value) {\n        this.reportWidth = value;\n        return this;\n    }\n    getReportWidth() {\n        return this.reportWidth;\n    }\n    /**\n     * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n     * Each block can have its own vertical orientation.\n     */\n    getSymbolBlock(params = {}) {\n        var _a, _b;\n        const symbolBlock = new ChordSymbolBlock((_a = params.text) !== null && _a !== void 0 ? _a : '', (_b = params.symbolModifier) !== null && _b !== void 0 ? _b : SymbolModifiers.NONE, 0, 0, false);\n        if (symbolBlock.isSubscript()) {\n            symbolBlock.setYShift(this.subscriptOffset);\n        }\n        if (symbolBlock.isSuperscript()) {\n            symbolBlock.setYShift(this.superscriptOffset);\n        }\n        if (symbolBlock.isSubscript() || symbolBlock.isSuperscript()) {\n            const { family, size, weight, style } = this.fontInfo;\n            const smallerFontSize = Font.scaleSize(size, ChordSymbol.superSubRatio);\n            symbolBlock.setFont(family, smallerFontSize, weight, style);\n        }\n        else {\n            symbolBlock.setFont(this.fontInfo);\n        }\n        return symbolBlock;\n    }\n    /** Add a symbol to this chord, could be text, glyph or line. */\n    addSymbolBlock(parameters) {\n        this.symbolBlocks.push(this.getSymbolBlock(parameters));\n        return this;\n    }\n    // ### Convenience functions for creating different types of chord symbol parts.\n    /** Add a text block. */\n    addText(text, parameters = {}) {\n        return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text }));\n    }\n    /** Add a text block with superscript modifier. */\n    addTextSuperscript(text) {\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ text, symbolModifier });\n    }\n    /** Add a text block with subscript modifier. */\n    addTextSubscript(text) {\n        const symbolModifier = SymbolModifiers.SUBSCRIPT;\n        return this.addSymbolBlock({ text, symbolModifier });\n    }\n    /** Add a glyph block with superscript modifier. */\n    addGlyphSuperscript(glyph) {\n        return this.addTextSuperscript(ChordSymbol.glyphs[glyph]);\n    }\n    /** Add a glyph block. */\n    addGlyph(glyph, params = {}) {\n        return this.addText(ChordSymbol.glyphs[glyph], params);\n    }\n    /**\n     * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\n     * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\n     */\n    addGlyphOrText(text, params = {}) {\n        let str = '';\n        for (let i = 0; i < text.length; ++i) {\n            const char = text[i];\n            const glyph = ChordSymbol.glyphs[char];\n            if (glyph) {\n                str += glyph;\n            }\n            else {\n                // Collect consecutive characters with no glyphs.\n                str += char;\n            }\n        }\n        if (str.length > 0) {\n            this.addText(str, params);\n        }\n        return this;\n    }\n    /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\n    addLine(params = {}) {\n        // Two csymMinor glyphs next to each other.\n        return this.addText('\\ue874\\ue874' /*{csymMinor}{csymMinor}*/, params);\n    }\n    /** Set vertical position of text (above or below stave). */\n    setVertical(vj) {\n        this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;\n        return this;\n    }\n    getVertical() {\n        return this.vertical;\n    }\n    /** Set horizontal justification. */\n    setHorizontal(hj) {\n        this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;\n        return this;\n    }\n    getHorizontal() {\n        return this.horizontal;\n    }\n    /** Render text and glyphs above/below the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // We're changing context parameters. Save current state.\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('chordsymbol', this.getAttribute('id'));\n        const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n        ctx.setFont(this.fontInfo);\n        let y;\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {\n            // HACK: We need to compensate for the text's height since its origin is bottom-right.\n            y = stave.getYForBottomText(this.textLine + Tables.TEXT_HEIGHT_OFFSET_HACK);\n            if (hasStem) {\n                const stemExt = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                const stemBase = note.getStemDirection() === 1 ? stemExt.baseY : stemExt.topY;\n                y = Math.max(y, stemBase + spacing * (this.textLine + 2));\n            }\n        }\n        else {\n            // (this.vertical === VerticalJustify.TOP)\n            const topY = Math.min(...note.getYs());\n            y = Math.min(stave.getYForTopText(this.textLine), topY - 10);\n            if (hasStem) {\n                const stemExt = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                y = Math.min(y, stemExt.topY - 5 - spacing * this.textLine);\n            }\n        }\n        let x = start.x;\n        if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {\n            x = start.x + this.getWidth();\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {\n            x = start.x - this.getWidth() / 2;\n        }\n        else {\n            // HorizontalJustify.CENTER_STEM\n            x = note.getStemX() - this.getWidth() / 2;\n        }\n        L('Rendering ChordSymbol: ', x, y);\n        this.symbolBlocks.forEach((symbol) => {\n            L('Rendering Text: ', symbol.getText(), x + symbol.getXShift(), y + symbol.getYShift());\n            symbol.setX(x);\n            symbol.setY(y);\n            symbol.renderText(ctx, 0, 0);\n        });\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n    // Get the `BoundingBox` for the entire chord\n    getBoundingBox() {\n        const boundingBox = this.symbolBlocks[0].getBoundingBox();\n        for (let i = 1; i < this.symbolBlocks.length; i++) {\n            boundingBox.mergeWith(this.symbolBlocks[i].getBoundingBox());\n        }\n        return boundingBox;\n    }\n}\nChordSymbol.DEBUG = false;\n// Chord symbols can be positioned and justified relative to the note.\nChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;\nChordSymbol.HorizontalJustifyString = {\n    left: ChordSymbolHorizontalJustify.LEFT,\n    right: ChordSymbolHorizontalJustify.RIGHT,\n    center: ChordSymbolHorizontalJustify.CENTER,\n    centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,\n};\nChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;\nChordSymbol.VerticalJustifyString = {\n    top: ChordSymbolVerticalJustify.TOP,\n    above: ChordSymbolVerticalJustify.TOP,\n    below: ChordSymbolVerticalJustify.BOTTOM,\n    bottom: ChordSymbolVerticalJustify.BOTTOM,\n};\n// Glyph data\nChordSymbol.glyphs = {\n    diminished: Glyphs.csymDiminished,\n    dim: Glyphs.csymDiminished,\n    halfDiminished: Glyphs.csymHalfDiminished,\n    '+': Glyphs.csymAugmented,\n    augmented: Glyphs.csymAugmented,\n    majorSeventh: Glyphs.csymMajorSeventh,\n    minor: Glyphs.csymMinor,\n    '-': Glyphs.csymMinor,\n    '(': '(', // Glyphs.csymParensLeftTall,\n    leftParen: '(', // Glyphs.csymParensLeftTall,\n    ')': ')', // Glyphs.csymParensRightTall,\n    rightParen: ')', // Glyphs.csymParensRightTall,\n    leftBracket: Glyphs.csymBracketLeftTall,\n    rightBracket: Glyphs.csymBracketRightTall,\n    leftParenTall: '(', // Glyphs.csymParensLeftVeryTall,\n    rightParenTall: ')', // Glyphs.csymParensRightVeryTall,\n    '/': Glyphs.csymDiagonalArrangementSlash,\n    over: Glyphs.csymDiagonalArrangementSlash,\n    '#': Glyphs.csymAccidentalSharp,\n    b: Glyphs.csymAccidentalFlat,\n};\nChordSymbol.symbolModifiers = SymbolModifiers;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { drawDot } from './rendercontext';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport class Note extends Tickable {\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // STATIC MEMBERS\n    static get CATEGORY() {\n        return Category.Note;\n    }\n    // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n    // The default type is a regular note ('n').\n    static getGlyphProps(duration, type = 'n') {\n        duration = Tables.sanitizeDuration(duration);\n        // Lookup duration for default glyph head code\n        let code = Tables.durationCodes[duration];\n        if (code === undefined) {\n            code = Tables.durationCodes['4'];\n        }\n        // Try and get the note head\n        const codeNoteHead = Tables.codeNoteHead(type.toUpperCase(), duration);\n        // Merge duration props for 'duration' with the note head properties.\n        if (codeNoteHead !== Glyphs.null) {\n            code = Object.assign(Object.assign({}, code), { codeHead: codeNoteHead });\n        }\n        return code;\n    }\n    /** Debug helper. Displays various note metrics for the given note. */\n    static plotMetrics(ctx, note, yPos) {\n        var _a;\n        const metrics = note.getMetrics();\n        const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n        const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n        const xAbs = note.getAbsoluteX();\n        const xPost1 = note.getAbsoluteX() + metrics.notePx;\n        const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n        const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n        const xFreedomRight = xEnd + ((_a = note.getFormatterMetrics().freedom.right) !== null && _a !== void 0 ? _a : 0);\n        const xWidth = xEnd - xStart;\n        ctx.save();\n        ctx.setFont(Metrics.get('fontFamily'), 8);\n        ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n        const y = yPos + 7;\n        function stroke(x1, x2, color, yy = y) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(3);\n            ctx.moveTo(x1 + note.getXShift(), yy);\n            ctx.lineTo(x2 + note.getXShift(), yy);\n            ctx.stroke();\n        }\n        stroke(xStart, xPre1, 'red');\n        stroke(xPre1, xAbs, '#999');\n        stroke(xAbs, xPost1, 'green');\n        stroke(xPost1, xPost2, '#999');\n        stroke(xPost2, xEnd, 'red');\n        stroke(xEnd, xFreedomRight, '#DD0');\n        stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n        drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n        const formatterMetrics = note.getFormatterMetrics();\n        if (formatterMetrics.iterations > 0) {\n            const spaceDeviation = formatterMetrics.space.deviation;\n            const prefix = spaceDeviation >= 0 ? '+' : '';\n            ctx.setFillStyle('red');\n            ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n        }\n        ctx.restore();\n    }\n    static parseDuration(durationString) {\n        if (!durationString) {\n            return undefined;\n        }\n        const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n        const result = regexp.exec(durationString);\n        if (!result) {\n            return undefined;\n        }\n        const duration = result[1];\n        const dots = result[2].length;\n        const type = result[3] || 'n';\n        return { duration, dots, type };\n    }\n    static parseNoteStruct(noteStruct) {\n        // Preserve backwards-compatibility\n        const durationProps = Note.parseDuration(noteStruct.duration);\n        if (!durationProps) {\n            return undefined;\n        }\n        // If specified type is invalid, return undefined.\n        let type = noteStruct.type;\n        if (type && !Tables.validTypes[type]) {\n            return undefined;\n        }\n        // If no type specified, check duration or custom types\n        const customTypes = [];\n        if (!type) {\n            type = durationProps.type || 'n';\n            // If we have keys, try and check if we've got a custom glyph\n            if (noteStruct.keys !== undefined) {\n                noteStruct.keys.forEach((k, i) => {\n                    const result = k.split('/');\n                    // We have a custom glyph specified after the note eg. /X2\n                    customTypes[i] = (result && result.length === 3 ? result[2] : type);\n                });\n            }\n        }\n        // Calculate the tick duration of the note\n        let ticks = Tables.durationToTicks(durationProps.duration);\n        if (!ticks) {\n            return undefined;\n        }\n        // Are there any dots?\n        const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n        if (typeof dots !== 'number') {\n            return undefined;\n        }\n        // Add ticks as necessary depending on the numbr of dots\n        let currentTicks = ticks;\n        for (let i = 0; i < dots; i++) {\n            if (currentTicks <= 1)\n                return undefined;\n            currentTicks = currentTicks / 2;\n            ticks += currentTicks;\n        }\n        return {\n            duration: durationProps.duration,\n            type,\n            customTypes,\n            dots,\n            ticks,\n        };\n    }\n    /**\n     * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n     * positioning and layout.\n     *\n     * @param noteStruct To create a new note you need to provide a `noteStruct`.\n     */\n    constructor(noteStruct) {\n        super();\n        if (!noteStruct) {\n            throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n        }\n        /** Parses `noteStruct` and get note properties. */\n        const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n        if (!parsedNoteStruct) {\n            throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n        }\n        // Set note properties from parameters.\n        this.keys = noteStruct.keys || [];\n        // per-pitch properties\n        this.keyProps = [];\n        this.duration = parsedNoteStruct.duration;\n        this.noteType = parsedNoteStruct.type;\n        this.customTypes = parsedNoteStruct.customTypes;\n        if (noteStruct.durationOverride) {\n            // Custom duration\n            this.setDuration(noteStruct.durationOverride);\n        }\n        else {\n            // Default duration\n            this.setIntrinsicTicks(parsedNoteStruct.ticks);\n        }\n        this.modifiers = [];\n        // Get the glyph code for this note from the font.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        this.customGlyphs = this.customTypes.map((t) => Note.getGlyphProps(this.duration, t));\n        // Note to play for audio players.\n        this.playNote = undefined;\n        // Positioning contexts used by the Formatter.\n        this.ignoreTicks = false;\n        // Positioning variables\n        this.width = 0; // Width in pixels calculated after preFormat\n        this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n        this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n        this.xShift = 0; // X shift from tick context X\n        this.ys = []; // list of y coordinates for each note\n        // we need to hold on to these for ties and beams.\n        if (noteStruct.alignCenter) {\n            this.setCenterAlignment(noteStruct.alignCenter);\n        }\n        // The render surface.\n        this.renderOptions = {\n            annotationSpacing: 5,\n            strokePx: 1,\n            yShift: 0,\n        };\n    }\n    /**\n     * Get the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    getPlayNote() {\n        return this.playNote;\n    }\n    /**\n     * Set the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    setPlayNote(note) {\n        this.playNote = note;\n        return this;\n    }\n    /**\n     * @returns true if this note is a type of rest.\n     *\n     * Rests don't have pitches, but take up space in the score.\n     * Subclasses should override this default implementation.\n     */\n    isRest() {\n        return false;\n    }\n    /** Add stroke. */\n    addStroke(index, stroke) {\n        stroke.setNote(this);\n        stroke.setIndex(index);\n        this.modifiers.push(stroke);\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the target stave. */\n    getStave() {\n        return this.stave;\n    }\n    /** Check and get the target stave. */\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /** Set the target stave. */\n    setStave(stave) {\n        this.stave = stave;\n        this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n        this.setContext(this.stave.getContext());\n        return this;\n    }\n    /** Get spacing to the left of the notes. */\n    getLeftDisplacedHeadPx() {\n        return this.leftDisplacedHeadPx;\n    }\n    /** Get spacing to the right of the notes. */\n    getRightDisplacedHeadPx() {\n        return this.rightDisplacedHeadPx;\n    }\n    /** Set spacing to the left of the notes. */\n    setLeftDisplacedHeadPx(x) {\n        this.leftDisplacedHeadPx = x;\n        return this;\n    }\n    /** Set spacing to the right of the notes. */\n    setRightDisplacedHeadPx(x) {\n        this.rightDisplacedHeadPx = x;\n        return this;\n    }\n    /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    /** Get the stave line number for the note. */\n    // eslint-disable-next-line\n    getLineNumber(isTopNote) {\n        return 0;\n    }\n    /** Get the stave line number for rest. */\n    getLineForRest() {\n        return 0;\n    }\n    /** Get the glyph associated with this note. */\n    getGlyphProps() {\n        return this.glyphProps;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return 0;\n    }\n    /**\n     * Set Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    setYs(ys) {\n        this.ys = ys;\n        return this;\n    }\n    /**\n     * Get Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    getYs() {\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n        }\n        return this.ys;\n    }\n    /**\n     * Get the Y position of the space above the stave onto which text can\n     * be rendered.\n     */\n    getYForTopText(textLine) {\n        return this.checkStave().getYForTopText(textLine);\n    }\n    /** Return the voice that this note belongs in. */\n    getVoice() {\n        if (!this.voice)\n            throw new RuntimeError('NoVoice', 'Note has no voice.');\n        return this.voice;\n    }\n    /** Attach this note to `voice`. */\n    setVoice(voice) {\n        this.voice = voice;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the `TickContext` for this note. */\n    getTickContext() {\n        return this.checkTickContext();\n    }\n    /** Set the `TickContext` for this note. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Accessor to duration. */\n    getDuration() {\n        return this.duration;\n    }\n    /** Accessor to isDotted. */\n    isDotted() {\n        return this.getModifiersByType(Category.Dot).length > 0;\n    }\n    /** Accessor to hasStem. */\n    hasStem() {\n        return false;\n    }\n    /** Accessor to note type. */\n    getNoteType() {\n        return this.noteType;\n    }\n    /** Get the beam. */\n    getBeam() {\n        return this.beam;\n    }\n    /** Check and get the beam. */\n    checkBeam() {\n        return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n    }\n    /** Check it has a beam. */\n    hasBeam() {\n        return this.beam !== undefined;\n    }\n    /** Set the beam. */\n    setBeam(beam) {\n        this.beam = beam;\n        return this;\n    }\n    /**\n     * Attach a modifier to this note.\n     * @param modifier the Modifier to add.\n     * @param index of the key to modify.\n     * @returns this\n     */\n    addModifier(modifier, index = 0) {\n        const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';\n        // Backwards compatibility with 3.0.9.\n        if (typeof index === 'string') {\n            index = parseInt(index);\n            // eslint-disable-next-line\n            console.warn(signature + ' expected a number for `index`, but received a string.');\n        }\n        // Some versions of VexFlow had the two parameters reversed.\n        // Check here and throw an error if the argument types are not correct.\n        if (typeof modifier !== 'object' || typeof index !== 'number') {\n            throw new RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');\n        }\n        modifier.setNote(this);\n        modifier.setIndex(index);\n        super.addModifier(modifier);\n        return this;\n    }\n    /** Get all modifiers of a specific type in `this.modifiers`. */\n    getModifiersByType(type) {\n        return this.modifiers.filter((modifier) => modifier.getCategory() === type);\n    }\n    /** Get the coordinates for where modifiers begin. */\n    // eslint-disable-next-line\n    getModifierStartXY(position, index, options) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        return {\n            x: this.getAbsoluteX(),\n            y: this.ys[0],\n        };\n    }\n    getRightParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getRightDisplacedHeadPx() : 0;\n    }\n    getLeftParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getLeftDisplacedHeadPx() - this.xShift : -this.xShift;\n    }\n    getFirstDotPx() {\n        let px = this.getRightDisplacedHeadPx();\n        const parentheses = this.checkModifierContext().getMembers('Parenthesis');\n        // consider parentheses on noteheads, dots should be to the right of them\n        if (parentheses.length !== 0) {\n            px += parentheses[0].getWidth() + 1;\n        }\n        return px;\n    }\n    /** Get the metrics for this note. */\n    getMetrics() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n        }\n        const modLeftPx = this.modifierContext ? this.modifierContext.getState().leftShift : 0;\n        const modRightPx = this.modifierContext ? this.modifierContext.getState().rightShift : 0;\n        const width = this.getWidth();\n        const glyphWidth = this.getGlyphWidth();\n        const notePx = width -\n            modLeftPx - // subtract left modifiers\n            modRightPx - // subtract right modifiers\n            this.leftDisplacedHeadPx - // subtract left displaced head\n            this.rightDisplacedHeadPx; // subtract right displaced head\n        // NOTE: If you change this, remember to update MockTickable.getMetrics() in the tests/ directory.\n        return {\n            width,\n            glyphWidth,\n            notePx,\n            // Modifier spacing.\n            modLeftPx,\n            modRightPx,\n            // Displaced note head on left or right.\n            leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n            rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n            glyphPx: 0,\n        };\n    }\n    /**\n     * Get the absolute `X` position of this note's tick context. This\n     * excludes xShift, so you'll need to factor it in if you're\n     * looking for the post-formatted x-position.\n     */\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        // Position note to left edge of tick context.\n        let x = tickContext.getX();\n        if (this.stave) {\n            x += this.stave.getNoteStartX() + Metrics.get('Stave.padding', 0);\n        }\n        if (this.isCenterAligned()) {\n            x += this.getCenterXShift();\n        }\n        return x;\n    }\n    /** Get the direction of the stem. */\n    getStemDirection() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the top and bottom `y` values of the stem. */\n    getStemExtents() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the `x` coordinate to the right of the note. */\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        const noteGlyphWidth = this.getGlyphWidth();\n        tieStartX += noteGlyphWidth / 2;\n        tieStartX += -this.width / 2 + this.width + 2;\n        return tieStartX;\n    }\n    /** Get the `x` coordinate to the left of the note. */\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        const noteGlyphWidth = this.getGlyphWidth();\n        tieEndX += noteGlyphWidth / 2;\n        tieEndX -= this.width / 2 + 2;\n        return tieEndX;\n    }\n    // Get the pitches in the note\n    getKeys() {\n        return this.keys;\n    }\n    // Get the properties for all the keys in the note\n    getKeyProps() {\n        return this.keyProps;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (BarNote.DEBUG)\n        log('VexFlow.BarNote', args);\n}\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n    static get CATEGORY() {\n        return Category.BarNote;\n    }\n    constructor(type = BarlineType.SINGLE) {\n        super({ duration: 'b' });\n        this.metrics = {\n            widths: {},\n        };\n        const TYPE = BarlineType;\n        this.metrics.widths = {\n            [TYPE.SINGLE]: 8,\n            [TYPE.DOUBLE]: 12,\n            [TYPE.END]: 15,\n            [TYPE.REPEAT_BEGIN]: 14,\n            [TYPE.REPEAT_END]: 14,\n            [TYPE.REPEAT_BOTH]: 18,\n            [TYPE.NONE]: 0,\n        };\n        // Tell the formatter that bar notes have no duration.\n        this.ignoreTicks = true;\n        this.setType(type);\n    }\n    /** Get the type of bar note.*/\n    getType() {\n        return this.type;\n    }\n    /** Set the type of bar note. */\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        // Set width to width of relevant `Barline`.\n        this.setWidth(this.metrics.widths[this.type]);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    /** Overridden to ignore. */\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render note to stave. */\n    draw() {\n        const ctx = this.checkContext();\n        L('Rendering bar line at: ', this.getAbsoluteX());\n        this.applyStyle(ctx);\n        const barline = new Barline(this.type);\n        barline.setX(this.getAbsoluteX());\n        barline.draw(this.checkStave());\n        this.restoreStyle(ctx);\n        this.setRendered();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.BarNote.DEBUG` to `true`. */\nBarNote.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n    static get CATEGORY() {\n        return Category.Bend;\n    }\n    static get UP() {\n        return 0;\n    }\n    static get DOWN() {\n        return 1;\n    }\n    // Arrange bends in `ModifierContext`\n    static format(bends, state) {\n        if (!bends || bends.length === 0)\n            return false;\n        let lastWidth = 0;\n        // Format Bends\n        for (let i = 0; i < bends.length; ++i) {\n            const bend = bends[i];\n            const note = bend.checkAttachedNote();\n            if (isTabNote(note)) {\n                const stringPos = note.leastString() - 1;\n                if (state.topTextLine < stringPos) {\n                    state.topTextLine = stringPos;\n                }\n            }\n            bend.setXShift(lastWidth);\n            lastWidth = bend.getWidth();\n            bend.setTextLine(state.topTextLine);\n        }\n        state.rightShift += lastWidth;\n        state.topTextLine += 1;\n        return true;\n    }\n    /**\n     * Example of a phrase:\n     * ```\n     *    [{\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"half\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"1 1/2\"\n     *     width: 8;\n     *   }]\n     * ```\n     */\n    constructor(phrase) {\n        super();\n        this.xShift = 0;\n        this.tap = '';\n        this.renderOptions = {\n            bendWidth: 8,\n            releaseWidth: 8,\n        };\n        this.setStyle({ lineWidth: 1.0, strokeStyle: 'black', fillStyle: 'black' });\n        this.phrase = phrase;\n        this.updateWidth();\n    }\n    /** Set horizontal shift in pixels. */\n    setXShift(value) {\n        this.xShift = value;\n        this.updateWidth();\n        return this;\n    }\n    setTap(value) {\n        this.tap = value;\n        return this;\n    }\n    getTextHeight() {\n        const element = new Element(Category.Bend);\n        element.setText(this.phrase[0].text);\n        return element.getHeight();\n    }\n    /** Recalculate width. */\n    updateWidth() {\n        const measureText = (text) => {\n            const element = new Element(Category.Bend);\n            element.setText(text);\n            return element.getWidth();\n        };\n        let totalWidth = 0;\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (bend.width !== undefined) {\n                totalWidth += bend.width;\n            }\n            else {\n                const additionalWidth = bend.type === Bend.UP ? this.renderOptions.bendWidth : this.renderOptions.releaseWidth;\n                bend.width = Math.max(additionalWidth, measureText(bend.text)) + 3;\n                bend.drawWidth = bend.width / 2;\n                totalWidth += bend.width;\n            }\n        }\n        this.setWidth(totalWidth + this.xShift);\n        return this;\n    }\n    /** Draw the bend on the rendering context. */\n    draw() {\n        var _a;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        this.applyStyle();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        start.x += 3;\n        start.y += 0.5;\n        const xShift = this.xShift;\n        const stave = note.checkStave();\n        const spacing = stave.getSpacingBetweenLines();\n        const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));\n        // this.textLine is relative to top string in the group.\n        const bendHeight = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) + 3;\n        const annotationY = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) - 1;\n        const renderBend = (x, y, width, height) => {\n            const cpX = x + width;\n            const cpY = y;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.quadraticCurveTo(cpX, cpY, x + width, height);\n            ctx.stroke();\n        };\n        const renderRelease = (x, y, width, height) => {\n            ctx.beginPath();\n            ctx.moveTo(x, height);\n            ctx.quadraticCurveTo(x + width, height, x + width, y);\n            ctx.stroke();\n        };\n        const renderArrowHead = (x, y, direction) => {\n            const width = 4;\n            const yBase = y + width * direction;\n            ctx.beginPath();\n            ctx.moveTo(x, y); // tip of the arrow\n            ctx.lineTo(x - width, yBase);\n            ctx.lineTo(x + width, yBase);\n            ctx.closePath();\n            ctx.fill();\n        };\n        const renderText = (x, text) => {\n            ctx.setFont(this.fontInfo);\n            const renderX = x - ctx.measureText(text).width / 2;\n            ctx.fillText(text, renderX, annotationY);\n        };\n        let lastBend = undefined;\n        let lastBendDrawWidth = 0;\n        let lastDrawnWidth = 0;\n        if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {\n            const tapStart = note.getModifierStartXY(Modifier.Position.CENTER, this.index);\n            renderText(tapStart.x, this.tap);\n        }\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (!bend.drawWidth)\n                bend.drawWidth = 0;\n            if (i === 0)\n                bend.drawWidth += xShift;\n            lastDrawnWidth = bend.drawWidth + lastBendDrawWidth - (i === 1 ? xShift : 0);\n            if (bend.type === Bend.UP) {\n                if (lastBend && lastBend.type === Bend.UP) {\n                    renderArrowHead(start.x, bendHeight, +1);\n                }\n                renderBend(start.x, start.y, lastDrawnWidth, bendHeight);\n            }\n            if (bend.type === Bend.DOWN) {\n                if (lastBend && lastBend.type === Bend.UP) {\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n                if (lastBend && lastBend.type === Bend.DOWN) {\n                    renderArrowHead(start.x, start.y, -1);\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n                if (!lastBend) {\n                    lastDrawnWidth = bend.drawWidth;\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n            }\n            renderText(start.x + lastDrawnWidth, bend.text);\n            lastBend = bend;\n            lastBendDrawWidth = bend.drawWidth;\n            lastBend.x = start.x;\n            start.x += lastDrawnWidth;\n        }\n        if (!lastBend || lastBend.x === undefined) {\n            throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n        }\n        // Final arrowhead and text\n        if (lastBend.type === Bend.UP) {\n            renderArrowHead(lastBend.x + lastDrawnWidth, bendHeight, +1);\n        }\n        else if (lastBend.type === Bend.DOWN) {\n            renderArrowHead(lastBend.x + lastDrawnWidth, start.y, -1);\n        }\n        this.restoreStyle();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements dot modifiers for notes.\nimport { Glyphs } from './glyphs';\nimport { Modifier } from './modifier';\nimport { Category, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Dot extends Modifier {\n    static get CATEGORY() {\n        return Category.Dot;\n    }\n    /** Returns the dots associated to a Note. */\n    static getDots(note) {\n        return note.getModifiersByType(Dot.CATEGORY);\n    }\n    /** Add a dot on the specified keys to the notes. */\n    static buildAndAttach(notes, options) {\n        for (const note of notes) {\n            if (options === null || options === void 0 ? void 0 : options.all) {\n                for (let i = 0; i < note.keys.length; i++) {\n                    const dot = new Dot();\n                    note.addModifier(dot, i);\n                }\n            }\n            else if ((options === null || options === void 0 ? void 0 : options.index) !== undefined) {\n                const dot = new Dot();\n                note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);\n            }\n            else {\n                const dot = new Dot();\n                note.addModifier(dot, 0);\n            }\n        }\n    }\n    // Arrange dots inside a ModifierContext.\n    static format(dots, state) {\n        const rightShift = state.rightShift;\n        const dotSpacing = 1;\n        if (!dots || dots.length === 0)\n            return false;\n        const dotList = [];\n        const maxShiftMap = {};\n        for (let i = 0; i < dots.length; ++i) {\n            const dot = dots[i];\n            const note = dot.getNote();\n            let props;\n            let shift;\n            if (isStaveNote(note)) {\n                const index = dot.checkIndex();\n                props = note.getKeyProps()[index];\n                // consider right displaced head with no previous modifier\n                shift = note.getFirstDotPx();\n            }\n            else if (isTabNote(note)) {\n                props = { line: 0.5 }; // Shim key props for dot placement\n                shift = rightShift;\n            }\n            else {\n                // note object is not StaveNote or TabNote.\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n            const noteId = note.getAttribute('id');\n            dotList.push({ line: props.line, note, noteId, dot });\n            maxShiftMap[noteId] = Math.max(maxShiftMap[noteId] || shift, shift);\n        }\n        // Sort dots by line number.\n        dotList.sort((a, b) => b.line - a.line);\n        let dotShift = rightShift;\n        let xWidth = 0;\n        let lastLine = null;\n        let lastNote = null;\n        let prevDottedSpace = null;\n        let halfShiftY = 0;\n        for (let i = 0; i < dotList.length; ++i) {\n            const { dot, note, noteId, line } = dotList[i];\n            // Reset the position of the dot every line.\n            if (line !== lastLine || note !== lastNote) {\n                dotShift = maxShiftMap[noteId];\n            }\n            if (!note.isRest() && line !== lastLine) {\n                if (Math.abs(line % 1) === 0.5) {\n                    // note is on a space, so no dot shift\n                    halfShiftY = 0;\n                }\n                else {\n                    // note is on a line, so shift dot to space above the line\n                    halfShiftY = 0.5;\n                    if (lastNote !== null && !lastNote.isRest() && lastLine !== null && lastLine - line === 0.5) {\n                        // previous note on a space, so shift dot to space below the line\n                        halfShiftY = -0.5;\n                    }\n                    else if (line + halfShiftY === prevDottedSpace) {\n                        // previous space is dotted, so shift dot to space below the line\n                        halfShiftY = -0.5;\n                    }\n                }\n            }\n            // Convert halfShiftY to a multiplier for dots.draw().\n            if (note.isRest()) {\n                dot.dotShiftY += -halfShiftY;\n            }\n            else {\n                dot.dotShiftY = -halfShiftY;\n            }\n            prevDottedSpace = line + halfShiftY;\n            dot.setXShift(dotShift);\n            dotShift += dot.getWidth() + dotSpacing; // spacing\n            xWidth = dotShift > xWidth ? dotShift : xWidth;\n            lastLine = line;\n            lastNote = note;\n        }\n        // Update state.\n        state.rightShift += xWidth;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.setText(Glyphs.augmentationDot);\n        this.dotShiftY = 0;\n    }\n    setNote(note) {\n        this.note = note;\n        this.font = note.font;\n        return this;\n    }\n    setDotShiftY(y) {\n        this.dotShiftY = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        const lineSpace = stave.getSpacingBetweenLines();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        // Set the starting y coordinate to the base of the stem for TabNotes.\n        if (isTabNote(note)) {\n            start.y = note.getStemExtents().baseY;\n        }\n        this.x = start.x;\n        this.y = start.y + this.dotShiftY * lineSpace;\n        this.renderText(ctx, 0, 0);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class FretHandFinger extends Modifier {\n    static get CATEGORY() {\n        return Category.FretHandFinger;\n    }\n    // Arrange fingerings inside a ModifierContext.\n    static format(nums, state) {\n        const { leftShift, rightShift } = state;\n        const numSpacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const numsList = [];\n        let prevNote = null;\n        let shiftLeft = 0;\n        let shiftRight = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const textHeight = Metrics.get('FretHandFinger.fontSize');\n            if (num.position === ModifierPosition.ABOVE) {\n                state.topTextLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (num.position === ModifierPosition.BELOW) {\n                state.textLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (leftShift === 0) {\n                        shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n                    }\n                    if (rightShift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prevNote = note;\n            }\n            numsList.push({\n                note,\n                num,\n                pos,\n                line: props.line,\n                shiftL: shiftLeft,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort fingernumbers by line number.\n        numsList.sort((a, b) => b.line - a.line);\n        let numShiftL = 0;\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < numsList.length; ++i) {\n            let numShift = 0;\n            const { note, pos, num, line, shiftL, shiftR } = numsList[i];\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftL = leftShift + shiftL;\n                numShiftR = rightShift + shiftR;\n            }\n            const numWidth = num.getWidth() + numSpacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(leftShift + numShiftL);\n                numShift = leftShift + numWidth; // spacing\n                xWidthL = numShift > xWidthL ? numShift : xWidthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                numShift = shiftRight + numWidth; // spacing\n                xWidthR = numShift > xWidthR ? numShift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    static easyScoreHook({ fingerings } = {}, note, builder) {\n        fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {\n            const split = fingeringString.trim().split('.');\n            const params = { number: split[0] };\n            if (split[1])\n                params.position = split[1];\n            return builder.getFactory().Fingering(params);\n        }).map((fingering, index) => note.addModifier(fingering, index));\n    }\n    constructor(finger) {\n        super();\n        this.setFretHandFinger(finger);\n        this.position = Modifier.Position.LEFT; // Default position above stem or note head\n        this.xOffset = 0; // Horizontal offset from default\n        this.yOffset = 0; // Vertical offset from default\n    }\n    setFretHandFinger(finger) {\n        this.text = finger;\n        return this;\n    }\n    getFretHandFinger() {\n        return this.text;\n    }\n    setOffsetX(x) {\n        this.xOffset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.yOffset = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let dotX = start.x + this.xOffset;\n        let dotY = start.y + this.yOffset + 5;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                dotX -= 4;\n                dotY -= 12;\n                break;\n            case Modifier.Position.BELOW:\n                dotX -= 2;\n                dotY += 10;\n                break;\n            case Modifier.Position.LEFT:\n                dotX -= this.width;\n                break;\n            case Modifier.Position.RIGHT:\n                dotX += 1;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n        }\n        this.renderText(ctx, dotX, dotY);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Category } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (NoteHead.DEBUG)\n        log('VexFlow.NoteHead', args);\n}\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n    static get CATEGORY() {\n        return Category.NoteHead;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.customGlyph = false;\n        // map notehead SMuFL codes to the corresponding SMuFL code with ledger line\n        this.ledger = {\n            '\\ue4e3' /*restWhole*/: '\\ue4f4' /*restWholeLegerLine*/,\n            '\\ue4e4' /*restHalf*/: '\\ue4f5' /*restHalfLegerLine*/,\n        };\n        this.index = noteStruct.index;\n        this.x = noteStruct.x || 0;\n        this.y = noteStruct.y || 0;\n        if (noteStruct.noteType)\n            this.noteType = noteStruct.noteType;\n        this.displaced = noteStruct.displaced || false;\n        this.stemDirection = noteStruct.stemDirection || Stem.UP;\n        this.line = noteStruct.line || 0;\n        // Get glyph code based on duration and note type. This could be\n        // regular notes, rests, or other custom codes.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // Swap out the glyph with ledger lines\n        if ((this.line > 5 || this.line < 0) && this.ledger[this.glyphProps.codeHead]) {\n            this.glyphProps.codeHead = this.ledger[this.glyphProps.codeHead];\n        }\n        this.text = this.glyphProps.codeHead;\n        if (noteStruct.customGlyphCode) {\n            this.customGlyph = true;\n            this.text = noteStruct.customGlyphCode;\n        }\n        this.setStyle(noteStruct.style);\n        this.slashed = noteStruct.slashed || false;\n        this.renderOptions = Object.assign({}, this.renderOptions);\n    }\n    /** Get the width of the notehead. */\n    getWidth() {\n        return this.width;\n    }\n    /** Determine if the notehead is displaced. */\n    isDisplaced() {\n        return this.displaced === true;\n    }\n    /** Get the stave line the notehead is placed on. */\n    getLine() {\n        return this.line;\n    }\n    /** Set the stave line the notehead is placed on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Get the canvas `x` coordinate position of the notehead. */\n    getAbsoluteX() {\n        // If the note has not been preformatted, then get the static x value\n        // Otherwise, it's been formatted and we should use it's x value relative\n        // to its tick context\n        const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n        // For a more natural displaced notehead, we adjust the displacement amount\n        // by half the stem width in order to maintain a slight overlap with the stem\n        const displacementStemAdjustment = Stem.WIDTH / 2;\n        return x + (this.displaced ? (this.width - displacementStemAdjustment) * this.stemDirection : 0);\n    }\n    /** Set notehead to a provided `stave`. */\n    setStave(stave) {\n        const line = this.getLine();\n        this.stave = stave;\n        if (this.stave) {\n            this.setY(this.stave.getYForNote(line));\n            this.setContext(this.stave.getContext());\n        }\n        return this;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the notehead. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", this.x, this.y);\n        this.x = this.getAbsoluteX();\n        this.renderText(ctx, 0, 0);\n    }\n}\n/** To enable logging for this class. Set `VexFlow.NoteHead.DEBUG` to `true`. */\nNoteHead.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StemmableNote extends Note {\n    static get CATEGORY() {\n        return Category.StemmableNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.flag = new Element();\n        this.flagStyle = {};\n    }\n    // Get and set the note's `Stem`\n    getStem() {\n        return this.stem;\n    }\n    checkStem() {\n        if (!this.stem) {\n            throw new RuntimeError('NoStem', 'No stem attached to instance');\n        }\n        return this.stem;\n    }\n    setStem(stem) {\n        this.stem = stem;\n        this.addChildElement(stem);\n        return this;\n    }\n    // Builds and sets a new stem\n    buildStem() {\n        const stem = new Stem();\n        this.setStem(stem);\n        return this;\n    }\n    buildFlag() {\n        var _a, _b, _c;\n        const { glyphProps } = this;\n        if (this.hasFlag()) {\n            const flagCode = \n            // codeFlagDown = codeFlagUp + 1\n            // if codeFlagUp is undefined, codePoint will be 0\n            this.getStemDirection() === Stem.DOWN\n                ? String.fromCodePoint(((_b = (_a = glyphProps.codeFlagUp) === null || _a === void 0 ? void 0 : _a.codePointAt(0)) !== null && _b !== void 0 ? _b : -1) + 1)\n                : (_c = glyphProps.codeFlagUp) !== null && _c !== void 0 ? _c : Glyphs.null;\n            this.flag.setText(flagCode);\n            this.flag.fontInfo = this.fontInfo;\n        }\n    }\n    // Get the custom glyph associated with the outer note head on the base of the stem.\n    getBaseCustomNoteHeadGlyphProps() {\n        if (this.getStemDirection() === Stem.DOWN) {\n            return this.customGlyphs[this.customGlyphs.length - 1];\n        }\n        else {\n            return this.customGlyphs[0];\n        }\n    }\n    // Get the full length of stem\n    getStemLength() {\n        return Stem.HEIGHT + this.getStemExtension();\n    }\n    // Get the number of beams for this duration\n    getBeamCount() {\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            return glyphProps.beamCount;\n        }\n        else {\n            return 0;\n        }\n    }\n    // Get the minimum length of stem\n    getStemMinimumLength() {\n        const frac = Tables.durationToFraction(this.duration);\n        const beamIsUndefined = this.beam === undefined;\n        let length = frac.value() <= 1 ? 0 : 20;\n        // if note is flagged, cannot shorten beam\n        switch (this.duration) {\n            case '8':\n            case '16':\n                length = beamIsUndefined ? 35 : 25;\n                break;\n            case '32':\n                length = beamIsUndefined ? 45 : 35;\n                break;\n            case '64':\n                length = beamIsUndefined ? 50 : 40;\n                break;\n            case '128':\n                length = beamIsUndefined ? 55 : 45;\n                break;\n            default:\n                break;\n        }\n        return length;\n    }\n    // Get/set the direction of the stem\n    getStemDirection() {\n        if (!this.stemDirection)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stemDirection;\n    }\n    setStemDirection(direction) {\n        if (!direction)\n            direction = Stem.UP;\n        if (direction !== Stem.UP && direction !== Stem.DOWN) {\n            throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n        }\n        this.stemDirection = direction;\n        // Reset and reformat everything. Flag has to be built before calling getStemExtension.\n        this.reset();\n        if (this.hasFlag()) {\n            this.buildFlag();\n        }\n        this.beam = undefined;\n        if (this.stem) {\n            this.stem.setDirection(direction);\n            this.stem.setExtension(this.getStemExtension());\n        }\n        if (this.preFormatted) {\n            this.preFormat();\n        }\n        return this;\n    }\n    // Get the `x` coordinate of the stem\n    getStemX() {\n        const xBegin = this.getAbsoluteX() + this.xShift;\n        const xEnd = this.getAbsoluteX() + this.xShift + this.getGlyphWidth();\n        const stemX = this.stemDirection === Stem.DOWN ? xBegin : xEnd;\n        return stemX;\n    }\n    // Get the `x` coordinate for the center of the glyph.\n    // Used for `TabNote` stems and stemlets over rests\n    getCenterGlyphX() {\n        return this.getAbsoluteX() + this.xShift + this.getGlyphWidth() / 2;\n    }\n    // Get the stem extension for the current duration\n    getStemExtension() {\n        const glyphProps = this.getGlyphProps();\n        const flagHeight = this.flag.getHeight();\n        const scale = this.getFontScale();\n        if (this.stemExtensionOverride !== undefined) {\n            return this.stemExtensionOverride;\n        }\n        // Use stemBeamExtension with beams\n        if (this.beam) {\n            return glyphProps.stemBeamExtension * scale;\n        }\n        // If the flag is longer than the stem, extend the stem by the difference.\n        return flagHeight > Stem.HEIGHT * scale ? flagHeight - Stem.HEIGHT * scale : 0;\n    }\n    // Set the stem length to a specific. Will override the default length.\n    setStemLength(height) {\n        this.stemExtensionOverride = height - Stem.HEIGHT;\n        return this;\n    }\n    // Get the top and bottom `y` values of the stem.\n    getStemExtents() {\n        if (!this.stem)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem.getExtents();\n    }\n    /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n    getYForTopText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.min(stave.getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));\n        }\n        else {\n            return stave.getYForTopText(textLine);\n        }\n    }\n    /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n    getYForBottomText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);\n        }\n        else {\n            return stave.getYForBottomText(textLine);\n        }\n    }\n    hasFlag() {\n        return this.glyphProps.codeFlagUp !== undefined && !this.beam && !this.isRest();\n    }\n    /** Post formats the note. */\n    postFormat() {\n        var _a;\n        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\n        this.postFormatted = true;\n        return this;\n    }\n    /** Renders the stem onto the canvas. */\n    drawStem(stemOptions) {\n        var _a;\n        this.checkContext();\n        this.setRendered();\n        this.setStem(new Stem(stemOptions));\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.\n//\n// See `tests/stavenote_tests.ts` for usage examples.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _StaveNote_noteHeads, _StaveNote_sortedKeyProps;\nimport { BoundingBox } from './boundingbox';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log, midLine, RuntimeError } from './util';\n// To enable logging for this class. Set `VexFlow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (StaveNote.DEBUG)\n        log('VexFlow.StaveNote', args);\n}\nconst isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest, note, dir) {\n    const delta = dir;\n    rest.line += delta;\n    rest.maxLine += delta;\n    rest.minLine += delta;\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest, noteU, noteL) {\n    const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n    rest.line -= delta;\n    rest.maxLine -= delta;\n    rest.minLine -= delta;\n}\nexport class StaveNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.StaveNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 3;\n    }\n    static get minNoteheadPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Format notes inside a ModifierContext. */\n    static format(notes, state) {\n        if (!notes || notes.length < 2)\n            return false;\n        const notesList = [];\n        for (let i = 0; i < notes.length; i++) {\n            // Formatting uses sortedKeyProps to calculate line and minL.\n            const props = __classPrivateFieldGet(notes[i], _StaveNote_sortedKeyProps, \"f\");\n            const line = props[0].keyProps.line;\n            let minL = props[props.length - 1].keyProps.line;\n            const stemDirection = notes[i].getStemDirection();\n            const stemMax = notes[i].getStemLength() / 10;\n            const stemMin = notes[i].getStemMinimumLength() / 10;\n            let maxL;\n            if (notes[i].isRest()) {\n                maxL =\n                    line +\n                        Math.ceil(__classPrivateFieldGet(notes[i], _StaveNote_noteHeads, \"f\")[0].getTextMetrics().actualBoundingBoxAscent / Tables.STAVE_LINE_DISTANCE);\n                minL =\n                    line -\n                        Math.ceil(__classPrivateFieldGet(notes[i], _StaveNote_noteHeads, \"f\")[0].getTextMetrics().actualBoundingBoxDescent / Tables.STAVE_LINE_DISTANCE);\n            }\n            else {\n                maxL =\n                    stemDirection === 1 ? props[props.length - 1].keyProps.line + stemMax : props[props.length - 1].keyProps.line;\n                minL = stemDirection === 1 ? props[0].keyProps.line : props[0].keyProps.line - stemMax;\n            }\n            notesList.push({\n                line: props[0].keyProps.line, // note/rest base line\n                maxLine: maxL, // note/rest upper bounds line\n                minLine: minL, // note/rest lower bounds line\n                isrest: notes[i].isRest(),\n                stemDirection,\n                stemMax, // Maximum (default) note stem length;\n                stemMin, // minimum note stem length\n                voiceShift: notes[i].getVoiceShiftWidth(),\n                isDisplaced: notes[i].isDisplaced(), // note manually displaced\n                note: notes[i],\n            });\n        }\n        let voices = 0;\n        let noteU = undefined;\n        let noteM = undefined;\n        let noteL = undefined;\n        const draw = [false, false, false];\n        for (let i = 0; i < notesList.length; i++) {\n            // If .draw is true or undefined, we set draw[i] = true\n            draw[i] = notesList[i].note.renderOptions.draw !== false;\n        }\n        if (draw[0] && draw[1] && draw[2]) {\n            // Three visible notes\n            voices = 3;\n            noteU = notesList[0];\n            noteM = notesList[1];\n            noteL = notesList[2];\n        }\n        else if (draw[0] && draw[1]) {\n            // Two visible notes, 0 & 1\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[1];\n        }\n        else if (draw[0] && draw[2]) {\n            // Two visible notes, 0 & 2\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[2];\n        }\n        else if (draw[1] && draw[2]) {\n            // Two visible notes, 1 & 2\n            voices = 2;\n            noteU = notesList[1];\n            noteL = notesList[2];\n        }\n        else {\n            // No shift required for less than 2 visible notes\n            return true;\n        }\n        // for two voice backward compatibility, ensure upper voice is stems up\n        // for three voices, the voices must be in order (upper, middle, lower)\n        if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n            noteU = notesList[1];\n            noteL = notesList[0];\n        }\n        const voiceXShift = Math.max(noteU.voiceShift, noteL.voiceShift);\n        let xShift = 0;\n        // Test for two voice note intersection\n        if (voices === 2) {\n            const lineSpacing = noteU.note.hasStem() && noteL.note.hasStem() && noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n            if (noteL.isrest && noteU.isrest && noteU.note.duration === noteL.note.duration) {\n                noteL.note.renderOptions.draw = false;\n            }\n            else if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n                if (noteU.isrest) {\n                    // shift rest up\n                    shiftRestVertical(noteU, noteL, 1);\n                }\n                else if (noteL.isrest) {\n                    // shift rest down\n                    shiftRestVertical(noteL, noteU, -1);\n                }\n                else {\n                    //Instead of shifting notes, remove the appropriate flag\n                    //If we are sharing a line, switch one notes stem direction.\n                    //If we are sharing a line and in the same voice, only then offset one note\n                    const lineDiff = Math.abs(noteU.line - noteL.line);\n                    if (noteU.note.hasStem() && noteL.note.hasStem()) {\n                        const noteUHead = __classPrivateFieldGet(noteU.note, _StaveNote_sortedKeyProps, \"f\")[0].keyProps.code;\n                        const noteLHead = __classPrivateFieldGet(noteL.note, _StaveNote_sortedKeyProps, \"f\")[__classPrivateFieldGet(noteL.note, _StaveNote_sortedKeyProps, \"f\").length - 1].keyProps.code;\n                        if (\n                        // If unison is not configured, shift\n                        !Tables.UNISON ||\n                            // If we have different noteheads, shift\n                            noteUHead !== noteLHead ||\n                            // If we have different dot values, shift\n                            noteU.note.getModifiers().filter((item) => item.getCategory() === Category.Dot && item.getIndex() === 0)\n                                .length !==\n                                noteL.note.getModifiers().filter((item) => item.getCategory() === Category.Dot && item.getIndex() === 0)\n                                    .length ||\n                            // If the notes are quite close but not on the same line, shift\n                            (lineDiff < 1 && lineDiff > 0) ||\n                            // If styles are different, shift\n                            JSON.stringify(noteU.note.getStyle()) !== JSON.stringify(noteL.note.getStyle())) {\n                            xShift = voiceXShift + 2;\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                // upper voice is middle voice, so shift it right\n                                noteU.note.setXShift(xShift);\n                            }\n                            else {\n                                // shift lower voice right\n                                noteL.note.setXShift(xShift);\n                            }\n                        }\n                        else if (noteU.note.voice !== noteL.note.voice) {\n                            //If we are not in the same voice\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                if (noteU.line !== noteL.line) {\n                                    xShift = voiceXShift + 2;\n                                    noteU.note.setXShift(xShift);\n                                }\n                                else {\n                                    //same line, swap stem direction for one note\n                                    if (noteL.stemDirection === 1) {\n                                        noteL.stemDirection = -1;\n                                        noteL.note.setStemDirection(-1);\n                                    }\n                                }\n                            }\n                        } //Very close whole notes\n                    }\n                    else if (lineDiff < 1) {\n                        xShift = voiceXShift + 2;\n                        if (noteU.note.duration < noteL.note.duration) {\n                            // upper voice is shorter, so shift it right\n                            noteU.note.setXShift(xShift);\n                        }\n                        else {\n                            // shift lower voice right\n                            noteL.note.setXShift(xShift);\n                        }\n                    }\n                    else if (noteU.note.hasStem()) {\n                        noteU.stemDirection = -noteU.note.getStemDirection();\n                        noteU.note.setStemDirection(noteU.stemDirection);\n                    }\n                    else if (noteL.note.hasStem()) {\n                        noteL.stemDirection = -noteL.note.getStemDirection();\n                        noteL.note.setStemDirection(noteL.stemDirection);\n                    }\n                }\n            }\n            // format complete\n            state.rightShift += xShift;\n            return true;\n        }\n        if (!noteM)\n            throw new RuntimeError('InvalidState', 'noteM not defined.');\n        // For three voices, test if rests can be repositioned\n        //\n        // Special case 1 :: middle voice rest between two notes\n        //\n        if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n            if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n                const restHeight = noteM.maxLine - noteM.minLine;\n                const space = noteU.minLine - noteL.maxLine;\n                if (restHeight < space) {\n                    // center middle voice rest between the upper and lower voices\n                    centerRest(noteM, noteU, noteL);\n                }\n                else {\n                    xShift = voiceXShift + 2; // shift middle rest right\n                    noteM.note.setXShift(xShift);\n                    if (noteL.note.hasBeam() === false) {\n                        noteL.stemDirection = -1;\n                        noteL.note.setStemDirection(-1);\n                    }\n                    if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                        noteU.stemDirection = 1;\n                        noteU.note.setStemDirection(1);\n                    }\n                }\n                // format complete\n                state.rightShift += xShift;\n                return true;\n            }\n        }\n        // Special case 2 :: all voices are rests\n        if (noteU.isrest && noteM.isrest && noteL.isrest) {\n            // Hide upper voice rest\n            noteU.note.renderOptions.draw = false;\n            // Hide lower voice rest\n            noteL.note.renderOptions.draw = false;\n            // format complete\n            state.rightShift += xShift;\n            return true;\n        }\n        // Test if any other rests can be repositioned\n        if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n            // Hide middle voice rest\n            noteM.note.renderOptions.draw = false;\n        }\n        if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n            // Hide middle voice rest\n            noteM.note.renderOptions.draw = false;\n        }\n        if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n            // shift upper voice rest up;\n            shiftRestVertical(noteU, noteM, 1);\n        }\n        if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n            // shift lower voice rest down\n            shiftRestVertical(noteL, noteM, -1);\n        }\n        // If middle voice intersects upper or lower voice\n        if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {\n            // shift middle note right\n            xShift = voiceXShift + 2;\n            noteM.note.setXShift(xShift);\n            if (noteL.note.hasBeam() === false) {\n                noteL.stemDirection = -1;\n                noteL.note.setStemDirection(-1);\n            }\n            if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                noteU.stemDirection = 1;\n                noteU.note.setStemDirection(1);\n            }\n        }\n        state.rightShift += xShift;\n        return true;\n    }\n    static postFormat(notes) {\n        if (!notes)\n            return false;\n        notes.forEach((note) => note.postFormat());\n        return true;\n    }\n    constructor(noteStruct) {\n        var _a, _b, _c;\n        super(noteStruct);\n        //////////////////////////////////////////////////////////////////////////////////////////////////\n        // INSTANCE MEMBERS\n        this.minLine = 0;\n        this.maxLine = 0;\n        _StaveNote_noteHeads.set(this, void 0);\n        // Sorted variant of keyProps used internally.\n        _StaveNote_sortedKeyProps.set(this, []);\n        this.ledgerLineStyle = {};\n        this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';\n        this.octaveShift = (_b = noteStruct.octaveShift) !== null && _b !== void 0 ? _b : 0;\n        // Pull note rendering properties.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // if true, displace note to right\n        this.displaced = false;\n        this.dotShiftY = 0;\n        // for displaced ledger lines\n        this.useDefaultHeadX = false;\n        // Drawing\n        __classPrivateFieldSet(this, _StaveNote_noteHeads, [], \"f\");\n        this.modifiers = [];\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // number of stroke px to the left and right of head\n            strokePx: noteStruct.strokePx || StaveNote.LEDGER_LINE_OFFSET });\n        this.calculateKeyProps();\n        this.buildStem();\n        // Set the stem direction\n        if (noteStruct.autoStem) {\n            this.autoStem();\n        }\n        else {\n            this.setStemDirection((_c = noteStruct.stemDirection) !== null && _c !== void 0 ? _c : Stem.UP);\n        }\n        this.reset();\n        this.buildFlag();\n    }\n    reset() {\n        super.reset();\n        // Save prior noteHead styles & reapply them after making new noteheads.\n        const noteHeadStyles = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").map((noteHead) => noteHead.getStyle());\n        this.buildNoteHeads();\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((noteHead, index) => {\n            const noteHeadStyle = noteHeadStyles[index];\n            if (noteHeadStyle)\n                noteHead.setStyle(noteHeadStyle);\n        });\n        const stave = this.stave;\n        if (stave) {\n            this.setStave(stave);\n        }\n        this.calcNoteDisplacements();\n        return this;\n    }\n    setBeam(beam) {\n        this.beam = beam;\n        this.calcNoteDisplacements();\n        // Update stem extension if a beam is assigned.\n        if (this.stem) {\n            this.stem.setExtension(this.getStemExtension());\n        }\n        return this;\n    }\n    // Builds a `Stem` for the note\n    buildStem() {\n        this.setStem(new Stem({ hide: !!this.isRest() }));\n        return this;\n    }\n    // Builds a `NoteHead` for each key in the note\n    buildNoteHeads() {\n        __classPrivateFieldSet(this, _StaveNote_noteHeads, [], \"f\");\n        const stemDirection = this.getStemDirection();\n        const keys = this.getKeys();\n        let lastLine = undefined;\n        let lineDiff = undefined;\n        let displaced = false;\n        // Draw notes from bottom to top.\n        // For down-stem notes, we draw from top to bottom.\n        let start;\n        let end;\n        let step;\n        if (stemDirection === Stem.UP) {\n            start = 0;\n            end = keys.length;\n            step = 1;\n        }\n        else {\n            start = keys.length - 1;\n            end = -1;\n            step = -1;\n        }\n        for (let i = start; i !== end; i += step) {\n            // Building noteheads rely on sortedKeNotes in order to calculate the displacements\n            const noteProps = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[i].keyProps;\n            const line = noteProps.line;\n            // Keep track of last line with a note head, so that consecutive heads\n            // are correctly displaced.\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                lineDiff = Math.abs(lastLine - line);\n                if (lineDiff === 0 || lineDiff === 0.5) {\n                    displaced = !displaced;\n                }\n                else {\n                    displaced = false;\n                    this.useDefaultHeadX = true;\n                }\n            }\n            lastLine = line;\n            const notehead = new NoteHead({\n                duration: this.duration,\n                noteType: this.noteType,\n                displaced,\n                stemDirection,\n                customGlyphCode: noteProps.code,\n                line: noteProps.line,\n            });\n            notehead.fontInfo = this.fontInfo;\n            this.addChildElement(notehead);\n            __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[__classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[i].index] = notehead;\n        }\n        return __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\");\n    }\n    // Automatically sets the stem direction based on the keys in the note\n    autoStem() {\n        this.setStemDirection(this.calculateOptimalStemDirection());\n    }\n    calculateOptimalStemDirection() {\n        // Figure out optimal stem direction based on given notes\n        // minLine & maxLine rely on sortedKeyProps\n        this.minLine = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[0].keyProps.line;\n        this.maxLine = __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\")[this.keyProps.length - 1].keyProps.line;\n        const MIDDLE_LINE = 3;\n        const decider = (this.minLine + this.maxLine) / 2;\n        const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n        return stemDirection;\n    }\n    // Calculates and stores the properties for each key in the note\n    calculateKeyProps() {\n        var _a;\n        let lastLine;\n        for (let i = 0; i < this.keys.length; ++i) {\n            const key = this.keys[i];\n            const options = { octaveShift: (_a = this.octaveShift) !== null && _a !== void 0 ? _a : 0, duration: this.duration };\n            const props = Tables.keyProperties(key, this.clef, this.noteType, options);\n            if (!props) {\n                throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n            }\n            // Override line placement for default rests\n            if (props.key === 'R') {\n                if (this.duration === '1' || this.duration === 'w') {\n                    props.line = 4;\n                }\n                else {\n                    props.line = 3;\n                }\n            }\n            // Calculate displacement of this note\n            const line = props.line;\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                if (Math.abs(lastLine - line) === 0.5) {\n                    this.displaced = true;\n                    props.displaced = true;\n                    // Have to mark the previous note as\n                    // displaced as well, for modifier placement\n                    if (this.keyProps.length > 0) {\n                        this.keyProps[i - 1].displaced = true;\n                    }\n                }\n            }\n            lastLine = line;\n            this.keyProps.push(props);\n        }\n        // Sort the notes from lowest line to highest line in sortedKeyProps\n        // Warn no longer required as keyProps remains unsorted\n        this.keyProps.forEach((keyProps, index) => {\n            __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\").push({ keyProps, index });\n        });\n        __classPrivateFieldGet(this, _StaveNote_sortedKeyProps, \"f\").sort((a, b) => a.keyProps.line - b.keyProps.line);\n    }\n    // Get the `BoundingBox` for the entire note\n    getBoundingBox() {\n        const boundingBox = new BoundingBox(this.getAbsoluteX(), this.ys[0], 0, 0);\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            boundingBox.mergeWith(notehead.getBoundingBox());\n        });\n        const { yTop, yBottom } = this.getNoteHeadBounds();\n        // eslint-disable-next-line\n        const noteStemHeight = this.stem.getHeight();\n        const flagX = this.getStemX() - Tables.STEM_WIDTH / 2;\n        const flagY = this.getStemDirection() === Stem.DOWN\n            ? yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent\n            : yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;\n        if (!this.isRest() && this.hasStem()) {\n            boundingBox.mergeWith(new BoundingBox(this.getAbsoluteX(), flagY, 0, 0));\n        }\n        if (this.hasFlag()) {\n            const bbFlag = this.flag.getBoundingBox();\n            boundingBox.mergeWith(bbFlag.move(flagX, flagY));\n        }\n        for (let i = 0; i < this.modifiers.length; i++) {\n            boundingBox.mergeWith(this.modifiers[i].getBoundingBox());\n        }\n        return boundingBox;\n    }\n    // Gets the line number of the bottom note in the chord.\n    // If `isTopNote` is `true` then get the top note's line number instead\n    getLineNumber(isTopNote) {\n        if (!this.keyProps.length) {\n            throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n        }\n        let resultLine = this.keyProps[0].line;\n        // No precondition assumed for sortedness of keyProps array\n        for (let i = 0; i < this.keyProps.length; i++) {\n            const thisLine = this.keyProps[i].line;\n            if (isTopNote) {\n                if (thisLine > resultLine)\n                    resultLine = thisLine;\n            }\n            else {\n                if (thisLine < resultLine)\n                    resultLine = thisLine;\n            }\n        }\n        return resultLine;\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        const val = this.glyphProps.codeHead;\n        return val >= '\\ue4e0' && val <= '\\ue4ff';\n    }\n    // Determine if the current note is a chord\n    isChord() {\n        return !this.isRest() && this.keys.length > 1;\n    }\n    // Determine if the `StaveNote` has a stem\n    hasStem() {\n        return this.glyphProps.stem;\n    }\n    hasFlag() {\n        return super.hasFlag() && !this.isRest();\n    }\n    getStemX() {\n        if (this.noteType === 'r') {\n            return this.getCenterGlyphX();\n        }\n        else {\n            // We adjust the origin of the stem because we want the stem left-aligned\n            // with the notehead if stemmed-down, and right-aligned if stemmed-up\n            return super.getStemX() + (this.stemDirection ? Stem.WIDTH / (2 * -this.stemDirection) : 0);\n        }\n    }\n    // Get the `y` coordinate for text placed on the top/bottom of a\n    // note at a desired `textLine`\n    getYForTopText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));\n    }\n    getYForBottomText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);\n    }\n    // Sets the current note to the provided `stave`. This applies\n    // `y` values to the `NoteHeads`.\n    setStave(stave) {\n        super.setStave(stave);\n        const ys = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").map((notehead) => {\n            notehead.setStave(stave);\n            return notehead.getY();\n        });\n        this.setYs(ys);\n        if (this.stem) {\n            const { yTop, yBottom } = this.getNoteHeadBounds();\n            this.stem.setYBounds(yTop, yBottom);\n        }\n        return this;\n    }\n    // Check if note is shifted to the right\n    isDisplaced() {\n        return this.displaced;\n    }\n    // Sets whether shift note to the right. `displaced` is a `boolean`\n    setNoteDisplaced(displaced) {\n        this.displaced = displaced;\n        return this;\n    }\n    // Get the starting `x` coordinate for a `StaveTie`\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        tieStartX += this.getGlyphWidth() + this.xShift + this.rightDisplacedHeadPx;\n        if (this.modifierContext)\n            tieStartX += this.modifierContext.getRightShift();\n        return tieStartX;\n    }\n    // Get the ending `x` coordinate for a `StaveTie`\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        tieEndX += this.xShift - this.leftDisplacedHeadPx;\n        return tieEndX;\n    }\n    // Get the stave line on which to place a rest\n    getLineForRest() {\n        let restLine = this.keyProps[0].line;\n        if (this.keyProps.length > 1) {\n            const lastLine = this.keyProps[this.keyProps.length - 1].line;\n            const top = Math.max(restLine, lastLine);\n            const bot = Math.min(restLine, lastLine);\n            restLine = midLine(top, bot);\n        }\n        return restLine;\n    }\n    // Get the default `x` and `y` coordinates for the provided `position`\n    // and key `index`\n    getModifierStartXY(position, index, options = {}) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n        let x = 0;\n        if (position === LEFT) {\n            // FIXME: Left modifier padding, move to font file\n            x = -1 * 2;\n        }\n        else if (position === RIGHT) {\n            // FIXME: Right modifier padding, move to font file\n            x = this.getGlyphWidth() + this.xShift + 2;\n            if (this.stemDirection === Stem.UP &&\n                this.hasFlag() &&\n                (options.forceFlagRight || isInnerNoteIndex(this, index))) {\n                x += this.flag.getWidth();\n            }\n        }\n        else if (position === BELOW || position === ABOVE) {\n            x = this.getGlyphWidth() / 2;\n        }\n        // addtional y shifts for rests\n        let restShift = 0;\n        switch (__classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index].getText()) {\n            case Glyphs.restDoubleWhole:\n            case Glyphs.restWhole:\n                restShift += 0.5;\n                break;\n            case Glyphs.restHalf:\n            case Glyphs.restQuarter:\n            case Glyphs.rest8th:\n            case Glyphs.rest16th:\n                restShift -= 0.5;\n                break;\n            case Glyphs.rest32nd:\n            case Glyphs.rest64th:\n                restShift -= 1.5;\n                break;\n            case Glyphs.rest128th:\n                restShift -= 2.5;\n                break;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index] + restShift * this.checkStave().getSpacingBetweenLines(),\n        };\n    }\n    // Sets the style of the complete StaveNote, including all keys\n    // and the stem.\n    setStyle(style) {\n        return super.setGroupStyle(style);\n    }\n    setStemStyle(style) {\n        const stem = this.getStem();\n        if (stem)\n            stem.setStyle(style);\n        return this;\n    }\n    getStemStyle() {\n        var _a;\n        return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();\n    }\n    setLedgerLineStyle(style) {\n        this.ledgerLineStyle = style;\n    }\n    getLedgerLineStyle() {\n        return this.ledgerLineStyle;\n    }\n    setFlagStyle(style) {\n        this.flagStyle = style;\n    }\n    getFlagStyle() {\n        return this.flagStyle;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return this.noteHeads[0].getWidth();\n    }\n    // Sets the notehead at `index` to the provided coloring `style`.\n    //\n    // `style` is an `object` with the following properties: `shadowColor`,\n    // `shadowBlur`, `fillStyle`, `strokeStyle`\n    setKeyStyle(index, style) {\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index].setStyle(style);\n        return this;\n    }\n    setKeyLine(index, line) {\n        this.keyProps[index].line = line;\n        this.reset();\n        return this;\n    }\n    getKeyLine(index) {\n        return this.keyProps[index].line;\n    }\n    // Get the width of the note if it is displaced. Used for `Voice`\n    // formatting\n    getVoiceShiftWidth() {\n        // TODO: may need to accommodate for dot here.\n        return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n    }\n    // Calculates and sets the extra pixels to the left or right\n    // if the note is displaced.\n    calcNoteDisplacements() {\n        this.setLeftDisplacedHeadPx(this.displaced && this.stemDirection === Stem.DOWN ? this.getGlyphWidth() : 0);\n        // For upstems with flags, the extra space is unnecessary, since it's taken\n        // up by the flag.\n        this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stemDirection === Stem.UP ? this.getGlyphWidth() : 0);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        let noteHeadPadding = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            // If there are no modifiers on this note, make sure there is adequate padding\n            // between the notes.\n            if (this.modifierContext.getWidth() === 0) {\n                noteHeadPadding = StaveNote.minNoteheadPadding;\n            }\n        }\n        let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n        // For upward flagged notes, the width of the flag needs to be added\n        if (this.shouldDrawFlag() && this.stemDirection === Stem.UP) {\n            width += this.getGlyphWidth();\n            // TODO: Add flag width as a separate metric\n        }\n        this.setWidth(width);\n        this.preFormatted = true;\n    }\n    /**\n     * @typedef {Object} noteHeadBounds\n     * @property {number} yTop the highest notehead bound\n     * @property {number} yBottom the lowest notehead bound\n     * @property {number|Null} displacedX the starting x for displaced noteheads\n     * @property {number|Null} nonDisplacedX the starting x for non-displaced noteheads\n     * @property {number} highestLine the highest notehead line in traditional music line\n     *  numbering (bottom line = 1, top line = 5)\n     * @property {number} lowestLine the lowest notehead line\n     * @property {number|false} highestDisplacedLine the highest staff line number\n     *   for a displaced notehead\n     * @property {number|false} lowestDisplacedLine\n     * @property {number} highestNonDisplacedLine\n     * @property {number} lowestNonDisplacedLine\n     */\n    /**\n     * Get the staff line and y value for the highest & lowest noteheads\n     * @returns {noteHeadBounds}\n     */\n    getNoteHeadBounds() {\n        // Top and bottom Y values for stem.\n        let yTop = +Infinity;\n        let yBottom = -Infinity;\n        let nonDisplacedX;\n        let displacedX;\n        let highestLine = this.checkStave().getNumLines();\n        let lowestLine = 1;\n        let highestDisplacedLine;\n        let lowestDisplacedLine;\n        let highestNonDisplacedLine = highestLine;\n        let lowestNonDisplacedLine = lowestLine;\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            const line = notehead.getLine();\n            const y = notehead.getY();\n            yTop = Math.min(y, yTop);\n            yBottom = Math.max(y, yBottom);\n            if (displacedX === undefined && notehead.isDisplaced()) {\n                displacedX = notehead.getAbsoluteX();\n            }\n            if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n                nonDisplacedX = notehead.getAbsoluteX();\n            }\n            highestLine = Math.max(line, highestLine);\n            lowestLine = Math.min(line, lowestLine);\n            if (notehead.isDisplaced()) {\n                highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n                lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n            }\n            else {\n                highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n                lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n            }\n        }, this);\n        return {\n            yTop,\n            yBottom,\n            displacedX,\n            nonDisplacedX,\n            highestLine,\n            lowestLine,\n            highestDisplacedLine,\n            lowestDisplacedLine,\n            highestNonDisplacedLine,\n            lowestNonDisplacedLine,\n        };\n    }\n    // Get the starting `x` coordinate for the noteheads\n    getNoteHeadBeginX() {\n        return this.getAbsoluteX() + this.xShift;\n    }\n    // Get the ending `x` coordinate for the noteheads\n    getNoteHeadEndX() {\n        const xBegin = this.getNoteHeadBeginX();\n        return xBegin + this.getGlyphWidth();\n    }\n    get noteHeads() {\n        return __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").slice();\n    }\n    // Draw the ledger lines between the stave and the highest/lowest keys\n    drawLedgerLines() {\n        const stave = this.checkStave();\n        const { renderOptions: { strokePx }, } = this;\n        const ctx = this.checkContext();\n        const width = this.getGlyphWidth() + strokePx * 2;\n        const doubleWidth = 2 * (this.getGlyphWidth() + strokePx) - Stem.WIDTH / 2;\n        if (this.isRest())\n            return;\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        const { highestLine, lowestLine, highestDisplacedLine, highestNonDisplacedLine, lowestDisplacedLine, lowestNonDisplacedLine, displacedX, nonDisplacedX, } = this.getNoteHeadBounds();\n        // Early out if there are no ledger lines to draw.\n        if (highestLine < 6 && lowestLine > 0)\n            return;\n        const minX = Math.min(displacedX !== null && displacedX !== void 0 ? displacedX : 0, nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0);\n        const drawLedgerLine = (y, normal, displaced) => {\n            let x;\n            if (displaced && normal)\n                x = minX - strokePx;\n            else if (normal)\n                x = (nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0) - strokePx;\n            else\n                x = (displacedX !== null && displacedX !== void 0 ? displacedX : 0) - strokePx;\n            const ledgerWidth = normal && displaced ? doubleWidth : width;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + ledgerWidth, y);\n            ctx.stroke();\n        };\n        const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());\n        this.applyStyle(ctx, style);\n        // Draw ledger lines below the staff:\n        for (let line = 6; line <= highestLine; ++line) {\n            const normal = nonDisplacedX !== undefined && line <= highestNonDisplacedLine;\n            const displaced = highestDisplacedLine !== undefined && line <= highestDisplacedLine;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        // Draw ledger lines above the staff:\n        for (let line = 0; line >= lowestLine; --line) {\n            const normal = nonDisplacedX !== undefined && line >= lowestNonDisplacedLine;\n            const displaced = lowestDisplacedLine !== undefined && line >= lowestDisplacedLine;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        this.restoreStyle(ctx, style);\n    }\n    // Draw all key modifiers\n    drawModifiers(noteheadParam) {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            const index = modifier.checkIndex();\n            const notehead = __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\")[index];\n            if (notehead === noteheadParam) {\n                const noteheadStyle = notehead.getStyle();\n                notehead.applyStyle(ctx, noteheadStyle);\n                modifier.setContext(ctx);\n                modifier.drawWithStyle();\n                notehead.restoreStyle(ctx, noteheadStyle);\n            }\n        }\n    }\n    shouldDrawFlag() {\n        const hasStem = this.stem !== undefined;\n        const hasFlag = this.glyphProps.codeFlagUp !== undefined;\n        const hasNoBeam = this.beam === undefined;\n        return hasStem && hasFlag && hasNoBeam && !this.isRest();\n    }\n    // Draw the flag for the note\n    drawFlag() {\n        const ctx = this.checkContext();\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        if (this.shouldDrawFlag()) {\n            const { yTop, yBottom } = this.getNoteHeadBounds();\n            // eslint-disable-next-line\n            const noteStemHeight = this.stem.getHeight();\n            const flagX = this.getStemX() - Tables.STEM_WIDTH / 2;\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent\n                : // Up stems are above the note head and have flags on the right.\n                    yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;\n            // Draw the Flag\n            this.applyStyle(ctx, this.flagStyle);\n            this.flag.renderText(ctx, flagX, flagY);\n            this.restoreStyle(ctx, this.flagStyle);\n        }\n    }\n    // Draw the NoteHeads\n    drawNoteHeads() {\n        const ctx = this.checkContext();\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => {\n            notehead.applyStyle(ctx);\n            ctx.openGroup('notehead', notehead.getAttribute('id'));\n            notehead.setContext(ctx).draw();\n            this.drawModifiers(notehead);\n            ctx.closeGroup();\n            notehead.restoreStyle(ctx);\n        });\n    }\n    drawStem(stemOptions) {\n        // GCR TODO: I can't find any context in which this is called with the stemStruct\n        // argument in the codebase or tests. Nor can I find a case where super.drawStem\n        // is called at all. Perhaps these should be removed?\n        const ctx = this.checkContext();\n        if (stemOptions) {\n            this.setStem(new Stem(stemOptions));\n        }\n        // If we will render a flag, we shorten the stem so that the tip\n        // does not poke through the flag.\n        if (this.shouldDrawFlag() && this.stem) {\n            this.stem.adjustHeightForFlag();\n        }\n        if (this.stem) {\n            this.stem.setContext(ctx).draw();\n        }\n    }\n    /**\n     * Override stemmablenote stem extension to adjust for distance from middle line.\n     */\n    getStemExtension() {\n        const superStemExtension = super.getStemExtension();\n        if (!this.glyphProps.stem) {\n            return superStemExtension;\n        }\n        const stemDirection = this.getStemDirection();\n        if (stemDirection !== this.calculateOptimalStemDirection()) {\n            return superStemExtension; // no adjustment for manually set stem direction.\n        }\n        let midLineDistance;\n        const MIDDLE_LINE = 3;\n        if (stemDirection === Stem.UP) {\n            // Note that the use of maxLine here instead of minLine might\n            // seem counterintuitive, but in the case of (say) treble clef\n            // chord(F2, E4) stem up, we do not want to extend the stem because\n            // of F2, when a normal octave-length stem above E4 is fine.\n            //\n            // maxLine and minLine are set in calculateOptimalStemDirection() so\n            // will be known.\n            midLineDistance = MIDDLE_LINE - this.maxLine;\n        }\n        else {\n            midLineDistance = this.minLine - MIDDLE_LINE;\n        }\n        // how many lines more than an octave is the relevant notehead?\n        const linesOverOctaveFromMidLine = midLineDistance - 3.5;\n        if (linesOverOctaveFromMidLine <= 0) {\n            return superStemExtension;\n        }\n        const stave = this.getStave();\n        let spacingBetweenLines = 10;\n        if (stave !== undefined) {\n            spacingBetweenLines = stave.getSpacingBetweenLines();\n        }\n        return superStemExtension + linesOverOctaveFromMidLine * spacingBetweenLines;\n    }\n    // Draws all the `StaveNote` parts. This is the main drawing method.\n    draw() {\n        if (this.renderOptions.draw === false)\n            return;\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        const ctx = this.checkContext();\n        const xBegin = this.getNoteHeadBeginX();\n        const shouldRenderStem = this.hasStem() && !this.beam;\n        // Format note head x positions\n        __classPrivateFieldGet(this, _StaveNote_noteHeads, \"f\").forEach((notehead) => notehead.setX(xBegin));\n        if (this.stem) {\n            // Format stem x positions\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n        }\n        L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n        // Apply the overall style -- may be contradicted by local settings:\n        this.applyStyle();\n        ctx.openGroup('stavenote', this.getAttribute('id'));\n        this.drawLedgerLines();\n        if (shouldRenderStem)\n            this.drawStem();\n        this.drawNoteHeads();\n        this.drawFlag();\n        const bb = this.getBoundingBox();\n        ctx.pointerRect(bb.getX(), bb.getY(), bb.getW(), bb.getH());\n        ctx.closeGroup();\n        this.restoreStyle();\n        this.setRendered();\n    }\n}\n_StaveNote_noteHeads = new WeakMap(), _StaveNote_sortedKeyProps = new WeakMap();\nStaveNote.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveTie extends Element {\n    static get CATEGORY() {\n        return Category.StaveTie;\n    }\n    /**\n     * @param notes is a struct that has:\n     *\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text = '') {\n        super();\n        this.setNotes(notes);\n        this.text = text;\n        this.renderOptions = {\n            cp1: 8, // Curve control point 1\n            cp2: 12, // Curve control point 2\n            textShiftX: 0,\n            firstXShift: 0,\n            lastXShift: 0,\n            yShift: 7,\n            tieSpacing: 0,\n        };\n    }\n    setDirection(direction) {\n        this.direction = direction;\n        return this;\n    }\n    /**\n     * Set the notes to attach this tie to.\n     *\n     * @param {!Object} notes The notes to tie up.\n     */\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Tie needs to have either firstNote or lastNote set.');\n        }\n        if (!notes.firstIndexes) {\n            notes.firstIndexes = [0];\n        }\n        if (!notes.lastIndexes) {\n            notes.lastIndexes = [0];\n        }\n        if (notes.firstIndexes.length !== notes.lastIndexes.length) {\n            throw new RuntimeError('BadArguments', 'Tied notes must have same number of indexes.');\n        }\n        this.notes = notes;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.notes.firstNote || !this.notes.lastNote;\n    }\n    /**\n     * @param params.firstX is specified in pixels.\n     * @param params.lastX is specified in pixels.\n     */\n    renderTie(params) {\n        if (params.firstYs.length === 0 || params.lastYs.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        let cp1 = this.renderOptions.cp1;\n        let cp2 = this.renderOptions.cp2;\n        if (Math.abs(params.lastX - params.firstX) < 10) {\n            cp1 = 2;\n            cp2 = 8;\n        }\n        const firstXShift = this.renderOptions.firstXShift;\n        const lastXShift = this.renderOptions.lastXShift;\n        const yShift = this.renderOptions.yShift * params.direction;\n        // setNotes(...) verified that firstIndexes and lastIndexes are not undefined.\n        // As a result, we use the ! non-null assertion operator here.\n        // eslint-disable-next-line\n        const firstIndexes = this.notes.firstIndexes;\n        // eslint-disable-next-line\n        const lastIndexes = this.notes.lastIndexes;\n        this.applyStyle();\n        ctx.openGroup('stavetie', this.getAttribute('id'));\n        for (let i = 0; i < firstIndexes.length; ++i) {\n            const cpX = (params.lastX + lastXShift + (params.firstX + firstXShift)) / 2;\n            // firstY and lastY are specified in pixels.\n            const firstY = params.firstYs[firstIndexes[i]] + yShift;\n            const lastY = params.lastYs[lastIndexes[i]] + yShift;\n            if (isNaN(firstY) || isNaN(lastY)) {\n                throw new RuntimeError('BadArguments', 'Bad indexes for tie rendering.');\n            }\n            const topControlPointY = (firstY + lastY) / 2 + cp1 * params.direction;\n            const bottomControlPointY = (firstY + lastY) / 2 + cp2 * params.direction;\n            ctx.beginPath();\n            ctx.moveTo(params.firstX + firstXShift, firstY);\n            ctx.quadraticCurveTo(cpX, topControlPointY, params.lastX + lastXShift, lastY);\n            ctx.quadraticCurveTo(cpX, bottomControlPointY, params.firstX + firstXShift, firstY);\n            ctx.closePath();\n            ctx.fill();\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n    /**\n     * @param firstX specified in pixels\n     * @param lastX specified in pixels\n     */\n    renderTieText(firstX, lastX) {\n        var _a, _b, _c;\n        const ctx = this.checkContext();\n        let centerX = (firstX + lastX) / 2;\n        centerX -= ctx.measureText(this.text).width / 2;\n        const stave = (_b = (_a = this.notes.firstNote) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.lastNote) === null || _c === void 0 ? void 0 : _c.checkStave();\n        if (stave) {\n            ctx.save();\n            ctx.setFont(this.fontInfo);\n            ctx.fillText(this.text, centerX + this.renderOptions.textShiftX, stave.getYForTopText() - 1);\n            ctx.restore();\n        }\n    }\n    /**\n     * Returns the TieNotes structure of the first and last note this tie connects.\n     */\n    getNotes() {\n        return this.notes;\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.notes.firstNote;\n        const lastNote = this.notes.lastNote;\n        // Provide some default values so the compiler doesn't complain.\n        // firstX and lastX are in pixels.\n        let firstX = 0;\n        let lastX = 0;\n        let firstYs = [0];\n        let lastYs = [0];\n        let stemDirection = 0;\n        if (firstNote) {\n            firstX = firstNote.getTieRightX() + this.renderOptions.tieSpacing;\n            stemDirection = firstNote.getStemDirection();\n            firstYs = firstNote.getYs();\n        }\n        else if (lastNote) {\n            const stave = lastNote.checkStave();\n            firstX = stave.getTieStartX();\n            firstYs = lastNote.getYs();\n            this.notes.firstIndexes = this.notes.lastIndexes;\n        }\n        if (lastNote) {\n            lastX = lastNote.getTieLeftX() + this.renderOptions.tieSpacing;\n            stemDirection = lastNote.getStemDirection();\n            lastYs = lastNote.getYs();\n        }\n        else if (firstNote) {\n            const stave = firstNote.checkStave();\n            lastX = stave.getTieEndX();\n            lastYs = firstNote.getYs();\n            this.notes.lastIndexes = this.notes.firstIndexes;\n        }\n        if (this.direction) {\n            stemDirection = this.direction;\n        }\n        this.renderTie({\n            firstX,\n            lastX,\n            firstYs,\n            lastYs,\n            direction: stemDirection,\n        });\n        this.renderTieText(firstX, lastX);\n        return true;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { StaveTie } from './stavetie';\nimport { Category } from './typeguard';\nexport class TabTie extends StaveTie {\n    static get CATEGORY() {\n        return Category.TabTie;\n    }\n    static createHammeron(notes) {\n        return new TabTie(notes, 'H');\n    }\n    static createPulloff(notes) {\n        return new TabTie(notes, 'P');\n    }\n    /**\n     * @param notes is a struct that has:\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text) {\n        super(notes, text);\n        this.renderOptions.cp1 = 9;\n        this.renderOptions.cp2 = 11;\n        this.renderOptions.yShift = 3;\n        this.direction = -1; // Tab tie's are always face up.\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError, sumArray } from './util';\nexport var VoiceMode;\n(function (VoiceMode) {\n    VoiceMode[VoiceMode[\"STRICT\"] = 1] = \"STRICT\";\n    VoiceMode[VoiceMode[\"SOFT\"] = 2] = \"SOFT\";\n    VoiceMode[VoiceMode[\"FULL\"] = 3] = \"FULL\";\n})(VoiceMode || (VoiceMode = {}));\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n    static get CATEGORY() {\n        return Category.Voice;\n    }\n    /**\n     * Modes allow the addition of ticks in three different ways:\n     * - STRICT: This is the default. Ticks must fill the voice.\n     * - SOFT: Ticks can be added without restrictions.\n     * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n     */\n    static get Mode() {\n        return VoiceMode;\n    }\n    constructor(time) {\n        super();\n        this.resolutionMultiplier = 1;\n        this.mode = VoiceMode.STRICT;\n        this.preFormatted = false;\n        this.ticksUsed = new Fraction(0, 1);\n        this.largestTickWidth = 0;\n        this.tickables = [];\n        this.options = {\n            softmaxFactor: Tables.SOFTMAX_FACTOR,\n        };\n        // Convert the `time` string into a VoiceTime object if necessary.\n        let voiceTime;\n        if (typeof time === 'string') {\n            // Time signature shortcut: \"4/4\", \"3/8\", etc.\n            const match = time.match(/(\\d+)\\/(\\d+)/);\n            if (match) {\n                voiceTime = {\n                    numBeats: parseInt(match[1]),\n                    beatValue: parseInt(match[2]),\n                };\n            }\n        }\n        else {\n            voiceTime = time;\n        }\n        // Default time signature is 4/4.\n        this.time = Object.assign({ numBeats: 4, beatValue: 4, resolution: Tables.RESOLUTION }, voiceTime);\n        // Recalculate total ticks.\n        this.totalTicks = new Fraction(this.time.numBeats * (this.time.resolution / this.time.beatValue), 1);\n        // until tickables are added, the smallestTickCount is the same as the stated totalTicks duration.\n        this.smallestTickCount = this.totalTicks.clone();\n    }\n    /** Get the total ticks in the voice. */\n    getTotalTicks() {\n        return this.totalTicks;\n    }\n    /** Get the total ticks used in the voice by all the tickables. */\n    getTicksUsed() {\n        return this.ticksUsed;\n    }\n    /** Get the largest width of all the tickables. */\n    getLargestTickWidth() {\n        return this.largestTickWidth;\n    }\n    /** Get the tick count for the shortest tickable */\n    getSmallestTickCount() {\n        return this.smallestTickCount;\n    }\n    /** Get the tickables in the voice. */\n    getTickables() {\n        return this.tickables;\n    }\n    /** Get the voice mode (Voice.Mode.SOFT, STRICT, or FULL) */\n    getMode() {\n        return this.mode;\n    }\n    /**\n     * Set the voice mode.\n     * @param mode value from `VoiceMode` or Voice.Mode\n     */\n    setMode(mode) {\n        this.mode = mode;\n        return this;\n    }\n    /** Get the resolution multiplier for the voice. */\n    getResolutionMultiplier() {\n        return this.resolutionMultiplier;\n    }\n    /** Get the actual tick resolution for the voice. */\n    getActualResolution() {\n        return this.resolutionMultiplier * this.time.resolution;\n    }\n    /** Set the voice's stave. */\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    /** Get the bounding box for the voice. */\n    getBoundingBox() {\n        const boundingBox = this.tickables[0].getBoundingBox();\n        for (let i = 1; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            if (!tickable.getStave() && this.stave)\n                tickable.setStave(this.stave);\n            const bb = tickable.getBoundingBox();\n            boundingBox.mergeWith(bb);\n        }\n        return boundingBox;\n    }\n    /** Set the voice mode to strict or soft. */\n    setStrict(strict) {\n        this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n        return this;\n    }\n    /** Determine if the voice is complete according to the voice mode. */\n    isComplete() {\n        if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n            return this.ticksUsed.equals(this.totalTicks);\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * We use softmax to layout the tickables proportional to the exponent of\n     * their duration. The softmax factor is used to determine the 'linearness' of\n     * the layout.\n     *\n     * The softmax of all the tickables in this voice should sum to 1.\n     */\n    setSoftmaxFactor(factor) {\n        this.options.softmaxFactor = factor;\n        this.expTicksUsed = 0; // reset\n        return this;\n    }\n    /**\n     * Calculate the sum of the exponents of all the ticks in this voice to use\n     * as the denominator of softmax.  (It is not the sum of the softmax(t) over all tickables)\n     *\n     * Note that the \"exp\" of \"expTicksUsed\" stands for \"expontential\" ticks used,\n     * not \"expected\" ticks used.\n     */\n    reCalculateExpTicksUsed() {\n        const totalTicks = this.ticksUsed.value();\n        const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n        this.expTicksUsed = sumArray(this.tickables.map(exp));\n        return this.expTicksUsed;\n    }\n    /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n    softmax(tickValue) {\n        if (!this.expTicksUsed) {\n            this.expTicksUsed = this.reCalculateExpTicksUsed();\n        }\n        const totalTicks = this.ticksUsed.value();\n        const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n        const sm = exp(tickValue) / this.expTicksUsed;\n        return sm;\n    }\n    /** Add a tickable to the voice. */\n    addTickable(tickable) {\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            // Update the total ticks for this line.\n            this.ticksUsed.add(ticks);\n            this.expTicksUsed = 0; // reset\n            if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n                this.ticksUsed.greaterThan(this.totalTicks)) {\n                this.ticksUsed.subtract(ticks);\n                throw new RuntimeError('BadArgument', 'Too many ticks.');\n            }\n            // Track the smallest tickable for formatting.\n            if (ticks.lessThan(this.smallestTickCount)) {\n                this.smallestTickCount = ticks.clone();\n            }\n            this.resolutionMultiplier = this.ticksUsed.denominator;\n            // Expand total ticks using denominator from ticks used.\n            this.totalTicks.add(0, this.ticksUsed.denominator);\n        }\n        // Add the tickable to the line.\n        this.tickables.push(tickable);\n        tickable.setVoice(this);\n        return this;\n    }\n    /** Add an array of tickables to the voice. */\n    addTickables(tickables) {\n        for (let i = 0; i < tickables.length; ++i) {\n            this.addTickable(tickables[i]);\n        }\n        return this;\n    }\n    /** Preformat the voice by applying the voice's stave to each note. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const stave = this.checkStave();\n        this.tickables.forEach((tickable) => {\n            if (!tickable.getStave()) {\n                tickable.setStave(stave);\n            }\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /**\n     * Render the voice onto the canvas `context` and an optional `stave`.\n     * If `stave` is omitted, it is expected that the notes have staves\n     * already set.\n     *\n     * This method also calculates the voice's boundingBox while drawing\n     * the notes. Note the similarities with this.getBoundingBox().\n     */\n    draw(context = this.checkContext(), stave) {\n        stave = stave !== null && stave !== void 0 ? stave : this.stave;\n        this.setRendered();\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            // Set the stave if provided.\n            if (stave) {\n                tickable.setStave(stave);\n            }\n            defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n            tickable.setContext(context);\n            tickable.drawWithStyle();\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\nimport { Beam } from './beam';\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { Tables } from './tables';\nimport { TabTie } from './tabtie';\nimport { Category, isStaveNote } from './typeguard';\nimport { log } from './util';\nimport { Voice } from './voice';\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (GraceNoteGroup.DEBUG)\n        log('VexFlow.GraceNoteGroup', args);\n}\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.GraceNoteGroup;\n    }\n    /** Arranges groups inside a `ModifierContext`. */\n    static format(gracenoteGroups, state) {\n        const groupSpacingStave = 4;\n        const groupSpacingTab = 0;\n        if (!gracenoteGroups || gracenoteGroups.length === 0)\n            return false;\n        const groupList = [];\n        let prevNote = null;\n        let shiftL = 0;\n        for (let i = 0; i < gracenoteGroups.length; ++i) {\n            const gracenoteGroup = gracenoteGroups[i];\n            const note = gracenoteGroup.getNote();\n            const isStavenote = isStaveNote(note);\n            const spacing = isStavenote ? groupSpacingStave : groupSpacingTab;\n            if (isStavenote && note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n                }\n                prevNote = note;\n            }\n            groupList.push({ shift: shiftL, gracenoteGroup, spacing });\n        }\n        // If first note left shift in case it is displaced\n        let groupShift = groupList[0].shift;\n        let formatWidth;\n        for (let i = 0; i < groupList.length; ++i) {\n            const gracenoteGroup = groupList[i].gracenoteGroup;\n            gracenoteGroup.preFormat();\n            formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;\n            groupShift = Math.max(formatWidth, groupShift);\n        }\n        for (let i = 0; i < groupList.length; ++i) {\n            const gracenoteGroup = groupList[i].gracenoteGroup;\n            formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;\n            gracenoteGroup.setSpacingFromNextModifier(groupShift - Math.min(formatWidth, groupShift) + StaveNote.minNoteheadPadding);\n        }\n        state.leftShift += groupShift;\n        return true;\n    }\n    //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n    constructor(graceNotes, showSlur) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.graceNotes = graceNotes;\n        this.width = 0;\n        this.showSlur = showSlur;\n        this.slur = undefined;\n        this.voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.renderOptions = {\n            slurYShift: 0,\n        };\n        this.beams = [];\n        this.voice.addTickables(this.graceNotes);\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (!this.formatter) {\n            this.formatter = new Formatter();\n        }\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    beamNotes(graceNotes) {\n        graceNotes = graceNotes || this.graceNotes;\n        if (graceNotes.length > 1) {\n            const beam = new Beam(graceNotes);\n            beam.renderOptions.beamWidth = 3;\n            beam.renderOptions.partialBeamLength = 4;\n            this.beams.push(beam);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width + StaveNote.minNoteheadPadding;\n    }\n    getGraceNotes() {\n        return this.graceNotes;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        L('Drawing grace note group for:', note);\n        this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n        // Draw grace notes.\n        this.graceNotes.forEach((graceNote) => graceNote.setContext(ctx).draw());\n        // Draw beams.\n        this.beams.forEach((beam) => beam.setContext(ctx).draw());\n        if (this.showSlur) {\n            // Create and draw slur.\n            const isStavenote = isStaveNote(note);\n            const TieClass = isStavenote ? StaveTie : TabTie;\n            this.slur = new TieClass({\n                lastNote: this.graceNotes[0],\n                firstNote: note,\n                firstIndexes: [0],\n                lastIndexes: [0],\n            });\n            this.slur.renderOptions.cp2 = 12;\n            this.slur.renderOptions.yShift = (isStavenote ? 7 : 5) + this.renderOptions.slurYShift;\n            this.slur.setContext(ctx).draw();\n        }\n    }\n}\nGraceNoteGroup.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { Voice } from './voice';\nexport class NoteSubGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.NoteSubGroup;\n    }\n    // Arrange groups inside a `ModifierContext`\n    static format(groups, state) {\n        if (!groups || groups.length === 0)\n            return false;\n        let width = 0;\n        for (let i = 0; i < groups.length; ++i) {\n            const group = groups[i];\n            group.preFormat();\n            width += group.getWidth();\n        }\n        state.leftShift += width;\n        return true;\n    }\n    constructor(subNotes) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.subNotes = subNotes;\n        this.subNotes.forEach((subNote) => {\n            subNote.setIgnoreTicks(false);\n        });\n        this.width = 0;\n        this.formatter = new Formatter();\n        this.voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.voice.addTickables(this.subNotes);\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n        this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n// MIT License\nimport { getBottomY, getInitialOffset, getTopY } from './articulation';\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Ornament.DEBUG)\n        log('VexFlow.Ornament', args);\n}\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `VexFlow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n    /** Ornaments category string. */\n    static get CATEGORY() {\n        return Category.Ornament;\n    }\n    static get minPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Arrange ornaments inside `ModifierContext` */\n    static format(ornaments, state) {\n        var _a, _b;\n        if (!ornaments || ornaments.length === 0)\n            return false;\n        let width = 0; // width is used by ornaments, which are always centered on the note head\n        let rightShift = state.rightShift; // jazz ornaments calculate r/l shift separately\n        let leftShift = state.leftShift;\n        for (let i = 0; i < ornaments.length; ++i) {\n            const ornament = ornaments[i];\n            const increment = 2;\n            if (ornament.position === ModifierPosition.RIGHT) {\n                ornament.xShift += rightShift + 2;\n                rightShift += ornament.width + Ornament.minPadding;\n            }\n            else if (ornament.position === ModifierPosition.LEFT) {\n                ornament.xShift -= leftShift + ornament.width + 2;\n                leftShift += ornament.width + Ornament.minPadding;\n            }\n            else if (ornament.position === ModifierPosition.ABOVE) {\n                width = Math.max(ornament.getWidth(), width);\n                const note = ornament.getNote();\n                let curTop = note.getLineNumber(true) + state.topTextLine;\n                const stem = note.getStem();\n                if (stem && note.getStemDirection() === Stem.UP) {\n                    curTop += Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n                const numLines = (_b = (_a = note.getStave()) === null || _a === void 0 ? void 0 : _a.getNumLines()) !== null && _b !== void 0 ? _b : 0;\n                // make sure that the ornaments stay above the staff\n                if (curTop < numLines)\n                    state.topTextLine += numLines - curTop;\n                ornament.setTextLine(state.topTextLine);\n                state.topTextLine += increment;\n            }\n            else {\n                width = Math.max(ornament.getWidth(), width);\n                ornament.setTextLine(state.textLine);\n                state.textLine += increment;\n            }\n        }\n        // Note: 'legit' ornaments don't consider other modifiers when calculating their\n        // X position, but jazz ornaments sometimes need to.\n        state.leftShift = leftShift + width / 2;\n        state.rightShift = rightShift + width / 2;\n        return true;\n    }\n    /**\n     * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n     * these are generally on the top of the staff.\n     */\n    static get ornamentNoteTransition() {\n        return ['flip', 'jazzTurn', 'smear'];\n    }\n    /**\n     * ornamentAttack indicates something that happens in the attach, placed before the note and\n     * any accidentals\n     */\n    static get ornamentAttack() {\n        return ['scoop'];\n    }\n    /**\n     * The ornament is aligned based on the note head, but without regard to whether the\n     * stem goes up or down.\n     */\n    static get ornamentAlignWithNoteHead() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'scoop'];\n    }\n    /**\n     * An ornament that happens on the release of the note, generally placed after the\n     * note and overlapping the next beat/measure..\n     */\n    static get ornamentRelease() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n    }\n    static get ornamentLeft() {\n        return ['scoop'];\n    }\n    static get ornamentRight() {\n        return ['doit', 'fall', 'fallLong', 'doitLong'];\n    }\n    static get ornamentYShift() {\n        return ['fallLong'];\n    }\n    /** ornamentArticulation goes above/below the note based on space availablity */\n    static get ornamentArticulation() {\n        return ['bend', 'plungerClosed', 'plungerOpen'];\n    }\n    /**\n     * Create a new ornament of type `type`, which is an entry in\n     * `VexFlow.ornamentCodes` in `tables.ts`.\n     */\n    constructor(type) {\n        super();\n        // Default position ABOVE\n        this.position = ModifierPosition.ABOVE;\n        if (Ornament.ornamentRight.indexOf(type) >= 0) {\n            this.position = ModifierPosition.RIGHT;\n        }\n        if (Ornament.ornamentLeft.indexOf(type) >= 0) {\n            this.position = ModifierPosition.LEFT;\n        }\n        this.type = type;\n        this.delayed = false;\n        this.renderOptions = {\n            accidentalLowerPadding: 3,\n            accidentalUpperPadding: 3,\n        };\n        // some jazz ornaments are above or below depending on stem direction.\n        this.adjustForStemDirection = false;\n        this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n        // Is this a jazz ornament that goes between this note and the next note.\n        if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            this.delayed = true;\n        }\n        this.text = Tables.ornamentCodes(this.type);\n    }\n    /** Set note attached to ornament. */\n    setNote(note) {\n        super.setNote(note);\n        // articulations above/below the line can be stacked.\n        if (Ornament.ornamentArticulation.indexOf(this.type) >= 0) {\n            // Unfortunately we don't know the stem direction.  So we base it\n            // on the line number, but also allow it to be overridden.\n            if (note.getLineNumber() >= 3) {\n                this.position = Modifier.Position.ABOVE;\n            }\n            else {\n                this.position = Modifier.Position.BELOW;\n            }\n        }\n        return this;\n    }\n    /** Set whether the ornament is to be delayed. */\n    setDelayed(delayed) {\n        this.delayed = delayed;\n        return this;\n    }\n    /** Set the upper accidental for the ornament. */\n    setUpperAccidental(accid) {\n        this.accidentalUpper = new Element();\n        this.accidentalUpper.setText(Tables.accidentalCodes(accid));\n        return this;\n    }\n    /** Set the lower accidental for the ornament. */\n    setLowerAccidental(accid) {\n        this.accidentalLower = new Element();\n        this.accidentalLower.setText(Tables.accidentalCodes(accid));\n        return this;\n    }\n    /** Render ornament in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        this.applyStyle();\n        ctx.openGroup('ornament', this.getAttribute('id'));\n        // Get initial coordinates for the modifier position\n        const start = note.getModifierStartXY(this.position, this.index);\n        let glyphX = start.x;\n        const staffSpace = stave.getSpacingBetweenLines();\n        const initialOffset = getInitialOffset(note, this.position);\n        // If the ornament is aligned with the note head, don't consider the stave y\n        // but use the 'natural' modifier y\n        let glyphY = this.ornamentAlignWithNoteHead ? start.y : 0;\n        if (this.position === ModifierPosition.ABOVE) {\n            glyphY = getTopY(note, this.textLine) - (this.textLine + initialOffset) * staffSpace;\n        }\n        if (this.position === ModifierPosition.BELOW) {\n            glyphY = getBottomY(note, this.textLine) + (this.textLine + initialOffset + 1.5) * staffSpace;\n        }\n        // Ajdust x position if ornament is delayed\n        if (this.delayed) {\n            let delayXShift = 0;\n            const startX = note.getTickContext().getX();\n            if (this.delayXShift !== undefined) {\n                delayXShift = this.delayXShift;\n            }\n            else {\n                const tickables = note.getVoice().getTickables();\n                const index = tickables.indexOf(note);\n                const nextContext = index + 1 < tickables.length ? tickables[index + 1].checkTickContext() : undefined;\n                if (nextContext) {\n                    delayXShift += (nextContext.getX() - startX) * 0.5;\n                }\n                else {\n                    delayXShift += (stave.getX() + stave.getWidth() - glyphX) * 0.5;\n                }\n                this.delayXShift = delayXShift;\n            }\n            glyphX += delayXShift;\n        }\n        L('Rendering ornament: ', this.text.charCodeAt(0), glyphX, glyphY);\n        if (this.accidentalLower) {\n            this.accidentalLower.renderText(ctx, glyphX + this.xShift - this.accidentalLower.getWidth() * 0.5, glyphY + this.yShift - this.accidentalLower.getTextMetrics().actualBoundingBoxDescent);\n            glyphY -= this.accidentalLower.getHeight() + this.renderOptions.accidentalLowerPadding;\n        }\n        // ornament requires yShift\n        if (Ornament.ornamentYShift.indexOf(this.type) >= 0) {\n            this.yShift += this.getHeight();\n        }\n        this.x =\n            glyphX -\n                (this.position === ModifierPosition.ABOVE || this.position === ModifierPosition.BELOW ? this.width * 0.5 : 0);\n        this.y = glyphY;\n        this.renderText(ctx, 0, 0);\n        if (this.accidentalUpper) {\n            glyphY -= this.getHeight() + this.renderOptions.accidentalUpperPadding;\n            this.accidentalUpper.renderText(ctx, glyphX + this.xShift - this.accidentalUpper.getWidth() * 0.5, glyphY + this.yShift - this.accidentalUpper.getTextMetrics().actualBoundingBoxDescent);\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Ornament.DEBUG` to `true`. */\nOrnament.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Rodrigo Vilar\n// MIT License\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Category } from './typeguard';\n/** Parenthesis implements parenthesis modifiers for notes. */\nexport class Parenthesis extends Modifier {\n    static get CATEGORY() {\n        return Category.Parenthesis;\n    }\n    /** Add parentheses to the notes. */\n    static buildAndAttach(notes) {\n        for (const note of notes) {\n            for (let i = 0; i < note.keys.length; i++) {\n                note.addModifier(new Parenthesis(ModifierPosition.LEFT), i);\n                note.addModifier(new Parenthesis(ModifierPosition.RIGHT), i);\n            }\n        }\n    }\n    /** Arrange parentheses inside a ModifierContext. */\n    static format(parentheses, state) {\n        if (!parentheses || parentheses.length === 0)\n            return false;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        for (let i = 0; i < parentheses.length; ++i) {\n            const parenthesis = parentheses[i];\n            const note = parenthesis.getNote();\n            const pos = parenthesis.getPosition();\n            const index = parenthesis.checkIndex();\n            let shift = 0;\n            if (pos === ModifierPosition.RIGHT) {\n                shift = note.getRightParenthesisPx(index);\n                xWidthR = xWidthR > shift + parenthesis.width ? xWidthR : shift + parenthesis.width;\n            }\n            if (pos === ModifierPosition.LEFT) {\n                shift = note.getLeftParenthesisPx(index) + parenthesis.width;\n                xWidthL = xWidthL > shift + parenthesis.width ? xWidthL : shift + parenthesis.width;\n            }\n            parenthesis.setXShift(shift);\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    /**\n     * Constructor\n     *\n     * @param position Modifier.Position.LEFT (default) or Modifier.Position.RIGHT\n     */\n    constructor(position) {\n        super();\n        this.position = position !== null && position !== void 0 ? position : Modifier.Position.LEFT;\n        if (this.position === Modifier.Position.RIGHT) {\n            this.text = '\\uE0F6'; /*noteheadParenthesisRight*/\n        }\n        else if (this.position === Modifier.Position.LEFT) {\n            this.text = '\\uE0F5'; /*noteheadParenthesisLeft*/\n        }\n    }\n    /** Set the associated note. */\n    setNote(note) {\n        this.note = note;\n        this.setFont(note.getFont());\n        return this;\n    }\n    /** Render the parenthesis. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        this.renderText(ctx, start.x, start.y);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n//\n// Utilities for working with Web APIs.\n// See: https://developer.mozilla.org/en-US/docs/Web/API\nimport { globalObject } from './util';\n// eslint-disable-next-line\nexport function isHTMLCanvas(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLCanvasElement class,\n    (typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||\n        // OR it's pretending to be a <canvas> element. Good enough!\n        // Do not rely on .tagName, because node-canvas doesn't provide a tagName.\n        (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));\n}\n// eslint-disable-next-line\nexport function isHTMLDiv(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLDivElement class.\n    (typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||\n        // OR it's pretending to be a <div>. See: svgcontext.ts.\n        (typeof element.appendChild === 'function' && typeof element.style === 'object'));\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Font } from './font';\nimport { RenderContext } from './rendercontext';\nimport { globalObject, warn } from './util';\nimport { isHTMLCanvas } from './web';\n/**\n * A rendering context for the Canvas backend. This class serves as a proxy for the\n * underlying CanvasRenderingContext2D object, part of the browser's API.\n */\nexport class CanvasContext extends RenderContext {\n    static get WIDTH() {\n        return 600;\n    }\n    static get HEIGHT() {\n        return 400;\n    }\n    static get CANVAS_BROWSER_SIZE_LIMIT() {\n        return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n    }\n    /**\n     * Ensure that width and height do not exceed the browser limit.\n     * @returns array of [width, height] clamped to the browser limit.\n     */\n    static sanitizeCanvasDims(width, height) {\n        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n        if (Math.max(width, height) > limit) {\n            warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n            if (width > limit) {\n                width = limit;\n            }\n            if (height > limit) {\n                height = limit;\n            }\n        }\n        return [width, height];\n    }\n    constructor(context) {\n        super();\n        /** Height of one line of text (in pixels). */\n        this.textHeight = 0;\n        this.context2D = context;\n        this.curTransfrom = context.getTransform();\n        if (!context.canvas) {\n            this.canvas = {\n                width: CanvasContext.WIDTH,\n                height: CanvasContext.HEIGHT,\n            };\n        }\n        else {\n            this.canvas = context.canvas;\n        }\n    }\n    /**\n     * Set all pixels to transparent black rgba(0,0,0,0).\n     */\n    clear() {\n        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    // eslint-disable-next-line\n    openGroup(cls, id) {\n        // Containers not implemented.\n    }\n    closeGroup() {\n        // Containers not implemented.\n    }\n    openRotation(angleDegrees, x, y) {\n        this.curTransfrom = this.context2D.getTransform();\n        this.context2D.translate(x, y);\n        this.context2D.rotate((angleDegrees * Math.PI) / 180);\n        this.context2D.translate(-x, -y);\n    }\n    closeRotation() {\n        this.context2D.setTransform(this.curTransfrom);\n    }\n    // eslint-disable-next-line\n    add(child) {\n        // Containers not implemented.\n    }\n    setFillStyle(style) {\n        this.context2D.fillStyle = style;\n        return this;\n    }\n    /** CanvasContext ignores `setBackgroundFillStyle()`. */\n    // eslint-disable-next-line\n    setBackgroundFillStyle(style) {\n        // DO NOTHING\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.context2D.strokeStyle = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.context2D.shadowColor = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        // CanvasRenderingContext2D does not scale the shadow blur by the current\n        // transform, so we have to do it manually. We assume uniform scaling\n        // (though allow for rotation) because the blur can only be scaled\n        // uniformly anyway.\n        const t = this.context2D.getTransform();\n        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n        this.context2D.shadowBlur = scale * blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.context2D.lineWidth = width;\n        return this;\n    }\n    setLineCap(capType) {\n        this.context2D.lineCap = capType;\n        return this;\n    }\n    setLineDash(dash) {\n        this.context2D.setLineDash(dash);\n        return this;\n    }\n    scale(x, y) {\n        this.context2D.scale(x, y);\n        return this;\n    }\n    resize(width, height, devicePixelRatio) {\n        var _a;\n        const canvas = this.context2D.canvas;\n        const dpr = (_a = devicePixelRatio !== null && devicePixelRatio !== void 0 ? devicePixelRatio : globalObject().devicePixelRatio) !== null && _a !== void 0 ? _a : 1;\n        // Scale the canvas size by the device pixel ratio clamping to the maximum supported size.\n        [width, height] = CanvasContext.sanitizeCanvasDims(width * dpr, height * dpr);\n        // Divide back down by the pixel ratio and convert to integers.\n        width = (width / dpr) | 0;\n        height = (height / dpr) | 0;\n        canvas.width = width * dpr;\n        canvas.height = height * dpr;\n        // The canvas could be an instance of either HTMLCanvasElement or an OffscreenCanvas.\n        // Only HTMLCanvasElement has a style attribute.\n        if (isHTMLCanvas(canvas)) {\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n        }\n        return this.scale(dpr, dpr);\n    }\n    rect(x, y, width, height) {\n        this.context2D.rect(x, y, width, height);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        this.context2D.fillRect(x, y, width, height);\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    pointerRect(x, y, width, height) {\n        return this;\n    }\n    /**\n     * Set the pixels in a rectangular area to transparent black rgba(0,0,0,0).\n     */\n    clearRect(x, y, width, height) {\n        this.context2D.clearRect(x, y, width, height);\n        return this;\n    }\n    beginPath() {\n        this.context2D.beginPath();\n        return this;\n    }\n    moveTo(x, y) {\n        this.context2D.moveTo(x, y);\n        return this;\n    }\n    lineTo(x, y) {\n        this.context2D.lineTo(x, y);\n        return this;\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n        return this;\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n        return this;\n    }\n    fill() {\n        this.context2D.fill();\n        return this;\n    }\n    stroke() {\n        this.context2D.stroke();\n        return this;\n    }\n    closePath() {\n        this.context2D.closePath();\n        return this;\n    }\n    measureText(text) {\n        const metrics = this.context2D.measureText(text);\n        let y = 0;\n        let height = 0;\n        if (metrics.fontBoundingBoxAscent) {\n            y = -metrics.fontBoundingBoxAscent;\n            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\n        }\n        else {\n            y = -metrics.actualBoundingBoxAscent;\n            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\n        }\n        // Return x, y, width & height in the same manner as svg getBBox\n        return {\n            x: 0,\n            y: y,\n            width: metrics.width,\n            height: height,\n        };\n    }\n    fillText(text, x, y) {\n        this.context2D.fillText(text, x, y);\n        return this;\n    }\n    save() {\n        this.context2D.save();\n        return this;\n    }\n    restore() {\n        this.context2D.restore();\n        return this;\n    }\n    set fillStyle(style) {\n        this.context2D.fillStyle = style;\n    }\n    get fillStyle() {\n        return this.context2D.fillStyle;\n    }\n    set strokeStyle(style) {\n        this.context2D.strokeStyle = style;\n    }\n    get strokeStyle() {\n        return this.context2D.strokeStyle;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.context2D.font = Font.toCSSString(fontInfo);\n        this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.context2D.font;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Gregory Ristow (2015)\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SVGContext_instances, _SVGContext_getShadowStyle;\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Metrics } from './metrics';\nimport { RenderContext } from './rendercontext';\nimport { Tables } from './tables';\nimport { normalizeAngle, prefix, RuntimeError } from './util';\n/** For a particular element type (e.g., rect), we will not apply certain presentation attributes. */\nconst ATTRIBUTES_TO_IGNORE = {\n    path: {\n        x: true,\n        y: true,\n        width: true,\n        height: true,\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    rect: {\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    text: {\n        width: true,\n        height: true,\n    },\n};\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst TWO_PI = 2 * Math.PI;\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext extends RenderContext {\n    constructor(element) {\n        super();\n        _SVGContext_instances.add(this);\n        this.width = 0;\n        this.height = 0;\n        this.precision = 1;\n        this.backgroundFillStyle = 'white';\n        /** Formatted as CSS font shorthand (e.g., 'italic bold 12pt Arial') */\n        this.fontCSSString = '';\n        this.element = element;\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n        // Create a SVG element and add it to the container element.\n        const svg = this.create('svg');\n        svg.setAttribute('pointer-events', 'none');\n        this.element.appendChild(svg);\n        this.svg = svg;\n        this.parent = this.svg;\n        this.groups = [this.svg];\n        this.path = '';\n        this.pen = { x: NaN, y: NaN };\n        const defaultFontAttributes = {\n            'font-family': Metrics.get('fontFamily'),\n            'font-size': '10pt',\n            'font-weight': FontWeight.NORMAL,\n            'font-style': FontStyle.NORMAL,\n        };\n        this.state = Object.assign({ scaleX: 1, scaleY: 1 }, defaultFontAttributes);\n        this.attributes = Object.assign({ 'stroke-width': 1.0, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black', shadowBlur: 0, shadowColor: 'black' }, defaultFontAttributes);\n        this.groupAttributes = [];\n        this.applyAttributes(svg, this.attributes);\n        this.groupAttributes.push(Object.assign({}, this.attributes));\n        this.stateStack = [];\n    }\n    round(n) {\n        return Math.round(n * this.precision) / this.precision;\n    }\n    create(svgElementType) {\n        return document.createElementNS(SVG_NS, svgElementType);\n    }\n    // Allow grouping elements in containers for interactivity.\n    openGroup(cls, id) {\n        const group = this.create('g');\n        this.groups.push(group);\n        this.parent.appendChild(group);\n        this.parent = group;\n        if (cls)\n            group.setAttribute('class', prefix(cls));\n        if (id)\n            group.setAttribute('id', prefix(id));\n        this.applyAttributes(group, this.attributes);\n        this.groupAttributes.push(Object.assign(Object.assign({}, this.groupAttributes[this.groupAttributes.length - 1]), this.attributes));\n        return group;\n    }\n    closeGroup() {\n        this.groups.pop();\n        this.groupAttributes.pop();\n        this.parent = this.groups[this.groups.length - 1];\n    }\n    openRotation(angleDegrees, x, y) {\n        this.openGroup().setAttribute('transform', `translate(${x},${y}) rotate(${angleDegrees}) translate(-${x},-${y})`);\n    }\n    closeRotation() {\n        this.closeGroup();\n    }\n    add(elem) {\n        this.parent.appendChild(elem);\n    }\n    setFillStyle(style) {\n        this.attributes.fill = style;\n        return this;\n    }\n    /**\n     * Used to set the fill color for `clearRect()`. This allows us to simulate\n     * cutting a \"hole\" into the SVG drawing.\n     */\n    setBackgroundFillStyle(style) {\n        this.backgroundFillStyle = style;\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.attributes.stroke = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.attributes.shadowColor = color;\n        return this;\n    }\n    /**\n     * @param blur A non-negative float specifying the level of shadow blur, where 0\n     *             represents no blur and larger numbers represent increasingly more blur.\n     * @returns this\n     */\n    setShadowBlur(blur) {\n        this.attributes.shadowBlur = blur;\n        return this;\n    }\n    /**\n     * @param width\n     * @returns this\n     */\n    setLineWidth(width) {\n        this.attributes['stroke-width'] = width;\n        return this;\n    }\n    /**\n     * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n     * @returns this\n     *\n     * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n     */\n    setLineDash(lineDash) {\n        if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n            this.attributes['stroke-dasharray'] = lineDash.join(',');\n            return this;\n        }\n        else {\n            throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n        }\n    }\n    /**\n     * @param capType\n     * @returns this\n     */\n    setLineCap(capType) {\n        this.attributes['stroke-linecap'] = capType;\n        return this;\n    }\n    // ### Sizing & Scaling Methods:\n    // TODO (GCR): See note at scale() -- separate our internal\n    // conception of pixel-based width/height from the style.width\n    // and style.height properties eventually to allow users to\n    // apply responsive sizing attributes to the SVG.\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.element.style.width = width.toString();\n        this.svg.style.width = width.toString();\n        this.svg.style.height = height.toString();\n        const attributes = {\n            width,\n            height,\n        };\n        this.applyAttributes(this.svg, attributes);\n        this.scale(this.state.scaleX, this.state.scaleY);\n        return this;\n    }\n    scale(x, y) {\n        // uses viewBox to scale\n        // TODO (GCR): we may at some point want to distinguish the\n        // style.width / style.height properties that are applied to\n        // the SVG object from our internal conception of the SVG\n        // width/height.  This would allow us to create automatically\n        // scaling SVG's that filled their containers, for instance.\n        //\n        // As this isn't implemented in Canvas contexts,\n        // I've left as is for now, but in using the viewBox to\n        // handle internal scaling, am trying to make it possible\n        // for us to eventually move in that direction.\n        this.state.scaleX = this.state.scaleX ? this.state.scaleX * x : x;\n        this.state.scaleY = this.state.scaleY ? this.state.scaleY * y : y;\n        const visibleWidth = this.width / this.state.scaleX;\n        const visibleHeight = this.height / this.state.scaleY;\n        this.setViewBox(0, 0, visibleWidth, visibleHeight);\n        return this;\n    }\n    /**\n     * 1 arg: string in the \"x y w h\" format\n     * 4 args: x:number, y:number, w:number, h:number\n     */\n    setViewBox(viewBoxOrMinX, minY, width, height) {\n        if (typeof viewBoxOrMinX === 'string') {\n            this.svg.setAttribute('viewBox', viewBoxOrMinX);\n        }\n        else {\n            const viewBoxString = viewBoxOrMinX + ' ' + minY + ' ' + width + ' ' + height;\n            this.svg.setAttribute('viewBox', viewBoxString);\n        }\n    }\n    // ### Drawing helper methods:\n    applyAttributes(element, attributes) {\n        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\n        for (const attrName in attributes) {\n            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\n                continue;\n            }\n            if (attributes[attrName] &&\n                (this.groupAttributes.length === 0 ||\n                    attributes[attrName] != this.groupAttributes[this.groupAttributes.length - 1][attrName]))\n                element.setAttributeNS(null, attrName, attributes[attrName]);\n        }\n        return element;\n    }\n    // ### Shape & Path Methods:\n    clear() {\n        // Clear the SVG by removing all inner children.\n        // (This approach is usually slightly more efficient\n        // than removing the old SVG & adding a new one to\n        // the container element, since it does not cause the\n        // container to resize twice.  Also, the resize\n        // triggered by removing the entire SVG can trigger\n        // a touchcancel event when the element resizes away\n        // from a touch point.)\n        while (this.svg.lastChild) {\n            this.svg.removeChild(this.svg.lastChild);\n        }\n        // Replace the viewbox attribute we just removed.\n        this.scale(this.state.scaleX, this.state.scaleY);\n    }\n    // ## Rectangles:\n    rect(x, y, width, height, attributes) {\n        // Avoid invalid negative height attributes by flipping the rectangle on its head:\n        if (height < 0) {\n            y += height;\n            height *= -1;\n        }\n        const rectangle = this.create('rect');\n        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.attributes['stroke-width'], stroke: 'black' };\n        x = this.round(x);\n        y = this.round(y);\n        width = this.round(width);\n        height = this.round(height);\n        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));\n        this.add(rectangle);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        const attributes = { fill: this.attributes.fill, stroke: 'none' };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    pointerRect(x, y, width, height) {\n        const attributes = { opacity: '0', 'pointer-events': 'auto' };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        // Currently this fills a rect with the backgroundFillStyle, rather\n        // than \"cut a hole\" into the existing shapes.\n        //\n        // Since tabNote seems to be the only module that makes use of this\n        // it may be worth creating a separate tabStave that would\n        // draw lines around locations of tablature fingering.\n        this.rect(x, y, width, height, { fill: this.backgroundFillStyle, stroke: 'none' });\n        return this;\n    }\n    // ## Paths:\n    beginPath() {\n        this.path = '';\n        this.pen.x = NaN;\n        this.pen.y = NaN;\n        return this;\n    }\n    moveTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'M' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    lineTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'L' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    bezierCurveTo(x1, y1, x2, y2, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        x2 = this.round(x2);\n        y2 = this.round(y2);\n        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    quadraticCurveTo(x1, y1, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        let x0 = x + radius * Math.cos(startAngle);\n        let y0 = y + radius * Math.sin(startAngle);\n        x0 = this.round(x0);\n        y0 = this.round(y0);\n        // svg behavior different from canvas.  Don't normalize angles if\n        // we are drawing a circle because they both normalize to 0\n        const tmpStartTest = normalizeAngle(startAngle);\n        const tmpEndTest = normalizeAngle(endAngle);\n        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n            (counterclockwise && startAngle - endAngle >= TWO_PI) ||\n            tmpStartTest === tmpEndTest) {\n            let x1 = x + radius * Math.cos(startAngle + Math.PI);\n            let y1 = y + radius * Math.sin(startAngle + Math.PI);\n            // There's no way to specify a completely circular arc in SVG so we have to\n            // use two semi-circular arcs.\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n            this.pen.x = x0;\n            this.pen.y = y0;\n        }\n        else {\n            let x1 = x + radius * Math.cos(endAngle);\n            let y1 = y + radius * Math.sin(endAngle);\n            startAngle = tmpStartTest;\n            endAngle = tmpEndTest;\n            let large;\n            if (Math.abs(endAngle - startAngle) < Math.PI) {\n                large = counterclockwise;\n            }\n            else {\n                large = !counterclockwise;\n            }\n            if (startAngle > endAngle) {\n                large = !large;\n            }\n            const sweep = !counterclockwise;\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n            this.pen.x = x1;\n            this.pen.y = y1;\n        }\n        return this;\n    }\n    closePath() {\n        this.path += 'Z';\n        return this;\n    }\n    fill(attributes) {\n        const path = this.create('path');\n        if (typeof attributes === 'undefined') {\n            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });\n        }\n        attributes.d = this.path;\n        if (this.attributes.shadowBlur > 0) {\n            attributes.style = __classPrivateFieldGet(this, _SVGContext_instances, \"m\", _SVGContext_getShadowStyle).call(this);\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    stroke() {\n        const path = this.create('path');\n        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', d: this.path });\n        if (this.attributes.shadowBlur > 0) {\n            attributes.style = __classPrivateFieldGet(this, _SVGContext_instances, \"m\", _SVGContext_getShadowStyle).call(this);\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    // ## Text Methods:\n    measureText(text) {\n        SVGContext.measureTextElement.setText(text);\n        SVGContext.measureTextElement.setFont(this.attributes['font-family'], this.attributes['font-size'], this.attributes['font-weight'], this.attributes['font-style']);\n        const bb = SVGContext.measureTextElement.getBoundingBox();\n        return { x: bb.x, y: bb.y, width: bb.w, height: bb.h };\n    }\n    fillText(text, x, y) {\n        if (!text || text.length <= 0) {\n            return this;\n        }\n        x = this.round(x);\n        y = this.round(y);\n        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,\n            y });\n        const txt = this.create('text');\n        txt.textContent = text;\n        this.applyAttributes(txt, attributes);\n        this.add(txt);\n        return this;\n    }\n    save() {\n        this.stateStack.push({\n            state: structuredClone(this.state),\n            attributes: structuredClone(this.attributes),\n        });\n        return this;\n    }\n    restore() {\n        const savedState = this.stateStack.pop();\n        if (savedState) {\n            const state = savedState;\n            this.state = structuredClone(state.state);\n            this.attributes = structuredClone(state.attributes);\n        }\n        return this;\n    }\n    set fillStyle(style) {\n        this.setFillStyle(style);\n    }\n    get fillStyle() {\n        return this.attributes.fill;\n    }\n    set strokeStyle(style) {\n        this.setStrokeStyle(style);\n    }\n    get strokeStyle() {\n        return this.attributes.stroke;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900). It is inserted\n     *               into the font-weight attribute (e.g., font-weight=\"bold\")\n     * @param style is a string (e.g., 'italic', 'normal') that is inserted into the\n     *              font-style attribute (e.g., font-style=\"italic\")\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.fontCSSString = Font.toCSSString(fontInfo);\n        const fontAttributes = {\n            'font-family': fontInfo.family,\n            'font-size': fontInfo.size,\n            'font-weight': fontInfo.weight,\n            'font-style': fontInfo.style,\n        };\n        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\n        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.fontCSSString;\n    }\n}\n_SVGContext_instances = new WeakSet(), _SVGContext_getShadowStyle = function _SVGContext_getShadowStyle() {\n    // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\n    // of the same radius, so we scale the drop-shadow radius here to make it\n    // look close to the canvas shadow.\n    return `filter: drop-shadow(0 0 ${this.attributes.shadowBlur / 1.5}px ${this.attributes.shadowColor})`;\n};\nSVGContext.measureTextElement = new Element();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { CanvasContext } from './canvascontext';\nimport { SVGContext } from './svgcontext';\nimport { isRenderContext } from './typeguard';\nimport { RuntimeError } from './util';\nimport { isHTMLCanvas, isHTMLDiv } from './web';\nexport var RendererBackends;\n(function (RendererBackends) {\n    RendererBackends[RendererBackends[\"CANVAS\"] = 1] = \"CANVAS\";\n    RendererBackends[RendererBackends[\"SVG\"] = 2] = \"SVG\";\n})(RendererBackends || (RendererBackends = {}));\n// End of line types\nexport var RendererLineEndType;\n(function (RendererLineEndType) {\n    RendererLineEndType[RendererLineEndType[\"NONE\"] = 1] = \"NONE\";\n    RendererLineEndType[RendererLineEndType[\"UP\"] = 2] = \"UP\";\n    RendererLineEndType[RendererLineEndType[\"DOWN\"] = 3] = \"DOWN\";\n})(RendererLineEndType || (RendererLineEndType = {}));\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n    static buildContext(elementId, backend, width, height, background = '#FFF') {\n        const renderer = new Renderer(elementId, backend);\n        if (width && height) {\n            renderer.resize(width, height);\n        }\n        const ctx = renderer.getContext();\n        ctx.setBackgroundFillStyle(background);\n        Renderer.lastContext = ctx;\n        return ctx;\n    }\n    static getCanvasContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n    }\n    static getSVGContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n    }\n    // Draw a dashed line (horizontal, vertical or diagonal\n    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n    // setting the second number to 0 draws a solid line.\n    static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n        context.beginPath();\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        let x = fromX;\n        let y = fromY;\n        context.moveTo(fromX, fromY);\n        let idx = 0;\n        let draw = true;\n        while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n            const dashLength = dashPattern[idx++ % dashPattern.length];\n            const nx = x + Math.cos(angle) * dashLength;\n            x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n            const ny = y + Math.sin(angle) * dashLength;\n            y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n            if (draw) {\n                context.lineTo(x, y);\n            }\n            else {\n                context.moveTo(x, y);\n            }\n            draw = !draw;\n        }\n        context.closePath();\n        context.stroke();\n    }\n    constructor(arg0, arg1) {\n        if (isRenderContext(arg0)) {\n            // The user has provided what looks like a RenderContext, let's just use it.\n            this.ctx = arg0;\n        }\n        else {\n            if (arg1 === undefined) {\n                // The backend must be specified if the render context isn't directly provided.\n                throw new RuntimeError('InvalidArgument', 'Missing backend argument');\n            }\n            const backend = arg1;\n            let element;\n            if (typeof arg0 === 'string') {\n                const maybeElement = document.getElementById(arg0);\n                if (!maybeElement) {\n                    throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\n                }\n                element = maybeElement;\n            }\n            else {\n                element = arg0;\n            }\n            // Verify backend and create context\n            if (backend === Renderer.Backends.CANVAS) {\n                if (!isHTMLCanvas(element)) {\n                    throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');\n                }\n                const context = element.getContext('2d', { willReadFrequently: true });\n                if (!context) {\n                    throw new RuntimeError('BadElement', \"Can't get canvas context\");\n                }\n                this.ctx = new CanvasContext(context);\n            }\n            else if (backend === Renderer.Backends.SVG) {\n                if (!isHTMLDiv(element)) {\n                    throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\n                }\n                this.ctx = new SVGContext(element);\n            }\n            else {\n                throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\n            }\n        }\n    }\n    resize(width, height) {\n        this.ctx.resize(width, height);\n        return this;\n    }\n    getContext() {\n        return this.ctx;\n    }\n}\nRenderer.Backends = RendererBackends;\nRenderer.LineEndType = RendererLineEndType;\n// Used by vexflow_test_helpers.ts\n// Should this be private?\n// Can we do this in a cleaner way?\nRenderer.lastContext = undefined;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns\n//\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Renderer } from './renderer';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStaveNote, isStemmableNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StringNumber extends Modifier {\n    static get CATEGORY() {\n        return Category.StringNumber;\n    }\n    // ## Static Methods\n    // Arrange string numbers inside a `ModifierContext`\n    static format(nums, state) {\n        /**\n         * The modifier context's leftShift state.\n         */\n        const leftShift = state.leftShift;\n        /**\n         * The modifier context's rightShift state.\n         */\n        const rightShift = state.rightShift;\n        const numSpacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const numsList = [];\n        let prevNote = null;\n        let extraXSpaceForDisplacedNotehead = 0;\n        let shiftRight = 0;\n        const modLines = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            if (!isStaveNote(note)) {\n                throw new RuntimeError('NoStaveNote');\n            }\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const mc = note.getModifierContext();\n            const verticalSpaceNeeded = (num.radius * 2) / Tables.STAVE_LINE_DISTANCE + 0.5;\n            if (mc) {\n                if (pos === ModifierPosition.ABOVE) {\n                    num.textLine = mc.getState().topTextLine;\n                    state.topTextLine += verticalSpaceNeeded;\n                }\n                else if (pos === ModifierPosition.BELOW) {\n                    num.textLine = mc.getState().textLine;\n                    state.textLine += verticalSpaceNeeded;\n                }\n            }\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (pos === Modifier.Position.LEFT) {\n                        extraXSpaceForDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx(), extraXSpaceForDisplacedNotehead);\n                    }\n                    if (rightShift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prevNote = note;\n            }\n            const glyphLine = modLines === 0 ? props.line : modLines;\n            numsList.push({\n                pos,\n                note,\n                num,\n                line: glyphLine,\n                shiftL: extraXSpaceForDisplacedNotehead,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort string numbers by line number.\n        numsList.sort((a, b) => b.line - a.line);\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < numsList.length; ++i) {\n            const note = numsList[i].note;\n            const pos = numsList[i].pos;\n            const num = numsList[i].num;\n            const line = numsList[i].line;\n            const shiftR = numsList[i].shiftR;\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftR = rightShift + shiftR;\n            }\n            const numWidth = num.getWidth() + numSpacing;\n            let numXShift = 0;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(leftShift + extraXSpaceForDisplacedNotehead);\n                numXShift = numWidth; // spacing\n                xWidthL = Math.max(numXShift, xWidthL);\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                numXShift += numWidth; // spacing\n                xWidthR = numXShift > xWidthR ? numXShift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    constructor(number) {\n        super();\n        this.stringNumber = number;\n        this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n        this.xShift = 0;\n        this.yShift = 0;\n        this.textLine = 0;\n        this.stemOffset = 0;\n        this.xOffset = 0; // Horizontal offset from default\n        this.yOffset = 0; // Vertical offset from default\n        this.dashed = true; // true - draw dashed extension  false - no extension\n        this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n        this.radius = 8;\n        this.drawCircle = true;\n        this.setWidth(this.radius * 2 + 4);\n    }\n    setLineEndType(leg) {\n        if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n            this.leg = leg;\n        }\n        return this;\n    }\n    setStringNumber(number) {\n        this.stringNumber = number;\n        return this;\n    }\n    setOffsetX(x) {\n        this.xOffset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.yOffset = y;\n        return this;\n    }\n    setLastNote(note) {\n        this.lastNote = note;\n        return this;\n    }\n    setDashed(dashed) {\n        this.dashed = dashed;\n        return this;\n    }\n    setDrawCircle(drawCircle) {\n        this.drawCircle = drawCircle;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        let dotX = start.x + this.xShift + this.xOffset;\n        let stemExt = {};\n        if (note.hasStem()) {\n            stemExt = note.checkStem().getExtents();\n        }\n        let dotY = start.y + this.yShift + this.yOffset;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                {\n                    const ys = note.getYs();\n                    dotY = ys.reduce((a, b) => (a < b ? a : b));\n                    if (note.hasStem() && stemDirection === Stem.UP) {\n                        dotY = stemExt.topY + Metrics.get('StringNumber.stemPadding');\n                    }\n                    dotY -=\n                        this.radius + Metrics.get('StringNumber.verticalPadding') + this.textLine * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.BELOW:\n                {\n                    const ys = note.getYs();\n                    dotY = ys.reduce((a, b) => (a > b ? a : b));\n                    if (note.hasStem() && stemDirection === Stem.DOWN) {\n                        dotY = stemExt.topY - Metrics.get('StringNumber.stemPadding');\n                    }\n                    dotY +=\n                        this.radius + Metrics.get('StringNumber.verticalPadding') + this.textLine * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.LEFT:\n                dotX -= this.radius / 2 + Metrics.get('StringNumber.leftPadding');\n                break;\n            case Modifier.Position.RIGHT:\n                dotX += this.radius / 2 + Metrics.get('StringNumber.rightPadding');\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n        }\n        ctx.save();\n        if (this.drawCircle) {\n            ctx.beginPath();\n            ctx.arc(dotX, dotY, this.radius, 0, Math.PI * 2, false);\n            ctx.setLineWidth(1.5);\n            ctx.stroke();\n        }\n        ctx.setFont(this.fontInfo);\n        const x = dotX - ctx.measureText(this.stringNumber).width / 2;\n        ctx.fillText('' + this.stringNumber, x, dotY + 4.5);\n        const lastNote = this.lastNote;\n        if (isStemmableNote(lastNote)) {\n            // Only StemmableNote objects have getStemX().\n            const end = lastNote.getStemX() - note.getX() + 5;\n            ctx.setStrokeStyle('#000000');\n            ctx.setLineCap('round');\n            ctx.setLineWidth(0.6);\n            if (this.dashed) {\n                Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 3]);\n            }\n            else {\n                Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 0]);\n            }\n            let len;\n            let pattern;\n            switch (this.leg) {\n                case Renderer.LineEndType.UP:\n                    len = -10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);\n                    break;\n                case Renderer.LineEndType.DOWN:\n                    len = 10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);\n                    break;\n                default:\n                    break;\n            }\n        }\n        ctx.restore();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns\n//\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasgueado, etc.\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Category, isNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Stroke extends Modifier {\n    static get CATEGORY() {\n        return Category.Stroke;\n    }\n    // Arrange strokes inside `ModifierContext`\n    static format(strokes, state) {\n        const leftShift = state.leftShift;\n        const strokeSpacing = 5;\n        if (!strokes || strokes.length === 0)\n            return false;\n        const strokeList = strokes.map((stroke) => {\n            const note = stroke.getNote();\n            const index = stroke.checkIndex();\n            if (isStaveNote(note)) {\n                // Only StaveNote objects have getKeyProps().\n                const { line } = note.getKeyProps()[index];\n                const shift = note.getLeftDisplacedHeadPx();\n                return { line, shift, stroke };\n            }\n            else if (isTabNote(note)) {\n                // Only TabNote objects have getPositions().\n                const { str: string } = note.getPositions()[index];\n                return { line: string, shift: 0, stroke };\n            }\n            else {\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n        });\n        const strokeShift = leftShift;\n        // There can only be one stroke .. if more than one, they overlay each other\n        const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n            stroke.setXShift(strokeShift + shift);\n            return Math.max(stroke.getWidth() + strokeSpacing, xShift);\n        }, 0);\n        state.leftShift += xShift;\n        return true;\n    }\n    constructor(type, options) {\n        super();\n        this.options = Object.assign({ allVoices: true }, options);\n        // multi voice - span stroke across all voices if true\n        this.allVoices = this.options.allVoices;\n        // multi voice - end note of stroke, set in draw()\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.renderOptions = {\n            fontScale: Metrics.get('Stroke.fontSize'),\n        };\n        this.setXShift(0);\n        this.setWidth(10);\n    }\n    getPosition() {\n        return this.position;\n    }\n    addEndNote(note) {\n        this.noteEnd = note;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let yPositions = note.getYs();\n        let topY = start.y;\n        let botY = start.y;\n        const x = start.x - 5;\n        const lineSpace = note.checkStave().getSpacingBetweenLines();\n        const notes = this.checkModifierContext().getMembers(note.getCategory());\n        for (let i = 0; i < notes.length; i++) {\n            const note = notes[i];\n            if (isNote(note)) {\n                // Only Note objects have getYs().\n                // note is an instance of either StaveNote or TabNote.\n                yPositions = note.getYs();\n                for (let n = 0; n < yPositions.length; n++) {\n                    if (this.note === notes[i] || this.allVoices) {\n                        topY = Math.min(topY, yPositions[n]);\n                        botY = Math.max(botY, yPositions[n]);\n                    }\n                }\n            }\n        }\n        let arrow = '';\n        let arrowY = 0;\n        let textY = 0;\n        switch (this.type) {\n            case Stroke.Type.BRUSH_DOWN:\n            case Stroke.Type.ROLL_DOWN:\n            case Stroke.Type.RASGUEADO_DOWN:\n                arrow = Glyphs.arrowheadBlackUp;\n                arrowY = topY;\n                topY -= lineSpace / 2;\n                botY += lineSpace / 2;\n                break;\n            case Stroke.Type.BRUSH_UP:\n            case Stroke.Type.ROLL_UP:\n            case Stroke.Type.RASGUEADO_UP:\n                arrow = Glyphs.arrowheadBlackDown;\n                arrowY = botY + lineSpace;\n                topY -= lineSpace / 2;\n                break;\n            case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n                topY -= lineSpace / 2;\n                botY += lineSpace / 2;\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n        }\n        // Draw the stroke\n        if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n            ctx.fillRect(x + this.xShift, topY, 1, botY - topY);\n        }\n        else {\n            // Select the wiggle glyph depending on the arrow direction\n            const lineGlyph = arrow === Glyphs.arrowheadBlackDown ? Glyphs.wiggleArpeggiatoDown : Glyphs.wiggleArpeggiatoUp;\n            let txt = '';\n            const el = new Element();\n            // add glyphs until the required length is achieved\n            while (el.getWidth() < botY - topY) {\n                txt += lineGlyph;\n                el.setText(txt);\n            }\n            if (this.type === Stroke.Type.RASGUEADO_DOWN ||\n                this.type === Stroke.Type.ROLL_DOWN ||\n                this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n                ctx.openRotation(90, x + this.xShift, topY);\n                el.renderText(ctx, x + this.xShift, topY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);\n                ctx.closeRotation();\n                textY = topY + el.getWidth() + 5;\n            }\n            else {\n                ctx.openRotation(-90, x + this.xShift, botY);\n                el.renderText(ctx, x + this.xShift, botY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);\n                ctx.closeRotation();\n                textY = botY - el.getWidth() - 5;\n            }\n        }\n        // Draw the arrow head\n        if (arrowY !== 0) {\n            const el = new Element();\n            el.setText(arrow);\n            el.renderText(ctx, \n            // Center the arrow head substracting its width / 2\n            x + this.xShift - el.getWidth() / 2, arrowY);\n        }\n        // Draw the rasgueado \"R\"\n        if (this.type === Stroke.Type.RASGUEADO_DOWN || this.type === Stroke.Type.RASGUEADO_UP) {\n            const el = new Element('Stroke.text');\n            el.setText('R');\n            el.renderText(ctx, x + this.xShift - el.getWidth() / 2, textY + (this.type === Stroke.Type.RASGUEADO_DOWN ? el.getHeight() : 0));\n        }\n    }\n}\nStroke.Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3, // Arpeggiated chord\n    ROLL_UP: 4, // Arpeggiated chord\n    RASGUEADO_DOWN: 5,\n    RASGUEADO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Bend } from './bend';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n    static get CATEGORY() {\n        return Category.Vibrato;\n    }\n    /** Arrange vibratos inside a `ModifierContext`. */\n    static format(vibratos, state, context) {\n        if (!vibratos || vibratos.length === 0)\n            return false;\n        // Vibratos are always on top.\n        let textLine = state.topTextLine;\n        let width = 0;\n        let shift = state.rightShift - 7;\n        // If there's a bend, drop the text line\n        const bends = context.getMembers(Bend.CATEGORY);\n        if (bends && bends.length > 0) {\n            const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / Tables.STAVE_LINE_DISTANCE;\n            textLine = textLine - (bendHeight + 1);\n        }\n        else {\n            state.topTextLine += 1;\n        }\n        // Format Vibratos\n        for (let i = 0; i < vibratos.length; ++i) {\n            const vibrato = vibratos[i];\n            vibrato.setXShift(shift);\n            vibrato.setTextLine(textLine);\n            width += vibrato.getWidth();\n            shift += width;\n        }\n        state.rightShift += width;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.renderOptions = {\n            code: 0xeab0,\n            width: 20,\n        };\n        this.setVibratoWidth(this.renderOptions.width);\n    }\n    /** Set vibrato width in pixels. */\n    setVibratoWidth(width) {\n        this.renderOptions.width = width;\n        this.text = String.fromCodePoint(this.renderOptions.code);\n        const items = Math.round(this.renderOptions.width / this.getWidth());\n        for (let i = 1; i < items; i++) {\n            this.text += String.fromCodePoint(this.renderOptions.code);\n        }\n        return this;\n    }\n    /** Set vibrato code. */\n    setVibratoCode(code) {\n        this.renderOptions.code = code;\n        return this.setVibratoWidth(this.renderOptions.width);\n    }\n    /** Draw the vibrato on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        const vx = start.x;\n        const vy = note.getYForTopText(this.textLine) + 5;\n        this.renderText(ctx, vx, vy);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.).  The ModifierContext works with tickables\n// that are at the same tick to ensure that they and their modifiers\n// all have proper alignment.  (Note that the ModifierContext also\n// runs the spacing of the tickable).\n//\n// see https://github.com/0xfe/vexflow/wiki/How-Formatting-Works\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Bend } from './bend';\nimport { ChordSymbol } from './chordsymbol';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { StaveNote } from './stavenote';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\nimport { Vibrato } from './vibrato';\n// To enable logging for this class. Set `VexFlow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ModifierContext.DEBUG)\n        log('VexFlow.ModifierContext', args);\n}\nexport class ModifierContext {\n    constructor() {\n        // Formatting data.\n        this.state = {\n            leftShift: 0,\n            rightShift: 0,\n            textLine: 0,\n            topTextLine: 0,\n        };\n        // Current members -- a mapping of Category (string) to a list of Tickables, Modifiers,\n        // StaveNotes, TabNotes, etc.\n        this.members = {};\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.formatted = false;\n        this.width = 0;\n        this.spacing = 0;\n    }\n    addModifier(member) {\n        L('addModifier is deprecated, use addMember instead.');\n        return this.addMember(member);\n    }\n    /**\n     * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\n     * Here we add a new member to this.members, and create a new array if needed.\n     * @param member\n     * @returns this\n     */\n    addMember(member) {\n        const category = member.getCategory();\n        if (!this.members[category]) {\n            this.members[category] = [];\n        }\n        this.members[category].push(member);\n        member.setModifierContext(this);\n        this.preFormatted = false;\n        return this;\n    }\n    /**\n     * @deprecated\n     */\n    getModifiers(category) {\n        L('getModifiers is deprecated, use getMembers instead.');\n        return this.getMembers(category);\n    }\n    getMembers(category) {\n        var _a;\n        return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Get the width of the entire\n     */\n    getWidth() {\n        return this.width;\n    }\n    getLeftShift() {\n        return this.state.leftShift;\n    }\n    getRightShift() {\n        return this.state.rightShift;\n    }\n    getState() {\n        return this.state;\n    }\n    getMetrics() {\n        if (!this.formatted) {\n            throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n        }\n        return {\n            width: this.state.leftShift + this.state.rightShift + this.spacing,\n            spacing: this.spacing,\n        };\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        L('Preformatting ModifierContext');\n        const state = this.state;\n        const members = this.members;\n        // The ordering below determines when different members are formatted and rendered.\n        StaveNote.format(members[Category.StaveNote], state);\n        Parenthesis.format(members[Category.Parenthesis], state);\n        Dot.format(members[Category.Dot], state);\n        FretHandFinger.format(members[Category.FretHandFinger], state);\n        Accidental.format(members[Category.Accidental], state);\n        Stroke.format(members[Category.Stroke], state);\n        GraceNoteGroup.format(members[Category.GraceNoteGroup], state);\n        NoteSubGroup.format(members[Category.NoteSubGroup], state);\n        StringNumber.format(members[Category.StringNumber], state);\n        Articulation.format(members[Category.Articulation], state);\n        Ornament.format(members[Category.Ornament], state);\n        Annotation.format(members[Category.Annotation], state);\n        ChordSymbol.format(members[Category.ChordSymbol], state);\n        Bend.format(members[Category.Bend], state);\n        Vibrato.format(members[Category.Vibrato], state, this);\n        // Update width of this member context\n        this.width = state.leftShift + state.rightShift;\n        this.preFormatted = true;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        L('Postformatting ModifierContext');\n        // If post-formatting is required for an element, add more lines below.\n        StaveNote.postFormat(this.getMembers(Category.StaveNote));\n    }\n}\nModifierContext.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// Co-author: Benjamin W. Bohl\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Clef.DEBUG)\n        log('VexFlow.Clef', args);\n}\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Clef;\n    }\n    /**\n     * Every clef name is associated with a glyph code from the font file\n     * and a default stave line number.\n     */\n    static get types() {\n        const { gClef, fClef, cClef, unpitchedPercussionClef1, sixStringTabClef } = Glyphs;\n        return {\n            treble: {\n                code: gClef,\n                line: 3,\n            },\n            bass: {\n                code: fClef,\n                line: 1,\n            },\n            alto: {\n                code: cClef,\n                line: 2,\n            },\n            tenor: {\n                code: cClef,\n                line: 1,\n            },\n            percussion: {\n                code: unpitchedPercussionClef1,\n                line: 2,\n            },\n            soprano: {\n                code: cClef,\n                line: 4,\n            },\n            'mezzo-soprano': {\n                code: cClef,\n                line: 3,\n            },\n            'baritone-c': {\n                code: cClef,\n                line: 0,\n            },\n            'baritone-f': {\n                code: fClef,\n                line: 2,\n            },\n            subbass: {\n                code: fClef,\n                line: 0,\n            },\n            french: {\n                code: gClef,\n                line: 4,\n            },\n            tab: {\n                code: sixStringTabClef,\n                line: 2.5,\n            },\n        };\n    }\n    /** Create a new clef. */\n    constructor(type, size, annotation) {\n        super();\n        /**\n         * The attribute `clef` must be a key from\n         * `Clef.types`\n         */\n        this.code = Clef.types['treble'].code;\n        this.line = Clef.types['treble'].line;\n        this.size = 'default';\n        this.type = 'treble';\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type, size, annotation);\n        L('Creating clef:', type);\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size = 'default', annotation) {\n        this.type = type;\n        this.code = Clef.types[type].code;\n        this.line = Clef.types[type].line;\n        this.size = size !== null && size !== void 0 ? size : 'default';\n        // If an annotation, such as 8va, is specified, add it to the Clef object.\n        if (annotation === '8va') {\n            if (this.code === Glyphs.gClef) {\n                this.code = Glyphs.gClef8va;\n            }\n            if (this.code === Glyphs.fClef) {\n                this.code = Glyphs.fClef8va;\n            }\n        }\n        if (annotation === '8vb') {\n            if (this.code === Glyphs.gClef) {\n                this.code = Glyphs.gClef8vb;\n            }\n            if (this.code === Glyphs.fClef) {\n                this.code = Glyphs.fClef8vb;\n            }\n        }\n        this.text = this.code;\n        this.fontInfo.size = Math.floor(Clef.getPoint(this.size));\n        return this;\n    }\n    /** Get point for clefs. */\n    static getPoint(size) {\n        // for sizes other than 'default', clef is 2/3 of the default value\n        return size === 'default' ? Metrics.get('fontSize') : (Metrics.get('fontSize') * 2) / 3;\n    }\n    /** Set associated stave. */\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    /** Render clef. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('clef', this.getAttribute('id'));\n        this.y = stave.getYForLine(this.line);\n        this.renderText(ctx, 0, 0);\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n/** To enable logging for this class, set `VexFlow.Clef.DEBUG` to `true`. */\nClef.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\nimport { Element } from './element';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport class KeySignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.KeySignature;\n    }\n    // Create a new Key Signature based on a `keySpec`\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super();\n        this.accList = [];\n        this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.glyphs = [];\n        this.paddingForced = false;\n    }\n    // Add an accidental glyph to the `KeySignature` instance which represents\n    // the provided `acc`. If `nextAcc` is also provided, the appropriate\n    // spacing will be included in the glyph's position\n    convertToGlyph(acc, nextAcc, stave) {\n        const code = Tables.accidentalCodes(acc.type);\n        const glyph = new Element(Category.KeySignature);\n        glyph.setText(code);\n        // Determine spacing between current accidental and the next accidental\n        const extraWidth = 1;\n        // Place the glyph on the stave\n        glyph.setYShift(stave.getYForLine(acc.line));\n        if (this.glyphs.length > 0) {\n            const prevGlyph = this.glyphs[this.glyphs.length - 1];\n            glyph.setXShift(prevGlyph.getXShift() + prevGlyph.getWidth() + extraWidth);\n        }\n        this.glyphs.push(glyph);\n        // Expand size of key signature\n        this.width += glyph.getWidth() + extraWidth;\n    }\n    // Cancel out a key signature provided in the `spec` parameter. This will\n    // place appropriate natural accidentals before the key signature.\n    cancelKey(spec) {\n        this.formatted = false;\n        this.cancelKeySpec = spec;\n        return this;\n    }\n    convertToCancelAccList(spec) {\n        // Get the accidental list for the cancelled key signature\n        const cancelAccList = Tables.keySignature(spec);\n        // If the cancelled key has a different accidental type, ie: # vs b\n        const differentTypes = this.accList.length > 0 && cancelAccList.length > 0 && cancelAccList[0].type !== this.accList[0].type;\n        // Determine how many naturals needed to add\n        const naturals = differentTypes ? cancelAccList.length : cancelAccList.length - this.accList.length;\n        // Return if no naturals needed\n        if (naturals < 1)\n            return undefined;\n        // Get the line position for each natural\n        const cancelled = [];\n        for (let i = 0; i < naturals; i++) {\n            let index = i;\n            if (!differentTypes) {\n                index = cancelAccList.length - naturals + i;\n            }\n            const acc = cancelAccList[index];\n            cancelled.push({ type: 'n', line: acc.line });\n        }\n        // Combine naturals with main accidental list for the key signature\n        this.accList = cancelled.concat(this.accList);\n        return {\n            accList: cancelled,\n            type: cancelAccList[0].type,\n        };\n    }\n    addToStave(stave) {\n        this.paddingForced = true;\n        stave.addModifier(this);\n        return this;\n    }\n    // Apply the accidental staff line placement based on the `clef` and\n    // the  accidental `type` for the key signature ('# or 'b').\n    convertAccLines(clef, type, accList = this.accList) {\n        let offset = 0.0; // if clef === \"treble\"\n        let customLines; // when clef doesn't follow treble key sig shape\n        switch (clef) {\n            // Treble & Subbass both have offsets of 0, so are not included.\n            case 'soprano':\n                if (type === '#')\n                    customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n                else\n                    offset = -1;\n                break;\n            case 'mezzo-soprano':\n                if (type === 'b')\n                    customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n                else\n                    offset = 1.5;\n                break;\n            case 'alto':\n                offset = 0.5;\n                break;\n            case 'tenor':\n                if (type === '#')\n                    customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n                else\n                    offset = -0.5;\n                break;\n            case 'baritone-f':\n            case 'baritone-c':\n                if (type === 'b')\n                    customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n                else\n                    offset = 2;\n                break;\n            case 'bass':\n            case 'french':\n                offset = 1;\n                break;\n            default:\n                break;\n        }\n        // If there's a special case, assign those lines/spaces:\n        let i;\n        if (typeof customLines !== 'undefined') {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line = customLines[i];\n            }\n        }\n        else if (offset !== 0) {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line += offset;\n            }\n        }\n    }\n    getPadding(index) {\n        if (!this.formatted)\n            this.format();\n        return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n    }\n    getWidth() {\n        if (!this.formatted)\n            this.calculateWidth();\n        return this.width;\n    }\n    setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n        this.formatted = false;\n        this.keySpec = keySpec;\n        this.cancelKeySpec = cancelKeySpec;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    // Alter the accidentals of a key spec one by one.\n    // Each alteration is a new accidental that replaces the\n    // original accidental (or the canceled one).\n    alterKey(alterKeySpec) {\n        this.formatted = false;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    convertToAlterAccList(alterKeySpec) {\n        const max = Math.min(alterKeySpec.length, this.accList.length);\n        for (let i = 0; i < max; ++i) {\n            if (alterKeySpec[i]) {\n                this.accList[i].type = alterKeySpec[i];\n            }\n        }\n    }\n    format() {\n        const stave = this.checkStave();\n        this.width = 0;\n        this.glyphs = [];\n        this.accList = Tables.keySignature(defined(this.keySpec));\n        const accList = this.accList;\n        const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n        let cancelAccList;\n        if (this.cancelKeySpec) {\n            cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n        }\n        if (this.alterKeySpec) {\n            this.convertToAlterAccList(this.alterKeySpec);\n        }\n        if (this.accList.length > 0) {\n            const clef = (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n            if (cancelAccList) {\n                this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n            }\n            this.convertAccLines(clef, firstAccidentalType, accList);\n            for (let i = 0; i < this.accList.length; ++i) {\n                this.convertToGlyph(this.accList[i], this.accList[i + 1], stave);\n            }\n        }\n        this.formatted = true;\n    }\n    calculateWidth() {\n        this.width = 0;\n        this.accList = Tables.keySignature(defined(this.keySpec));\n        if (this.cancelKeySpec) {\n            this.convertToCancelAccList(this.cancelKeySpec);\n        }\n        if (this.alterKeySpec) {\n            this.convertToAlterAccList(this.alterKeySpec);\n        }\n        if (this.accList.length > 0) {\n            for (let i = 0; i < this.accList.length; ++i) {\n                const code = Tables.accidentalCodes(this.accList[i].type);\n                const glyph = new Element(Category.KeySignature);\n                glyph.setText(code);\n                // Determine spacing between current accidental and the next accidental\n                const extraWidth = 1;\n                // Expand size of key signature\n                this.width += glyph.getWidth() + extraWidth;\n            }\n        }\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        if (!this.formatted)\n            this.format();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('keysignature', this.getAttribute('id'));\n        for (let i = 0; i < this.glyphs.length; i++) {\n            const glyph = this.glyphs[i];\n            glyph.renderText(ctx, this.x, 0);\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class Repetition extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Repetition;\n    }\n    constructor(type, x, yShift) {\n        super();\n        this.symbolType = type;\n        this.x = x;\n        this.xShift = 0;\n        this.yShift = yShift;\n    }\n    setShiftX(x) {\n        this.xShift = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.yShift = y;\n        return this;\n    }\n    draw(stave, x) {\n        this.setRendered();\n        switch (this.symbolType) {\n            case Repetition.type.CODA_RIGHT:\n                this.drawCodaFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.CODA_LEFT:\n                this.drawSymbolText(stave, x, 'Coda', true);\n                break;\n            case Repetition.type.SEGNO_LEFT:\n                this.drawSegnoFixed(stave, x);\n                break;\n            case Repetition.type.SEGNO_RIGHT:\n                this.drawSegnoFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.DC:\n                this.drawSymbolText(stave, x, 'D.C.', false);\n                break;\n            case Repetition.type.DC_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.C. al', true);\n                break;\n            case Repetition.type.DC_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n                break;\n            case Repetition.type.DS:\n                this.drawSymbolText(stave, x, 'D.S.', false);\n                break;\n            case Repetition.type.DS_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.S. al', true);\n                break;\n            case Repetition.type.DS_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n                break;\n            case Repetition.type.FINE:\n                this.drawSymbolText(stave, x, 'Fine', false);\n                break;\n            case Repetition.type.TO_CODA:\n                this.drawSymbolText(stave, x, 'To', true);\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n    drawCodaFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines());\n        this.text = Glyphs.coda;\n        this.renderText(stave.checkContext(), x, y + Metrics.get('Repetition.coda.offsetY'));\n        return this;\n    }\n    drawSegnoFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines());\n        this.text = Glyphs.segno;\n        this.renderText(stave.checkContext(), x, y + Metrics.get('Repetition.segno.offsetY'));\n        return this;\n    }\n    drawSymbolText(stave, x, text, drawCoda) {\n        const ctx = stave.checkContext();\n        let textX = 0;\n        this.text = text;\n        if (drawCoda) {\n            this.text += ' \\ue048' /*coda*/;\n        }\n        this.setFont(Metrics.getFontInfo('Repetition.text'));\n        switch (this.symbolType) {\n            // To the left\n            case Repetition.type.CODA_LEFT:\n                // Offset Coda text to right of stave beginning\n                textX = stave.getVerticalBarWidth();\n                break;\n            // To the right\n            case Repetition.type.DC:\n            case Repetition.type.DC_AL_FINE:\n            case Repetition.type.DS:\n            case Repetition.type.DS_AL_FINE:\n            case Repetition.type.FINE:\n            default:\n                textX =\n                    x - (stave.getNoteStartX() - this.x) + stave.getWidth() - this.width - Metrics.get('Repetition.text.offsetX');\n        }\n        const y = stave.getYForTopText(stave.getNumLines()) + Metrics.get('Repetition.text.offsetY');\n        this.renderText(ctx, textX, y);\n        return this;\n    }\n}\nRepetition.type = {\n    NONE: 1, // no coda or segno\n    CODA_LEFT: 2, // coda at beginning of stave\n    CODA_RIGHT: 3, // coda at end of stave\n    SEGNO_LEFT: 4, // segno at beginning of stave\n    SEGNO_RIGHT: 5, // segno at end of stave\n    DC: 6, // D.C. at end of stave\n    DC_AL_CODA: 7, // D.C. al coda at end of stave\n    DC_AL_FINE: 8, // D.C. al Fine end of stave\n    DS: 9, // D.S. at end of stave\n    DS_AL_CODA: 10, // D.S. al coda at end of stave\n    DS_AL_FINE: 11, // D.S. al Fine at end of stave\n    FINE: 12, // Fine at end of stave\n    TO_CODA: 13, // To Coda at end of stave\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class StaveSection extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveSection;\n    }\n    constructor(section, x, yShift, drawRect = true) {\n        super();\n        this.setStaveSection(section);\n        this.x = x;\n        this.yShift = yShift;\n        this.drawRect = drawRect;\n    }\n    setStaveSection(section) {\n        this.text = section;\n        return this;\n    }\n    draw(stave, xShift) {\n        const borderWidth = 2;\n        const padding = 2;\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setLineWidth(borderWidth);\n        const headroom = -1 * this.textMetrics.actualBoundingBoxDescent;\n        const width = this.width + 2 * padding; // add left & right padding\n        const height = this.height + 2 * padding; // add top & bottom padding\n        //  Seems to be a good default y\n        const y = stave.getYForTopText(1.5) + this.yShift;\n        const x = this.x + xShift;\n        if (this.drawRect) {\n            ctx.beginPath();\n            ctx.rect(x, y - height + headroom, width, height);\n            ctx.stroke();\n        }\n        this.renderText(ctx, xShift + padding, y - padding);\n        ctx.restore();\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Radosaw Eichler 2012\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _StaveTempo_durationToCode;\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class StaveTempo extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveTempo;\n    }\n    constructor(tempo, x, shiftY) {\n        super();\n        _StaveTempo_durationToCode.set(this, {\n            '1/4': Glyphs.metNoteDoubleWholeSquare,\n            long: Glyphs.metNoteDoubleWholeSquare,\n            '1/2': Glyphs.metNoteDoubleWhole,\n            breve: Glyphs.metNoteDoubleWhole,\n            1: Glyphs.metNoteWhole,\n            whole: Glyphs.metNoteWhole,\n            w: Glyphs.metNoteWhole,\n            2: Glyphs.metNoteHalfUp,\n            half: Glyphs.metNoteHalfUp,\n            h: Glyphs.metNoteHalfUp,\n            4: Glyphs.metNoteQuarterUp,\n            quarter: Glyphs.metNoteQuarterUp,\n            q: Glyphs.metNoteQuarterUp,\n            8: Glyphs.metNote8thUp,\n            eighth: Glyphs.metNote8thUp,\n            16: Glyphs.metNote16thUp,\n            '16th': Glyphs.metNote16thUp,\n            32: Glyphs.metNote32ndUp,\n            '32nd': Glyphs.metNote32ndUp,\n            64: Glyphs.metNote64thUp,\n            '64th': Glyphs.metNote64thUp,\n            128: Glyphs.metNote128thUp,\n            '128th': Glyphs.metNote128thUp,\n            256: Glyphs.metNote256thUp,\n            '256th': Glyphs.metNote256thUp,\n            512: Glyphs.metNote512thUp,\n            '512th': Glyphs.metNote512thUp,\n            1024: Glyphs.metNote1024thUp,\n            '1024th': Glyphs.metNote1024thUp,\n        });\n        this.tempo = tempo;\n        this.position = StaveModifierPosition.ABOVE;\n        this.x = x;\n        this.setXShift(10);\n        this.setYShift(shiftY);\n    }\n    setTempo(tempo) {\n        this.tempo = tempo;\n        return this;\n    }\n    draw(stave, shiftX) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        const { name, duration, dots, bpm, duration2, dots2, parenthesis } = this.tempo;\n        let x = this.x + shiftX;\n        const y = stave.getYForTopText(1);\n        const el = new Element('StaveTempo.glyph');\n        const elText = new Element('StaveTempo');\n        if (name) {\n            this.text = name;\n            this.fontInfo = Metrics.getFontInfo('StaveTempo.name');\n            this.renderText(ctx, shiftX, y);\n            x += this.getWidth() + 3;\n        }\n        if ((name && duration) || parenthesis) {\n            elText.setText('(');\n            elText.renderText(ctx, x + this.xShift, y + this.yShift);\n            x += elText.getWidth() + 3;\n        }\n        if (duration) {\n            el.setText(__classPrivateFieldGet(this, _StaveTempo_durationToCode, \"f\")[duration]);\n            el.renderText(ctx, x + this.xShift, y + this.yShift);\n            x += el.getWidth() + 3;\n            if (dots) {\n                // Draw dot\n                el.setText(Glyphs.metAugmentationDot);\n                for (let i = 0; i < dots; i++) {\n                    el.renderText(ctx, x + this.xShift, y + 2 + this.yShift);\n                    x += el.getWidth() + 3;\n                }\n            }\n            elText.setText('=');\n            elText.renderText(ctx, x + this.xShift, y + this.yShift);\n            x += elText.getWidth() + 3;\n            if (duration2) {\n                el.setText(__classPrivateFieldGet(this, _StaveTempo_durationToCode, \"f\")[duration2]);\n                el.renderText(ctx, x + this.xShift, y + this.yShift);\n                x += el.getWidth() + 3;\n                if (dots2) {\n                    // Draw dot\n                    el.setText(Glyphs.metAugmentationDot);\n                    for (let i = 0; i < dots2; i++) {\n                        el.renderText(ctx, x + this.xShift, y + 2 + this.yShift);\n                        x += el.getWidth() + 3;\n                    }\n                }\n            }\n            else if (bpm) {\n                elText.setText('' + bpm);\n                elText.renderText(ctx, x + this.xShift, y + this.yShift);\n                x += elText.getWidth() + 3;\n            }\n            if (name || parenthesis) {\n                elText.setText(')');\n                elText.renderText(ctx, x + this.xShift, y + this.yShift);\n            }\n        }\n        return this;\n    }\n}\n_StaveTempo_durationToCode = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport var TextJustification;\n(function (TextJustification) {\n    TextJustification[TextJustification[\"LEFT\"] = 1] = \"LEFT\";\n    TextJustification[TextJustification[\"CENTER\"] = 2] = \"CENTER\";\n    TextJustification[TextJustification[\"RIGHT\"] = 3] = \"RIGHT\";\n})(TextJustification || (TextJustification = {}));\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n    static get CATEGORY() {\n        return Category.TextNote;\n    }\n    /** Glyph data. */\n    static get GLYPHS() {\n        return {\n            segno: Glyphs.segno,\n            tr: Glyphs.ornamentTrill,\n            mordent: Glyphs.ornamentMordent,\n            mordentUpper: Glyphs.ornamentShortTrill,\n            mordentLower: Glyphs.ornamentMordent,\n            f: Glyphs.dynamicForte,\n            p: Glyphs.dynamicPiano,\n            m: Glyphs.dynamicMezzo,\n            s: Glyphs.dynamicSforzando,\n            z: Glyphs.dynamicZ,\n            coda: Glyphs.coda,\n            pedalOpen: Glyphs.keyboardPedalPed,\n            pedalClose: Glyphs.keyboardPedalUp,\n            caesuraStraight: Glyphs.caesura,\n            caesuraCurved: Glyphs.caesuraCurved,\n            breath: Glyphs.breathMarkComma,\n            tick: Glyphs.breathMarkTick,\n            turn: Glyphs.ornamentTurn,\n            turnInverted: Glyphs.ornamentTurnSlash,\n        };\n    }\n    constructor(noteStruct) {\n        var _a, _b;\n        super(noteStruct);\n        this.text = (_a = noteStruct.text) !== null && _a !== void 0 ? _a : '';\n        if (noteStruct.glyph) {\n            this.text += TextNote.GLYPHS[noteStruct.glyph] || noteStruct.glyph;\n        }\n        if (noteStruct.font) {\n            this.setFont(noteStruct.font);\n        }\n        else if (noteStruct.glyph === undefined) {\n            this.setFont(Metrics.getFontInfo('TextNote.text.fontSize'));\n        }\n        // Scale the font size by 1/1.3.\n        const smallerFontSize = Font.convertSizeToPointValue(this.fontInfo.size) * 0.769231;\n        if (noteStruct.superscript) {\n            this.superscript = new Element('TexNote.subSuper');\n            this.superscript.setText(noteStruct.superscript);\n            this.superscript.setFontSize(smallerFontSize);\n        }\n        if (noteStruct.subscript) {\n            this.subscript = new Element('TexNote.subSuper');\n            this.subscript.setText(noteStruct.subscript);\n            this.subscript.setFontSize(smallerFontSize);\n        }\n        this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;\n        this.smooth = noteStruct.smooth || false;\n        this.ignoreTicks = noteStruct.ignoreTicks || false;\n        this.justification = TextJustification.LEFT;\n    }\n    /** Set the horizontal justification of the TextNote. */\n    setJustification(just) {\n        this.justification = just;\n        return this;\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Return the Stave line on which the TextNote is placed. */\n    getLine() {\n        return this.line;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n        if (this.justification === TextJustification.CENTER) {\n            this.leftDisplacedHeadPx = this.width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            this.leftDisplacedHeadPx = this.width;\n        }\n        // We reposition to the center of the note head\n        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n        this.preFormatted = true;\n    }\n    /**\n     * Renders the TextNote.\n     * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n        this.setRendered();\n        // Reposition to center of note head\n        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n        // Align based on tick-context width.\n        const width = this.getWidth();\n        if (this.justification === TextJustification.CENTER) {\n            x -= width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            x -= width;\n        }\n        const y = stave.getYForLine(this.line + -3);\n        this.applyStyle(ctx);\n        this.renderText(ctx, x, y);\n        const height = this.getHeight();\n        if (this.superscript) {\n            this.superscript.renderText(ctx, x + this.width + 2, y - height / 2.2);\n        }\n        if (this.subscript) {\n            this.subscript.renderText(ctx, x + this.width + 2, y + height / 2.2 - 1);\n        }\n        this.restoreStyle(ctx);\n    }\n}\nTextNote.Justification = TextJustification;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport var VoltaType;\n(function (VoltaType) {\n    VoltaType[VoltaType[\"NONE\"] = 1] = \"NONE\";\n    VoltaType[VoltaType[\"BEGIN\"] = 2] = \"BEGIN\";\n    VoltaType[VoltaType[\"MID\"] = 3] = \"MID\";\n    VoltaType[VoltaType[\"END\"] = 4] = \"END\";\n    VoltaType[VoltaType[\"BEGIN_END\"] = 5] = \"BEGIN_END\";\n})(VoltaType || (VoltaType = {}));\nexport class Volta extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Volta;\n    }\n    static get type() {\n        return VoltaType;\n    }\n    constructor(type, label, x, yShift) {\n        super();\n        this.type = type;\n        this.x = x;\n        this.yShift = yShift;\n        this.text = label;\n    }\n    draw(stave, x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let width = stave.getWidth() - x; // don't include x (offset) for width\n        const topY = stave.getYForTopText(stave.getNumLines()) + this.yShift;\n        const vertHeight = 1.5 * stave.getSpacingBetweenLines();\n        switch (this.type) {\n            case VoltaType.BEGIN:\n                ctx.fillRect(this.x + x, topY, 1, vertHeight);\n                break;\n            case VoltaType.END:\n                width -= 5;\n                ctx.fillRect(this.x + x + width, topY, 1, vertHeight);\n                break;\n            case VoltaType.BEGIN_END:\n                width -= 3;\n                ctx.fillRect(this.x + x, topY, 1, vertHeight);\n                ctx.fillRect(this.x + x + width, topY, 1, vertHeight);\n                break;\n            default:\n                break;\n        }\n        // If the beginning of a volta, draw measure number\n        if (this.type === VoltaType.BEGIN || this.type === VoltaType.BEGIN_END) {\n            this.renderText(ctx, x + 5, topY - this.yShift + 15);\n        }\n        ctx.fillRect(this.x + x, topY, width, 1);\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { TextJustification, TextNote } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveText extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveText;\n    }\n    constructor(text, position, options = {}) {\n        var _a, _b, _c;\n        super();\n        this.setText(text);\n        this.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);\n        this.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);\n        this.position = position;\n        this.justification = (_c = options.justification) !== null && _c !== void 0 ? _c : TextNote.Justification.CENTER;\n    }\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let x;\n        let y;\n        switch (this.position) {\n            case StaveModifierPosition.LEFT:\n            case StaveModifierPosition.RIGHT:\n                y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2;\n                if (this.position === StaveModifierPosition.LEFT) {\n                    x = stave.getX() - this.width - 24;\n                }\n                else {\n                    x = stave.getX() + stave.getWidth() + 24;\n                }\n                break;\n            case StaveModifierPosition.ABOVE:\n            case StaveModifierPosition.BELOW:\n                x = stave.getX();\n                if (this.justification === TextJustification.CENTER) {\n                    x += stave.getWidth() / 2 - this.width / 2;\n                }\n                else if (this.justification === TextJustification.RIGHT) {\n                    x += stave.getWidth() - this.width;\n                }\n                if (this.position === StaveModifierPosition.ABOVE) {\n                    y = stave.getYForTopText(2);\n                }\n                else {\n                    y = stave.getYForBottomText(2);\n                }\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n        }\n        this.renderText(ctx, x, y + 4);\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nconst assertIsValidTimeSig = (timeSpec) => {\n    const numbers = timeSpec.split('/');\n    numbers.forEach((number) => {\n        // Characters consisting in number 0..9, '+', '-', '(' or ')'\n        if (/^[0-9+\\-()]+$/.test(number) === false) {\n            throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\n        }\n    });\n};\n/**\n * A TimeSignature is a StaveModifier that can make its appropriate Glyphs directly from\n * a provided \"timeSpec\" such as \"4/4\", \"C|\" (cut time), or even something more advanced\n * such as \"3/4(6/8)\" or \"2/4+5/8\".\n */\nexport class TimeSignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.TimeSignature;\n    }\n    constructor(timeSpec = '4/4', customPadding = 15, validateArgs = true) {\n        super();\n        this.timeSpec = '4/4';\n        this.line = 0;\n        this.isNumeric = true;\n        this.topStartX = 0;\n        this.botStartX = 0;\n        this.lineShift = 0;\n        this.topText = new Element();\n        this.botText = new Element();\n        this.validateArgs = validateArgs;\n        const padding = customPadding;\n        this.topLine = 1;\n        this.bottomLine = 3;\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setTimeSig(timeSpec);\n        this.setPadding(padding);\n    }\n    static getTimeSigCode(key, smallSig = false) {\n        let code = Glyphs.null;\n        switch (key) {\n            case 'C':\n                code = Glyphs.timeSigCommon;\n                break;\n            case 'C|':\n                code = Glyphs.timeSigCutCommon;\n                break;\n            case '+':\n                code = smallSig ? Glyphs.timeSigPlusSmall : Glyphs.timeSigPlus;\n                break;\n            case '-':\n                code = Glyphs.timeSigMinus;\n                break;\n            case '(':\n                code = smallSig ? Glyphs.timeSigParensLeftSmall : Glyphs.timeSigParensLeft;\n                break;\n            case ')':\n                code = smallSig ? Glyphs.timeSigParensRightSmall : Glyphs.timeSigParensRight;\n                break;\n            default:\n                code = String.fromCodePoint(0xe080 + Number(key[0])) /* timeSigN = Glyphs.timeSig0 + N */;\n                break;\n        }\n        return code;\n    }\n    /**\n     * Returns a new TimeSignatureGlyph (a Glyph subclass that knows how to draw both\n     * top and bottom digits along with plus signs etc.)\n     */\n    makeTimeSignatureGlyph(topDigits, botDigits) {\n        // note that 'code' is ignored by TimeSignatureGlyph when rendering.\n        let txt = '';\n        let topWidth = 0;\n        let height = 0;\n        for (let i = 0; i < topDigits.length; ++i) {\n            const code = TimeSignature.getTimeSigCode(topDigits[i], botDigits.length > 0);\n            txt += code;\n        }\n        this.topText.setText(txt);\n        topWidth = this.topText.getWidth();\n        height = this.topText.getHeight();\n        let botWidth = 0;\n        txt = '';\n        for (let i = 0; i < botDigits.length; ++i) {\n            const code = TimeSignature.getTimeSigCode(botDigits[i], true);\n            txt += code;\n        }\n        this.botText.setText(txt);\n        botWidth = this.botText.getWidth();\n        height = Math.max(height, this.botText.getHeight());\n        // If the height of the digits is more than three staff spaces (30), shift half a line line\n        // in order to center the digits on lines 1.5 and 4.5 rather than 2 and 4.\n        this.lineShift = height > 30 ? 0.5 : 0;\n        this.width = Math.max(topWidth, botWidth);\n        this.topStartX = (this.width - topWidth) / 2.0;\n        this.botStartX = (this.width - botWidth) / 2.0;\n    }\n    /**\n     * Set a new time signature specification without changing customPadding, etc.\n     *\n     * The getter for this is `getTimeSpec` not `getTimeSig`.\n     */\n    setTimeSig(timeSpec) {\n        var _a, _b;\n        this.timeSpec = timeSpec;\n        if (timeSpec === 'C' || timeSpec === 'C|') {\n            const code = TimeSignature.getTimeSigCode(timeSpec);\n            this.line = 2;\n            this.text = code;\n            this.isNumeric = false;\n        }\n        else {\n            if (this.validateArgs) {\n                assertIsValidTimeSig(timeSpec);\n            }\n            const parts = timeSpec.split('/');\n            this.line = 0;\n            this.isNumeric = true;\n            this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : '');\n        }\n        return this;\n    }\n    /**\n     * Return the timeSpec (such as '4/4' or 'C|' or even '2/4+3/8') of the TimeSignature\n     */\n    getTimeSpec() {\n        return this.timeSpec;\n    }\n    /**\n     * Return the staff line that the TimeSignature sits on.  Generally 0 for numerator/\n     * denominator time signatures such as 3/4 and 2 for cut/common.\n     */\n    getLine() {\n        return this.line;\n    }\n    /**\n     * Set the line number that the TimeSignature sits on.  Half-values are acceptable\n     * for spaces, etc. Can be altered, for instance, for signatures that sit above the\n     * staff in large orchestral scores.\n     */\n    setLine(line) {\n        this.line = line;\n    }\n    /**\n     * Return a boolean on whether this TimeSignature is drawn with one or more numbers\n     * (such as 4/4) or not (as in cut time).\n     */\n    getIsNumeric() {\n        return this.isNumeric;\n    }\n    /**\n     * Set whether this TimeSignature is drawn with one or more numbers.\n     */\n    setIsNumeric(isNumeric) {\n        this.isNumeric = isNumeric;\n    }\n    /**\n     * Draw the time signature on a Stave using its RenderContext.  Both setStave\n     * and setContext must already be run.\n     */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.drawAt(ctx, stave, this.x);\n    }\n    drawAt(ctx, stave, x) {\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('timesignature', this.getAttribute('id'));\n        if (this.isNumeric) {\n            let startX = x + this.topStartX;\n            let y = 0;\n            if (this.botText.getText().length > 0)\n                y = stave.getYForLine(this.topLine - this.lineShift);\n            else\n                y = (stave.getYForLine(this.topLine) + stave.getYForLine(this.bottomLine)) / 2;\n            this.topText.renderText(ctx, startX, y);\n            startX = x + this.botStartX;\n            y = stave.getYForLine(this.bottomLine + this.lineShift);\n            this.botText.renderText(ctx, startX, y);\n        }\n        else {\n            this.renderText(ctx, x - this.x, stave.getYForLine(this.line));\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element } from './element';\nimport { KeySignature } from './keysignature';\nimport { Metrics } from './metrics';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Category, isBarline } from './typeguard';\nimport { RuntimeError } from './util';\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\n// The keys (computed property names) match the CATEGORY property in the\n// Barline, Clef, KeySignature, TimeSignature classes.\nconst SORT_ORDER_BEG_MODIFIERS = {\n    [Barline.CATEGORY]: 0,\n    [Clef.CATEGORY]: 1,\n    [KeySignature.CATEGORY]: 2,\n    [TimeSignature.CATEGORY]: 3,\n};\nconst SORT_ORDER_END_MODIFIERS = {\n    [TimeSignature.CATEGORY]: 0,\n    [KeySignature.CATEGORY]: 1,\n    [Barline.CATEGORY]: 2,\n    [Clef.CATEGORY]: 3,\n};\nexport class Stave extends Element {\n    static get CATEGORY() {\n        return Category.Stave;\n    }\n    // This is the sum of the padding that normally goes on left + right of a stave during\n    // drawing. Used to size staves correctly with content width.\n    static get defaultPadding() {\n        return Metrics.get('Stave.padding') + Metrics.get('Stave.endPaddingMax');\n    }\n    // Right padding, used by system if startX is already determined.\n    static get rightPadding() {\n        return Metrics.get('Stave.endPaddingMax');\n    }\n    constructor(x, y, width, options) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.formatted = false;\n        this.startX = x + 5;\n        this.endX = x + width;\n        this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n        this.measure = 0;\n        this.clef = 'treble';\n        this.endClef = undefined;\n        this.options = Object.assign({ verticalBarWidth: 10, numLines: 5, fillStyle: '#999999', leftBar: true, rightBar: true, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, spaceAboveStaffLn: 4, spaceBelowStaffLn: 4, topTextPosition: 1, bottomTextPosition: 4, lineConfig: [] }, options);\n        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n        this.resetLines();\n        // beg bar\n        this.addModifier(new Barline(this.options.leftBar ? BarlineType.SINGLE : BarlineType.NONE));\n        // end bar\n        this.addEndModifier(new Barline(this.options.rightBar ? BarlineType.SINGLE : BarlineType.NONE));\n    }\n    /** Set default style for ledger lines. */\n    setDefaultLedgerLineStyle(style) {\n        this.defaultLedgerLineStyle = style;\n    }\n    /** Get default style for ledger lines. */\n    getDefaultLedgerLineStyle() {\n        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\n    }\n    space(spacing) {\n        return this.options.spacingBetweenLinesPx * spacing;\n    }\n    resetLines() {\n        this.options.lineConfig = [];\n        for (let i = 0; i < this.options.numLines; i++) {\n            this.options.lineConfig.push({ visible: true });\n        }\n        this.height = (this.options.numLines + this.options.spaceAboveStaffLn) * this.options.spacingBetweenLinesPx;\n        this.options.bottomTextPosition = this.options.numLines;\n    }\n    setNoteStartX(x) {\n        if (!this.formatted)\n            this.format();\n        this.startX = x;\n        return this;\n    }\n    getNoteStartX() {\n        if (!this.formatted)\n            this.format();\n        return this.startX;\n    }\n    getNoteEndX() {\n        if (!this.formatted)\n            this.format();\n        return this.endX;\n    }\n    getTieStartX() {\n        return this.startX;\n    }\n    getTieEndX() {\n        return this.endX;\n    }\n    getNumLines() {\n        return this.options.numLines;\n    }\n    setNumLines(n) {\n        this.options.numLines = n;\n        this.resetLines();\n        return this;\n    }\n    getTopLineTopY() {\n        return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    getBottomLineBottomY() {\n        return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    setX(x) {\n        const shift = x - this.x;\n        this.formatted = false;\n        this.x = x;\n        this.startX += shift;\n        this.endX += shift;\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const mod = this.modifiers[i];\n            mod.setX(mod.getX() + shift);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.formatted = false;\n        this.width = width;\n        this.endX = this.x + width;\n        // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n        // this.modifiers[1].setX(this.endX);\n        return this;\n    }\n    getStyle() {\n        return Object.assign({ fillStyle: this.options.fillStyle, strokeStyle: this.options.fillStyle, lineWidth: Tables.STAVE_LINE_THICKNESS }, super.getStyle());\n    }\n    /**\n     * Set the measure number of this Stave.\n     */\n    setMeasure(measure) {\n        this.measure = measure;\n        return this;\n    }\n    /**\n     * Return the measure number of this Stave.\n     */\n    getMeasure() {\n        return this.measure;\n    }\n    /**\n     * Gets the pixels to shift from the beginning of the stave\n     * following the modifier at the provided index\n     * @param  {Number} index The index from which to determine the shift\n     * @return {Number}       The amount of pixels shifted\n     */\n    getModifierXShift(index = 0) {\n        if (typeof index !== 'number') {\n            throw new RuntimeError('InvalidIndex', 'Must be of number type');\n        }\n        if (!this.formatted)\n            this.format();\n        if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n            return 0;\n        }\n        // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n        if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n            return 0;\n        }\n        let startX = this.startX - this.x;\n        const begBarline = this.modifiers[0];\n        if (begBarline.getType() === BarlineType.REPEAT_BEGIN && startX > begBarline.getWidth()) {\n            startX -= begBarline.getWidth();\n        }\n        return startX;\n    }\n    /** Coda & Segno Symbol functions */\n    setRepetitionType(type, yShift = 0) {\n        this.modifiers.push(new Repetition(type, this.x, yShift));\n        return this;\n    }\n    // Volta functions\n    setVoltaType(type, label, y) {\n        this.modifiers.push(new Volta(type, label, this.x, y));\n        return this;\n    }\n    // Section functions\n    setSection(section, y, xOffset = 0, fontSize, drawRect = true) {\n        const staveSection = new StaveSection(section, this.x + xOffset, y, drawRect);\n        if (fontSize) {\n            staveSection.setFontSize(fontSize);\n        }\n        this.modifiers.push(staveSection);\n        return this;\n    }\n    // Tempo functions\n    setTempo(tempo, y) {\n        this.modifiers.push(new StaveTempo(tempo, this.x, y));\n        return this;\n    }\n    // Text functions\n    setStaveText(text, position, options = {}) {\n        this.modifiers.push(new StaveText(text, position, options));\n        return this;\n    }\n    getSpacingBetweenLines() {\n        return this.options.spacingBetweenLinesPx;\n    }\n    getBoundingBox() {\n        return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n    }\n    getBottomY() {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const scoreBottom = this.getYForLine(options.numLines) + options.spaceBelowStaffLn * spacing;\n        return scoreBottom;\n    }\n    getBottomLineY() {\n        return this.getYForLine(this.options.numLines);\n    }\n    // This returns\n    /** @returns the y for the *center* of a staff line */\n    getYForLine(line) {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        const y = this.y + line * spacing + headroom * spacing;\n        return y;\n    }\n    getLineForY(y) {\n        // Does the reverse of getYForLine - somewhat dumb and just calls\n        // getYForLine until the right value is reaches\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        return (y - this.y) / spacing - headroom;\n    }\n    getYForTopText(line = 0) {\n        return this.getYForLine(-line - this.options.topTextPosition);\n    }\n    getYForBottomText(line = 0) {\n        return this.getYForLine(this.options.bottomTextPosition + line);\n    }\n    getYForNote(line) {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        return this.y + headroom * spacing + 5 * spacing - line * spacing;\n    }\n    getYForGlyphs() {\n        return this.getYForLine(3);\n    }\n    // This method adds a stave modifier to the stave. Note that the first two\n    // modifiers (BarLines) are automatically added upon construction.\n    addModifier(modifier, position) {\n        if (position !== undefined) {\n            modifier.setPosition(position);\n        }\n        modifier.setStave(this);\n        this.formatted = false;\n        this.modifiers.push(modifier);\n        return this;\n    }\n    addEndModifier(modifier) {\n        this.addModifier(modifier, StaveModifierPosition.END);\n        return this;\n    }\n    // Bar Line functions\n    setBegBarType(type) {\n        // Only valid bar types at beginning of stave is none, single or begin repeat\n        const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n            this.modifiers[0].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setEndBarType(type) {\n        // Repeat end not valid at end of stave\n        if (type !== BarlineType.REPEAT_BEGIN) {\n            this.modifiers[1].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setClef(clefSpec, size, annotation, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        if (position === StaveModifierPosition.END) {\n            this.endClef = clefSpec;\n        }\n        else {\n            this.clef = clefSpec;\n        }\n        const clefs = this.getModifiers(position, Clef.CATEGORY);\n        if (clefs.length === 0) {\n            this.addClef(clefSpec, size, annotation, position);\n        }\n        else {\n            clefs[0].setType(clefSpec, size, annotation);\n        }\n        return this;\n    }\n    getClef() {\n        return this.clef;\n    }\n    setEndClef(clefSpec, size, annotation) {\n        this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    getEndClef() {\n        return this.endClef;\n    }\n    setKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n        if (keySignatures.length === 0) {\n            this.addKeySignature(keySpec, cancelKeySpec, position);\n        }\n        else {\n            keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n        }\n        return this;\n    }\n    setEndKeySignature(keySpec, cancelKeySpec) {\n        this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n        return this;\n    }\n    setTimeSignature(timeSpec, customPadding, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n        if (timeSignatures.length === 0) {\n            this.addTimeSignature(timeSpec, customPadding, position);\n        }\n        else {\n            timeSignatures[0].setTimeSig(timeSpec);\n        }\n        return this;\n    }\n    setEndTimeSignature(timeSpec, customPadding) {\n        this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a key signature to the stave.\n     *\n     * Example:\n     * `stave.addKeySignature('Db');`\n     * @param keySpec new key specification `[A-G][b|#]?`\n     * @param cancelKeySpec\n     * @param position\n     * @returns\n     */\n    addKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n        return this;\n    }\n    /**\n     * Add a clef to the stave.\n     *\n     * Example:\n     *\n     * stave.addClef('treble')\n     * @param clef clef (treble|bass|...) see {@link Clef.types}\n     * @param size\n     * @param annotation\n     * @param position\n     * @returns\n     */\n    addClef(clef, size, annotation, position) {\n        if (position === undefined || position === StaveModifierPosition.BEGIN) {\n            this.clef = clef;\n        }\n        else if (position === StaveModifierPosition.END) {\n            this.endClef = clef;\n        }\n        this.addModifier(new Clef(clef, size, annotation), position);\n        return this;\n    }\n    addEndClef(clef, size, annotation) {\n        this.addClef(clef, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a time signature to the stave\n     *\n     * Example:\n     *\n     * `stave.addTimeSignature('4/4');`\n     * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n     * @param customPadding\n     * @param position\n     * @returns\n     */\n    addTimeSignature(timeSpec, customPadding, position) {\n        this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n        return this;\n    }\n    addEndTimeSignature(timeSpec, customPadding) {\n        this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    // Deprecated\n    addTrebleGlyph() {\n        this.addClef('treble');\n        return this;\n    }\n    /**\n     * @param position\n     * @param category\n     * @returns array of StaveModifiers that match the provided position and category.\n     */\n    getModifiers(position, category) {\n        const noPosition = position === undefined;\n        const noCategory = category === undefined;\n        if (noPosition && noCategory) {\n            return this.modifiers;\n        }\n        else if (noPosition) {\n            // A category was provided.\n            return this.modifiers.filter((m) => category === m.getCategory());\n        }\n        else if (noCategory) {\n            // A position was provided.\n            return this.modifiers.filter((m) => position === m.getPosition());\n        }\n        else {\n            // Both position and category were provided!\n            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());\n        }\n    }\n    /**\n     * Use the modifier's `getCategory()` as a key for the `order` array.\n     * The retrieved value is used to sort modifiers from left to right (0 to to 3).\n     */\n    sortByCategory(items, order) {\n        for (let i = items.length - 1; i >= 0; i--) {\n            for (let j = 0; j < i; j++) {\n                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n                    const temp = items[j];\n                    items[j] = items[j + 1];\n                    items[j + 1] = temp;\n                }\n            }\n        }\n    }\n    format() {\n        var _a, _b, _c, _d;\n        const begBarline = this.modifiers[0];\n        const endBarline = this.modifiers[1];\n        const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n        const endModifiers = this.getModifiers(StaveModifierPosition.END);\n        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n        if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n            begModifiers.push(begModifiers.splice(0, 1)[0]);\n            begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n        }\n        if (endModifiers.indexOf(endBarline) > 0) {\n            endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n        }\n        let width;\n        let padding;\n        let modifier;\n        let offset = 0;\n        let x = this.x;\n        for (let i = 0; i < begModifiers.length; i++) {\n            modifier = begModifiers[i];\n            padding = modifier.getPadding(i + offset);\n            width = modifier.getWidth();\n            x += padding;\n            modifier.setX(x);\n            x += width;\n            if (padding + width === 0)\n                offset--;\n        }\n        this.startX = x;\n        x = this.x + this.width;\n        const widths = {\n            left: 0,\n            right: 0,\n            paddingRight: 0,\n            paddingLeft: 0,\n        };\n        let lastBarlineIdx = 0;\n        for (let i = 0; i < endModifiers.length; i++) {\n            modifier = endModifiers[i];\n            lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n            widths.right = 0;\n            widths.left = 0;\n            widths.paddingRight = 0;\n            widths.paddingLeft = 0;\n            const layoutMetrics = modifier.getLayoutMetrics();\n            if (layoutMetrics) {\n                if (i !== 0) {\n                    widths.right = (_a = layoutMetrics.xMax) !== null && _a !== void 0 ? _a : 0;\n                    widths.paddingRight = (_b = layoutMetrics.paddingRight) !== null && _b !== void 0 ? _b : 0;\n                }\n                widths.left = (_c = -layoutMetrics.xMin) !== null && _c !== void 0 ? _c : 0;\n                widths.paddingLeft = (_d = layoutMetrics.paddingLeft) !== null && _d !== void 0 ? _d : 0;\n                if (i === endModifiers.length - 1) {\n                    widths.paddingLeft = 0;\n                }\n            }\n            else {\n                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n                if (i !== 0) {\n                    widths.right = modifier.getWidth();\n                }\n                if (i === 0) {\n                    widths.left = modifier.getWidth();\n                }\n            }\n            x -= widths.paddingRight;\n            x -= widths.right;\n            modifier.setX(x);\n            x -= widths.left;\n            x -= widths.paddingLeft;\n        }\n        this.endX = endModifiers.length === 1 ? this.x + this.width : x;\n        this.formatted = true;\n    }\n    /**\n     * All drawing functions below need the context to be set.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.applyStyle();\n        ctx.openGroup('stave', this.getAttribute('id'));\n        if (!this.formatted)\n            this.format();\n        const numLines = this.options.numLines;\n        const width = this.width;\n        const x = this.x;\n        let y;\n        // Render lines\n        for (let line = 0; line < numLines; line++) {\n            y = this.getYForLine(line);\n            if (this.options.lineConfig[line].visible) {\n                ctx.beginPath();\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + width, y);\n                ctx.stroke();\n            }\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n        // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            // Only draw modifier if it has a draw function\n            if (typeof modifier.draw === 'function') {\n                modifier.applyStyle(ctx);\n                modifier.draw(this, this.getModifierXShift(i));\n                modifier.restoreStyle(ctx);\n            }\n        }\n        // Render measure numbers\n        if (this.measure > 0) {\n            ctx.save();\n            ctx.setFont(this.fontInfo);\n            const textWidth = ctx.measureText('' + this.measure).width;\n            y = this.getYForTopText(0) + 3;\n            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\n            ctx.restore();\n        }\n        return this;\n    }\n    getVerticalBarWidth() {\n        return this.options.verticalBarWidth;\n    }\n    /**\n     * Get the current configuration for the Stave.\n     * @return {Array} An array of configuration objects.\n     */\n    getConfigForLines() {\n        return this.options.lineConfig;\n    }\n    /**\n     * Configure properties of the lines in the Stave\n     * @param lineNumber The index of the line to configure.\n     * @param lineConfig An configuration object for the specified line.\n     * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n     *   range of the number of lines specified in the constructor.\n     */\n    setConfigForLine(lineNumber, lineConfig) {\n        if (lineNumber >= this.options.numLines || lineNumber < 0) {\n            throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n        }\n        if (lineConfig.visible === undefined) {\n            throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n        }\n        if (typeof lineConfig.visible !== 'boolean') {\n            throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n        }\n        this.options.lineConfig[lineNumber] = lineConfig;\n        return this;\n    }\n    /**\n     * Set the staff line configuration array for all of the lines at once.\n     * @param linesConfiguration An array of line configuration objects.  These objects\n     *   are of the same format as the single one passed in to setLineConfiguration().\n     *   The caller can set null for any line config entry if it is desired that the default be used\n     * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n     *   exactly the same number of elements as the numLines configuration object set in\n     *   the constructor.\n     */\n    setConfigForLines(linesConfiguration) {\n        if (linesConfiguration.length !== this.options.numLines) {\n            throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n        }\n        // Make sure the defaults are present in case an incomplete set of\n        //  configuration options were supplied.\n        // eslint-disable-next-line\n        for (const lineConfig in linesConfiguration) {\n            // Allow '{}' to be used if the caller just wants the default for a particular node.\n            if (linesConfiguration[lineConfig].visible === undefined) {\n                linesConfiguration[lineConfig] = this.options.lineConfig[lineConfig];\n            }\n            this.options.lineConfig[lineConfig] = Object.assign(Object.assign({}, this.options.lineConfig[lineConfig]), linesConfiguration[lineConfig]);\n        }\n        this.options.lineConfig = linesConfiguration;\n        return this;\n    }\n    static formatBegModifiers(staves) {\n        const adjustCategoryStartX = (category) => {\n            let minStartX = 0;\n            // Calculate min start X for the category\n            staves.forEach((stave) => {\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                // Consider only the first instance\n                if (modifiers.length > 0 && modifiers[0].getX() > minStartX)\n                    minStartX = modifiers[0].getX();\n            });\n            let adjustX = 0;\n            staves.forEach((stave) => {\n                adjustX = 0;\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                // Calculate adjustement required for the stave\n                modifiers.forEach((modifier) => {\n                    if (minStartX - modifier.getX() > adjustX)\n                        adjustX = minStartX - modifier.getX();\n                });\n                const allModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n                let bAdjust = false;\n                // Apply adjustment to all the modifiers in and beyond the category\n                allModifiers.forEach((modifier) => {\n                    if (modifier.getCategory() === category)\n                        bAdjust = true;\n                    if (bAdjust && adjustX > 0)\n                        modifier.setX(modifier.getX() + adjustX);\n                });\n                // Apply adjustment also to note start.\n                stave.setNoteStartX(stave.getNoteStartX() + adjustX);\n            });\n        };\n        // Make sure that staves are formatted\n        staves.forEach((stave) => {\n            if (!stave.formatted)\n                stave.format();\n        });\n        // Align Clefs\n        adjustCategoryStartX(Category.Clef);\n        // Align key signatures\n        adjustCategoryStartX(Category.KeySignature);\n        // Align time signatures\n        adjustCategoryStartX(Category.TimeSignature);\n        let maxX = 0;\n        // align note start\n        staves.forEach((stave) => {\n            if (stave.getNoteStartX() > maxX)\n                maxX = stave.getNoteStartX();\n        });\n        staves.forEach((stave) => {\n            stave.setNoteStartX(maxX);\n        });\n        maxX = 0;\n        // align REPEAT_BEGIN\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() === BarlineType.REPEAT_BEGIN)\n                    if (modifier.getX() > maxX)\n                        maxX = modifier.getX();\n            });\n        });\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() === BarlineType.REPEAT_BEGIN)\n                    modifier.setX(maxX);\n            });\n        });\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n    }\n    let xShift = 3;\n    let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n    const thickLineOffset = 2; // For aesthetics\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        xShift = -5; // Flips the side of the thin line\n        variableWidth = 3;\n    }\n    // Thin line\n    ctx.fillRect(topX + xShift, topY, 1, botY - topY);\n    // Thick line\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n    static get CATEGORY() {\n        return Category.StaveConnector;\n    }\n    constructor(topStave, bottomStave) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        this.topStave = topStave;\n        this.bottomStave = bottomStave;\n        this.type = StaveConnector.type.DOUBLE;\n        // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n        // 2. Offset BRACE type not to overlap with another StaveConnector\n        this.xShift = 0;\n        this.texts = [];\n    }\n    /**\n     * Set type.\n     * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n     */\n    setType(type) {\n        const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n        // Be certain that the type is a valid type:\n        if (Object.values(StaveConnector.type).includes(newType)) {\n            this.type = newType;\n        }\n        return this;\n    }\n    /**\n     * Get type.\n     * @returns number {@link StaveConnector.type}\n     */\n    getType() {\n        return this.type;\n    }\n    /** Set optional associated Text. */\n    setText(text, options = {}) {\n        var _a, _b;\n        const textElement = new Element('StaveConnector.text');\n        textElement.setText(text);\n        textElement.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);\n        textElement.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);\n        this.texts.push(textElement);\n        return this;\n    }\n    /** Render connector and associated text. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let topY = this.topStave.getYForLine(0);\n        let botY = this.bottomStave.getYForLine(this.bottomStave.getNumLines() - 1) + this.thickness;\n        let width = 3;\n        let topX = this.topStave.getX();\n        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||\n            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n            this.type === StaveConnector.type.THIN_DOUBLE;\n        if (isRightSidedConnector) {\n            topX = this.topStave.getX() + this.topStave.getWidth();\n        }\n        let attachmentHeight = botY - topY;\n        const element = new Element();\n        switch (this.type) {\n            case StaveConnector.type.SINGLE:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_LEFT:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_RIGHT:\n                width = 1;\n                break;\n            case StaveConnector.type.DOUBLE:\n                topX -= 5;\n                topY -= this.thickness;\n                attachmentHeight += 0.5;\n                break;\n            case StaveConnector.type.BRACE: {\n                width = 12;\n                // May need additional code to draw brace\n                const x1 = this.topStave.getX() - 2 + this.xShift;\n                const y1 = topY;\n                const x3 = x1;\n                const y3 = botY;\n                const x2 = x1 - width;\n                const y2 = y1 + attachmentHeight / 2.0;\n                const cpx1 = x2 - 0.9 * width;\n                const cpy1 = y1 + 0.2 * attachmentHeight;\n                const cpx2 = x1 + 1.1 * width;\n                const cpy2 = y2 - 0.135 * attachmentHeight;\n                const cpx3 = cpx2;\n                const cpy3 = y2 + 0.135 * attachmentHeight;\n                const cpx4 = cpx1;\n                const cpy4 = y3 - 0.2 * attachmentHeight;\n                const cpx5 = x2 - width;\n                const cpy5 = cpy4;\n                const cpx6 = x1 + 0.4 * width;\n                const cpy6 = y2 + 0.135 * attachmentHeight;\n                const cpx7 = cpx6;\n                const cpy7 = y2 - 0.135 * attachmentHeight;\n                const cpx8 = cpx5;\n                const cpy8 = cpy1;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n                ctx.fill();\n                ctx.stroke();\n                break;\n            }\n            case StaveConnector.type.BRACKET:\n                topY -= 6;\n                botY += 6;\n                attachmentHeight = botY - topY;\n                element.setText(Glyphs.bracketTop);\n                element.renderText(ctx, topX - 5, topY);\n                element.setText(Glyphs.bracketBottom);\n                element.renderText(ctx, topX - 5, botY);\n                topX -= 5;\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_LEFT:\n                drawBoldDoubleLine(ctx, this.type, topX + this.xShift, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.THIN_DOUBLE:\n                width = 1;\n                attachmentHeight -= this.thickness;\n                break;\n            case StaveConnector.type.NONE:\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n        }\n        if (this.type !== StaveConnector.type.BRACE &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n            this.type !== StaveConnector.type.NONE) {\n            ctx.fillRect(topX, topY, width, attachmentHeight);\n        }\n        // If the connector is a thin double barline, draw the paralell line\n        if (this.type === StaveConnector.type.THIN_DOUBLE) {\n            ctx.fillRect(topX - 3, topY, width, attachmentHeight);\n        }\n        // Add stave connector text\n        for (let i = 0; i < this.texts.length; i++) {\n            const textElement = this.texts[i];\n            const x = this.topStave.getX() - textElement.getWidth() - 24;\n            const y = (this.topStave.getYForLine(0) + this.bottomStave.getBottomLineY()) / 2;\n            textElement.renderText(ctx, x, y + 4);\n        }\n    }\n}\n/**\n * SINGLE_LEFT and SINGLE are the same value for compatibility\n * with older versions of vexflow which didn't have right sided\n * stave connectors.\n */\nStaveConnector.type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n};\n/**\n * Connector type:\n * * \"singleRight\"\n * * \"singleLeft\"\n * * \"single\"\n * * \"double\"\n * * \"brace\"\n * * \"bracket\"\n * * \"boldDoubleLeft\"\n * * \"boldDoubleRight\"\n * * \"thinDouble\"\n * * \"none\"\n */\nStaveConnector.typeString = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\nimport { Fraction } from './fraction';\nimport { RuntimeError } from './util';\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n */\nexport class TickContext {\n    static getNextContext(tContext) {\n        const contexts = tContext.tContexts;\n        const index = contexts.indexOf(tContext);\n        if (index + 1 < contexts.length)\n            return contexts[index + 1];\n    }\n    constructor(options) {\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.tickID = options && options.tickID ? options.tickID : 0;\n        this.currentTick = new Fraction(0, 1);\n        this.maxTicks = new Fraction(0, 1);\n        this.maxTickable = undefined; // Biggest tickable\n        this.minTicks = undefined; // this can remian null if all tickables have ignoreTicks\n        this.minTickable = undefined;\n        this.padding = 1; // padding on each side (width += padding * 2)\n        this.x = 0;\n        this.xBase = 0; // base x position without xOffset\n        this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n        this.tickables = []; // Notes, tabs, chords, lyrics.\n        this.tickablesByVoice = {}; // Tickables indexed by voice number\n        // Formatting metrics\n        this.notePx = 0; // width of widest note in this context\n        this.glyphPx = 0; // width of glyph (note head)\n        this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n        this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n        this.modLeftPx = 0; // Left modifier pixels\n        this.modRightPx = 0; // Right modifier pixels\n        this.totalLeftPx = 0; // Total left pixels\n        this.totalRightPx = 0; // Total right pixels\n        this.tContexts = []; // Parent array of tick contexts\n        this.width = 0;\n        this.formatterMetrics = {\n            // The freedom of a tickcontext is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n        };\n    }\n    getTickID() {\n        return this.tickID;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        this.xBase = x;\n        this.xOffset = 0;\n        return this;\n    }\n    getXBase() {\n        return this.xBase;\n    } // use of xBase and xOffset is optional, avoids offset creep\n    setXBase(xBase) {\n        this.xBase = xBase;\n        this.x = xBase + this.xOffset;\n    }\n    getXOffset() {\n        return this.xOffset;\n    }\n    setXOffset(xOffset) {\n        this.xOffset = xOffset;\n        this.x = this.xBase + xOffset;\n    }\n    getWidth() {\n        return this.width + this.padding * 2;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    getMaxTicks() {\n        return this.maxTicks;\n    }\n    getMinTicks() {\n        return this.minTicks;\n    }\n    getMaxTickable() {\n        return this.maxTickable;\n    }\n    getMinTickable() {\n        return this.minTickable;\n    }\n    getTickables() {\n        return this.tickables;\n    }\n    /**\n     * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n     *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n     * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n     */\n    getTickableForVoice(voiceIndex) {\n        return this.tickablesByVoice[voiceIndex];\n    }\n    getTickablesByVoice() {\n        return this.tickablesByVoice;\n    }\n    getCenterAlignedTickables() {\n        return this.tickables.filter((tickable) => tickable.isCenterAligned());\n    }\n    /** Gets widths context, note and left/right modifiers for formatting. */\n    getMetrics() {\n        const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;\n        return {\n            width, // Width of largest tickable in context\n            glyphPx, // Width of largest glyph (note head)\n            notePx, // Width of notehead + stem\n            leftDisplacedHeadPx, // Left modifiers\n            rightDisplacedHeadPx, // Right modifiers\n            modLeftPx,\n            modRightPx,\n            totalLeftPx,\n            totalRightPx,\n        };\n    }\n    getCurrentTick() {\n        return this.currentTick;\n    }\n    setCurrentTick(tick) {\n        this.currentTick = tick;\n        this.preFormatted = false;\n    }\n    addTickable(tickable, voiceIndex) {\n        if (!tickable) {\n            throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n        }\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            if (ticks.greaterThan(this.maxTicks)) {\n                this.maxTicks = ticks.clone();\n                this.maxTickable = tickable;\n            }\n            if (this.minTicks === undefined) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n            else if (ticks.lessThan(this.minTicks)) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n        }\n        tickable.setTickContext(this);\n        this.tickables.push(tickable);\n        this.tickablesByVoice[voiceIndex !== null && voiceIndex !== void 0 ? voiceIndex : 0] = tickable;\n        this.preFormatted = false;\n        return this;\n    }\n    preFormat() {\n        var _a;\n        if (this.preFormatted)\n            return this;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            tickable.preFormat();\n            const metrics = tickable.getMetrics();\n            // Maintain max displaced head pixels from all tickables in the context\n            this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n            this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n            // Maintain the widest note for all tickables in the context\n            this.notePx = Math.max(this.notePx, metrics.notePx);\n            // Maintain the widest note head\n            this.glyphPx = Math.max(this.glyphPx, (_a = metrics.glyphWidth) !== null && _a !== void 0 ? _a : 0);\n            // Total modifier shift\n            this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n            this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n            // Total shift\n            this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n            this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n            // Recalculate the tick context total width\n            this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n        }\n        return this;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return this;\n        this.postFormatted = true;\n        return this;\n    }\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Beam } from './beam';\nimport { Fraction } from './fraction';\nimport { Metrics } from './metrics';\nimport { ModifierContext } from './modifiercontext';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { isNote, isStaveNote } from './typeguard';\nimport { defined, log, midLine, RuntimeError, sumArray } from './util';\nimport { Voice } from './voice';\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts(voices, makeContext, addToContext) {\n    if (voices.length === 0)\n        return {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n    // Initialize tick maps.\n    const tickToContextMap = {};\n    const tickList = [];\n    const contexts = [];\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n    // For each voice, extract notes and create a context for every\n    // new tick that hasn't been seen before.\n    voices.forEach((voice, voiceIndex) => {\n        // Use resolution multiplier as denominator so that no additional expansion\n        // of fractional tick values is needed.\n        const ticksUsed = new Fraction(0, resolutionMultiplier);\n        voice.getTickables().forEach((tickable) => {\n            const integerTicks = ticksUsed.numerator;\n            // If we have no tick context for this tick, create one.\n            if (!tickToContextMap[integerTicks]) {\n                const newContext = makeContext({ tickID: integerTicks });\n                contexts.push(newContext);\n                tickToContextMap[integerTicks] = newContext;\n                // Maintain a list of unique integerTicks.\n                tickList.push(integerTicks);\n            }\n            // Add this tickable to the TickContext.\n            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n            ticksUsed.add(tickable.getTicks());\n        });\n    });\n    return {\n        map: tickToContextMap,\n        array: contexts,\n        list: tickList.sort((a, b) => a - b),\n        resolutionMultiplier,\n    };\n}\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Formatter.DEBUG)\n        log('VexFlow.Formatter', args);\n}\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\n    // If no valid next note group, nextRestLine is same as current.\n    let nextRestLine = currRestLine;\n    // Start with the next note and keep going until we find a valid non-rest note group.\n    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n        const note = notes[noteIndex];\n        if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n            nextRestLine = note.getLineForRest();\n            break;\n        }\n    }\n    // Locate the mid point between two lines.\n    if (compare && currRestLine !== nextRestLine) {\n        const top = Math.max(currRestLine, nextRestLine);\n        const bot = Math.min(currRestLine, nextRestLine);\n        nextRestLine = midLine(top, bot);\n    }\n    return nextRestLine;\n}\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n    /**\n     * Helper function to layout \"notes\" one after the other without\n     * regard for proportions. Useful for tests and debugging.\n     */\n    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\n        notes.reduce((accumulator, note) => {\n            note.addToModifierContext(new ModifierContext());\n            const tick = new TickContext().addTickable(note).preFormat();\n            const metrics = tick.getMetrics();\n            tick.setX(accumulator + metrics.totalLeftPx);\n            return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n        }, x);\n    }\n    /** Helper function to plot formatter debug info. */\n    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\n        var _a, _b;\n        options = Object.assign({ stavePadding: Metrics.get('Stave.padding') }, options);\n        const x = xPos + options.stavePadding;\n        const contextGaps = formatter.contextGaps;\n        function stroke(x1, x2, color) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(1);\n            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n        }\n        ctx.save();\n        ctx.setFont(Metrics.get('fontFamily'), 8);\n        contextGaps.gaps.forEach((gap) => {\n            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n            ctx.setFillStyle('green');\n            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n        });\n        ctx.setFillStyle('red');\n        ctx.fillText(`Loss: ${((_a = formatter.totalCost) !== null && _a !== void 0 ? _a : 0).toFixed(2)} Shift: ${((_b = formatter.totalShift) !== null && _b !== void 0 ? _b : 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\n        ctx.restore();\n    }\n    /**\n     * Helper function to format and draw a single voice. Returns a bounding\n     * box for the notation.\n     * @param ctx  the rendering context\n     * @param stave the stave to which to draw (`Stave` or `TabStave`)\n     * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n     * @param params one of below:\n     *    * Setting `autoBeam` only `(context, stave, notes, true)` or\n     *      `(ctx, stave, notes, {autoBeam: true})`\n     *    * Setting `alignRests` a struct is needed `(context, stave, notes, {alignRests: true})`\n     *    * Setting both a struct is needed `(context, stave, notes, {\n     *      autoBeam: true, alignRests: true})`\n     *    * `autoBeam` automatically generates beams for the notes.\n     *    * `alignRests` aligns rests with nearby notes.\n     */\n    static FormatAndDraw(ctx, stave, notes, params) {\n        let options = {\n            autoBeam: false,\n            alignRests: false,\n        };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        else if (typeof params === 'boolean') {\n            options.autoBeam = params;\n        }\n        // Start by creating a voice and adding all the notes to it.\n        const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Then create beams, if requested.\n        const beams = options.autoBeam ? Beam.applyAndGetBeams(voice) : [];\n        // Instantiate a `Formatter` and format the notes.\n        new Formatter()\n            .joinVoices([voice]) // , { alignRests: options.alignRests })\n            .formatToStave([voice], stave, { alignRests: options.alignRests, stave });\n        // Render the voice and beams to the stave.\n        voice.setStave(stave).draw(ctx, stave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Return the bounding box of the voice.\n        return voice.getBoundingBox();\n    }\n    /**\n     * Helper function to format and draw aligned tab and stave notes in two\n     * separate staves.\n     * @param ctx the rendering context\n     * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n     * @param stave a `Stave` instance on which to render `Note`s.\n     * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n     * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n     * @param autoBeam automatically generate beams.\n     * @param params a configuration object:\n     *    * `autoBeam` automatically generates beams for the notes.\n     *    * `alignRests` aligns rests with nearby notes.\n     */\n    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autoBeam, params) {\n        let opts = {\n            autoBeam,\n            alignRests: false,\n        };\n        if (typeof params === 'object') {\n            opts = Object.assign(Object.assign({}, opts), params);\n        }\n        else if (typeof params === 'boolean') {\n            opts.autoBeam = params;\n        }\n        // Create a `4/4` voice for `notes`.\n        const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Create a `4/4` voice for `tabnotes`.\n        const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n        // Then create beams, if requested.\n        const beams = opts.autoBeam ? Beam.applyAndGetBeams(notevoice) : [];\n        // Instantiate a `Formatter` and align tab and stave notes.\n        new Formatter()\n            .joinVoices([notevoice]) // , { alignRests: opts.alignRests })\n            .joinVoices([tabvoice])\n            .formatToStave([notevoice, tabvoice], stave, { alignRests: opts.alignRests });\n        // Render voices and beams to staves.\n        notevoice.draw(ctx, stave);\n        tabvoice.draw(ctx, tabstave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Draw a connector between tab and note staves.\n        new StaveConnector(stave, tabstave).setContext(ctx).draw();\n    }\n    /**\n     * Automatically set the vertical position of rests based on previous/next note positions.\n     * @param tickables an array of Tickables.\n     * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n     * @param alignTuplets If `false`, ignores tuplets.\n     */\n    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\n        tickables.forEach((currTickable, index) => {\n            if (isStaveNote(currTickable) && currTickable.isRest()) {\n                if (currTickable.getTuplet() && !alignTuplets) {\n                    return;\n                }\n                // If activated rests not on default can be rendered as specified.\n                const line = currTickable.getLineForRest();\n                if (line !== 3) {\n                    return;\n                }\n                if (alignAllNotes || currTickable.getBeam()) {\n                    // Align rests with previous/next notes.\n                    const props = currTickable.getKeyProps()[0];\n                    if (index === 0) {\n                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n                    }\n                    else if (index > 0 && index < tickables.length) {\n                        // If previous tickable is a rest, use its line number.\n                        const prevTickable = tickables[index - 1];\n                        if (isStaveNote(prevTickable)) {\n                            if (prevTickable.isRest()) {\n                                props.line = prevTickable.getKeyProps()[0].line;\n                            }\n                            else {\n                                const restLine = prevTickable.getLineForRest();\n                                // Get the rest line for next valid non-rest note group.\n                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n                            }\n                        }\n                    }\n                    currTickable.setKeyLine(0, props.line);\n                }\n            }\n        });\n    }\n    constructor(options) {\n        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: Tables.SOFTMAX_FACTOR, maxIterations: 5 }, options);\n        this.justifyWidth = 0;\n        this.totalCost = 0;\n        this.totalShift = 0;\n        this.durationStats = {};\n        // Minimum width required to render all the notes in the voices.\n        this.minTotalWidth = 0;\n        // This is set to `true` after `minTotalWidth` is calculated.\n        this.hasMinTotalWidth = false;\n        // Arrays of tick and modifier contexts.\n        this.tickContexts = {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n        this.modifierContexts = [];\n        // Gaps between contexts, for free movement of notes post\n        // formatting.\n        this.contextGaps = {\n            total: 0,\n            gaps: [],\n        };\n        this.voices = [];\n        this.lossHistory = [];\n    }\n    /**\n     * Find all the rests in each of the `voices` and align them to neighboring notes.\n     *\n     * @param voices\n     * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n     */\n    alignRests(voices, alignAllNotes) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format rests');\n        }\n        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n    }\n    /**\n     * Estimate the width required to render 'voices'.  This is done by:\n     * 1. Sum the widths of all the tick contexts\n     * 2. Estimate the padding.\n     * The latter is done by calculating the padding 3 different ways, and taking the\n     * greatest value:\n     * 1. the padding required for unaligned notes in different voices\n     * 2. the padding based on the stddev of the tickable widths\n     * 3. the padding based on the stddev of the tickable durations.\n     *\n     * The last 2 quantities estimate a 'width entropy', where notes might need more\n     * room than the proportional formatting gives them.  A measure of all same duration\n     * and width will need no extra padding, and all these quantities will be\n     * zero in that case.\n     *\n     * Note: joinVoices has to be called before calling preCalculateMinTotalWidth.\n     *\n     * @param voices the voices that contain the notes\n     * @returns the estimated width in pixels\n     */\n    preCalculateMinTotalWidth(voices) {\n        const unalignedPadding = Metrics.get('Stave.unalignedNotePadding');\n        // Calculate additional padding based on 3 methods:\n        // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n        let unalignedCtxCount = 0;\n        let wsum = 0;\n        let dsum = 0;\n        const widths = [];\n        const durations = [];\n        // Cache results.\n        if (this.hasMinTotalWidth)\n            return this.minTotalWidth;\n        // Create tick contexts.\n        if (!voices) {\n            throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n        }\n        this.createTickContexts(voices);\n        // eslint-disable-next-line\n        const { list: contextList, map: contextMap } = this.tickContexts;\n        this.minTotalWidth = 0;\n        // Go through each tick context and calculate total width,\n        // and also accumulate values used in padding hints\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            // If this TC doesn't have all the voices on it, it's unaligned.\n            // so increment the unaligned padding accumulator\n            if (context.getTickables().length < voices.length) {\n                unalignedCtxCount += 1;\n            }\n            // Calculate the 'width entropy' over all the Tickables.\n            context.getTickables().forEach((t) => {\n                wsum += t.getMetrics().width;\n                dsum += t.getTicks().value();\n                widths.push(t.getMetrics().width);\n                durations.push(t.getTicks().value());\n            });\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n        });\n        this.hasMinTotalWidth = true;\n        // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n        const davg = dsum / durations.length;\n        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n        // Find max of 3 methods pad the width with that\n        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n        const unalignedPad = unalignedPadding * unalignedCtxCount;\n        return this.minTotalWidth + Math.max(unalignedPad, padmax);\n    }\n    /**\n     * Get minimum width required to render all voices. Either `format` or\n     * `preCalculateMinTotalWidth` must be called before this method.\n     */\n    getMinTotalWidth() {\n        if (!this.hasMinTotalWidth) {\n            throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n        }\n        return this.minTotalWidth;\n    }\n    /** Calculate the resolution multiplier for `voices`. */\n    static getResolutionMultiplier(voices) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format');\n        }\n        const totalTicks = voices[0].getTotalTicks();\n        const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n            if (!voice.getTotalTicks().equals(totalTicks)) {\n                throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n            }\n            if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n                throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n            }\n            return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n        }, 1);\n        return resolutionMultiplier;\n    }\n    /** Create a `ModifierContext` for each tick in `voices`. */\n    createModifierContexts(voices) {\n        if (voices.length === 0)\n            return;\n        const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n        // Initialize tick maps.\n        const tickToContextMap = new Map();\n        const contexts = [];\n        // For each voice, extract notes and create a context for every\n        // new tick that hasn't been seen before.\n        voices.forEach((voice) => {\n            // Use resolution multiplier as denominator so that no additional expansion\n            // of fractional tick values is needed.\n            const ticksUsed = new Fraction(0, resolutionMultiplier);\n            voice.getTickables().forEach((tickable) => {\n                const integerTicks = ticksUsed.numerator;\n                let staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                // If we have no tick context for this tick, create one.\n                if (!staveTickToContextMap) {\n                    tickToContextMap.set(tickable.getStave(), {});\n                    staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                }\n                if (!(staveTickToContextMap ? staveTickToContextMap[integerTicks] : undefined)) {\n                    const newContext = new ModifierContext();\n                    contexts.push(newContext);\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    staveTickToContextMap[integerTicks] = newContext;\n                }\n                // Add this tickable to the TickContext.\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tickable.addToModifierContext(staveTickToContextMap[integerTicks]);\n                ticksUsed.add(tickable.getTicks());\n            });\n        });\n        this.modifierContexts.push({\n            map: tickToContextMap,\n            array: contexts,\n            resolutionMultiplier,\n        });\n    }\n    /**\n     * Create a `TickContext` for each tick in `voices`. Also calculate the\n     * total number of ticks in voices.\n     */\n    createTickContexts(voices) {\n        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\n        const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);\n        this.tickContexts = contexts;\n        const contextArray = this.tickContexts.array;\n        contextArray.forEach((context) => {\n            context.tContexts = contextArray;\n        });\n        return contexts;\n    }\n    /**\n     * Get the AlignmentContexts of TickContexts that were created by createTickContexts.\n     * Returns undefined if createTickContexts has not yet been run.\n     */\n    getTickContexts() {\n        return this.tickContexts;\n    }\n    /**\n     * This is the core formatter logic. Format voices and justify them\n     * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n     * that can't retrieve widths without a canvas. This method sets the `x` positions\n     * of all the tickables/notes in the formatter.\n     */\n    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {\n        // Initialize context maps.\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n        }\n        const { list: contextList, map: contextMap } = contexts;\n        // Reset loss history for evaluator.\n        this.lossHistory = [];\n        // If voices and a stave were provided, set the Stave for each voice\n        // and preFormat to apply Y values to the notes;\n        if (voicesParam && stave) {\n            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n        }\n        // Now distribute the ticks to each tick context, and assign them their\n        // own X positions.\n        let x = 0;\n        let shift = 0;\n        this.minTotalWidth = 0;\n        let totalTicks = 0;\n        // Pass 1: Give each note maximum width requested by context.\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            // Make sure that all tickables in this context have calculated their\n            // space requirements.\n            context.preFormat();\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n            const maxTicks = context.getMaxTicks().value();\n            totalTicks += maxTicks;\n            const metrics = context.getMetrics();\n            x = x + shift + metrics.totalLeftPx;\n            context.setX(x);\n            // Calculate shift for the next tick.\n            shift = width - metrics.totalLeftPx;\n        });\n        // Use softmax based on all notes across all staves. (options.globalSoftmax)\n        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));\n        const expTicksUsed = sumArray(contextList.map(exp));\n        this.minTotalWidth = x + shift;\n        this.hasMinTotalWidth = true;\n        // No justification needed. End formatting.\n        if (justifyWidth <= 0)\n            return this.evaluate();\n        // Start justification. Subtract the right extra pixels of the final context because the formatter\n        // justifies based on the context's X position, which is the left-most part of the note head.\n        const firstContext = contextMap[contextList[0]];\n        const lastContext = contextMap[contextList[contextList.length - 1]];\n        // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n        // the softmax of the ticks.\n        function calculateIdealDistances(adjustedJustifyWidth) {\n            const distances = contextList.map((tick, i) => {\n                const context = contextMap[tick];\n                const voices = context.getTickablesByVoice();\n                let backTickable;\n                if (i > 0) {\n                    const prevContext = contextMap[contextList[i - 1]];\n                    // Go through each tickable and search backwards for another tickable\n                    // in the same voice. If found, use that duration (ticks) to calculate\n                    // the expected distance.\n                    for (let j = i - 1; j >= 0; j--) {\n                        const backTick = contextMap[contextList[j]];\n                        const backVoices = backTick.getTickablesByVoice();\n                        // Look for matching voices between tick contexts.\n                        const matchingVoices = [];\n                        Object.keys(voices).forEach((v) => {\n                            if (backVoices[v]) {\n                                matchingVoices.push(v);\n                            }\n                        });\n                        if (matchingVoices.length > 0) {\n                            // Found matching voices, get largest duration\n                            let maxTicks = 0;\n                            let maxNegativeShiftPx = Infinity;\n                            let expectedDistance = 0;\n                            matchingVoices.forEach((v) => {\n                                const ticks = backVoices[v].getTicks().value();\n                                if (ticks > maxTicks) {\n                                    backTickable = backVoices[v];\n                                    maxTicks = ticks;\n                                }\n                                // Calculate the limits of the shift based on modifiers, etc.\n                                const thisTickable = voices[v];\n                                const insideLeftEdge = thisTickable.getX() -\n                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n                                const backMetrics = backVoices[v].getMetrics();\n                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n                                // Don't allow shifting if notes in the same voice can collide\n                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n                            });\n                            // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n                            // so that two different tick contexts don't align across staves.\n                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\n                            // Calculate the expected distance of the current context from the last matching tickable. The\n                            // distance is scaled down by the softmax for the voice.\n                            if (globalSoftmax) {\n                                const t = totalTicks;\n                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;\n                            }\n                            else if (typeof backTickable !== 'undefined') {\n                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n                            }\n                            return {\n                                expectedDistance,\n                                maxNegativeShiftPx,\n                                fromTickable: backTickable,\n                            };\n                        }\n                    }\n                }\n                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n            });\n            return distances;\n        }\n        function shiftToIdealDistances(idealDistances) {\n            // Distribute ticks to the contexts based on the calculated distance error.\n            const centerX = adjustedJustifyWidth / 2;\n            let spaceAccum = 0;\n            contextList.forEach((tick, index) => {\n                const context = contextMap[tick];\n                if (index > 0) {\n                    const contextX = context.getX();\n                    const ideal = idealDistances[index];\n                    const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n                    let negativeShiftPx = 0;\n                    if (errorPx > 0) {\n                        spaceAccum += errorPx;\n                    }\n                    else if (errorPx < 0) {\n                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n                        spaceAccum += -negativeShiftPx;\n                    }\n                    context.setX(contextX + spaceAccum);\n                }\n                // Move center aligned tickables to middle\n                context.getCenterAlignedTickables().forEach((tickable) => {\n                    tickable.setCenterXShift(centerX - context.getX());\n                });\n            });\n            return lastContext.getX() - firstContext.getX();\n        }\n        const adjustedJustifyWidth = justifyWidth -\n            lastContext.getMetrics().notePx -\n            lastContext.getMetrics().totalRightPx -\n            firstContext.getMetrics().totalLeftPx;\n        const configMinPadding = Metrics.get('Stave.endPaddingMin');\n        const configMaxPadding = Metrics.get('Stave.endPaddingMax');\n        const leftPadding = Metrics.get('Stave.padding');\n        let targetWidth = adjustedJustifyWidth;\n        const distances = calculateIdealDistances(targetWidth);\n        let actualWidth = shiftToIdealDistances(distances);\n        // Just one context. Done formatting.\n        if (contextList.length === 1)\n            return 0;\n        const calcMinDistance = (targetWidth, distances) => {\n            let mdCalc = targetWidth / 2;\n            if (distances.length > 1) {\n                for (let di = 1; di < distances.length; ++di) {\n                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n                }\n            }\n            return mdCalc;\n        };\n        const minDistance = calcMinDistance(targetWidth, distances);\n        // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\n        // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\n        // existing visual regression tests.\n        const paddingMaxCalc = (curTargetWidth) => {\n            let lastTickablePadding = 0;\n            const lastTickable = lastContext && lastContext.getMaxTickable();\n            if (lastTickable) {\n                const voice = lastTickable.getVoice();\n                // If the number of actual ticks in the measure <> configured ticks, right-justify\n                // because the softmax won't yield the correct value\n                if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {\n                    return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n                }\n                const tickWidth = lastTickable.getWidth();\n                lastTickablePadding =\n                    voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);\n            }\n            return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;\n        };\n        let paddingMax = paddingMaxCalc(targetWidth);\n        let paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n        const maxX = adjustedJustifyWidth - paddingMin;\n        let iterations = maxIterations;\n        // Adjust justification width until the right margin is as close as possible to the calculated padding,\n        // without going over\n        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n            targetWidth -= actualWidth - maxX;\n            paddingMax = paddingMaxCalc(targetWidth);\n            paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n            iterations--;\n        }\n        this.justifyWidth = justifyWidth;\n        return this.evaluate();\n    }\n    /** Calculate the total cost of this formatting decision. */\n    evaluate() {\n        const contexts = this.tickContexts;\n        const justifyWidth = this.justifyWidth;\n        // Calculate available slack per tick context. This works out how much freedom\n        // to move a context has in either direction, without affecting other notes.\n        this.contextGaps = { total: 0, gaps: [] };\n        contexts.list.forEach((tick, index) => {\n            if (index === 0)\n                return;\n            const prevTick = contexts.list[index - 1];\n            const prevContext = contexts.map[prevTick];\n            const context = contexts.map[tick];\n            const prevMetrics = prevContext.getMetrics();\n            const currMetrics = context.getMetrics();\n            // Calculate X position of right edge of previous note\n            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n            // Calculate X position of left edge of current note\n            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n            const gap = insideLeftEdge - insideRightEdge;\n            this.contextGaps.total += gap;\n            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n            // Tell the tick contexts how much they can reposition themselves.\n            context.getFormatterMetrics().freedom.left = gap;\n            prevContext.getFormatterMetrics().freedom.right = gap;\n        });\n        // Calculate mean distance in each voice for each duration type, then calculate\n        // how far each note is from the mean.\n        this.durationStats = {};\n        const durationStats = this.durationStats;\n        function updateStats(duration, space) {\n            const stats = durationStats[duration];\n            if (stats === undefined) {\n                durationStats[duration] = { mean: space, count: 1 };\n            }\n            else {\n                stats.count += 1;\n                stats.mean = (stats.mean + space) / 2;\n            }\n        }\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note, i, notes) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getMetrics();\n                const formatterMetrics = note.getFormatterMetrics();\n                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n                let space = 0;\n                if (i < notes.length - 1) {\n                    const rightNote = notes[i + 1];\n                    const rightMetrics = rightNote.getMetrics();\n                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n                    space = rightNoteEdge - leftNoteEdge;\n                    formatterMetrics.space.used = rightNote.getX() - note.getX();\n                    rightNote.getFormatterMetrics().freedom.left = space;\n                }\n                else {\n                    space = justifyWidth - leftNoteEdge;\n                    formatterMetrics.space.used = justifyWidth - note.getX();\n                }\n                formatterMetrics.freedom.right = space;\n                updateStats(duration, formatterMetrics.space.used);\n            });\n        });\n        // Calculate how much each note deviates from the mean. Loss function is square\n        // root of the sum of squared deviations.\n        let totalDeviation = 0;\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getFormatterMetrics();\n                metrics.space.mean = durationStats[duration].mean;\n                metrics.duration = duration;\n                metrics.iterations += 1;\n                metrics.space.deviation = metrics.space.used - metrics.space.mean;\n                totalDeviation += Math.pow(metrics.space.deviation, 2);\n            });\n        });\n        this.totalCost = Math.sqrt(totalDeviation);\n        this.lossHistory.push(this.totalCost);\n        return this.totalCost;\n    }\n    /**\n     * Run a single iteration of rejustification. At a high level, this method calculates\n     * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n     * attempt to reduce the cost. You can call this method multiple times until it finds\n     * and oscillates around a global minimum.\n     * @param options[alpha] the \"learning rate\" for the formatter. It determines how much of a shift\n     * the formatter should make based on its cost function.\n     */\n    tune(options) {\n        var _a;\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            return 0;\n        }\n        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\n        // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n        // on adjacent tickcontexts.\n        function move(current, shift, prev, next) {\n            current.setX(current.getX() + shift);\n            current.getFormatterMetrics().freedom.left += shift;\n            current.getFormatterMetrics().freedom.right -= shift;\n            if (prev)\n                prev.getFormatterMetrics().freedom.right += shift;\n            if (next)\n                next.getFormatterMetrics().freedom.left -= shift;\n        }\n        let shift = 0;\n        this.totalShift = 0;\n        contexts.list.forEach((tick, index, list) => {\n            const context = contexts.map[tick];\n            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n            move(context, shift, prevContext, nextContext);\n            const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n            if (cost > 0) {\n                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n            }\n            else if (cost < 0) {\n                if (nextContext) {\n                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n                }\n                else {\n                    shift = 0;\n                }\n            }\n            shift *= alpha;\n            this.totalShift += shift;\n        });\n        return this.evaluate();\n    }\n    /**\n     * This is the top-level call for all formatting logic completed\n     * after `x` *and* `y` values have been computed for the notes\n     * in the voices.\n     */\n    postFormat() {\n        this.modifierContexts.forEach((modifierContexts) => {\n            modifierContexts.array.forEach((mc) => mc.postFormat());\n        });\n        this.tickContexts.list.forEach((tick) => {\n            this.tickContexts.map[tick].postFormat();\n        });\n        return this;\n    }\n    /**\n     * Take all `voices` and create `ModifierContext`s out of them. This tells\n     * the formatters that the voices belong on a single stave.\n     */\n    joinVoices(voices) {\n        this.createModifierContexts(voices);\n        this.hasMinTotalWidth = false;\n        return this;\n    }\n    /**\n     * Align rests in voices, justify the contexts, and position the notes\n     * so voices are aligned and ready to render onto the stave. This method\n     * mutates the `x` positions of all tickables in `voices`.\n     *\n     * Voices are full justified to fit in `justifyWidth` pixels.\n     *\n     * Set `options.context` to the rendering context. Set `options.alignRests`\n     * to true to enable rest alignment.\n     */\n    format(voices, justifyWidth, options) {\n        const opts = Object.assign({ alignRests: false }, options);\n        this.voices = voices;\n        const softmaxFactor = this.formatterOptions.softmaxFactor;\n        if (softmaxFactor) {\n            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n        }\n        this.alignRests(voices, opts.alignRests);\n        this.createTickContexts(voices);\n        this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n        // Only postFormat if a stave was supplied for y value formatting\n        if (opts.stave)\n            this.postFormat();\n        return this;\n    }\n    // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\n    formatToStave(voices, stave, optionsParam) {\n        const options = Object.assign({ context: stave.getContext() }, optionsParam);\n        // eslint-disable-next-line\n        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n        L('Formatting voices to width: ', justifyWidth);\n        return this.format(voices, justifyWidth, options);\n    }\n    getTickContext(tick) {\n        var _a;\n        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\n    }\n}\n// To enable logging for this class. Set `VexFlow.Formatter.DEBUG` to `true`.\nFormatter.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.numNotes must be set.\n *\n * @constructor\n * @param {Array.<VexFlow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   numNotes: fit this many notes into...\n *   notesOccupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of numNotes : notesOccupied.\n *       numNotes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notesOccupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between numNotes and\n *     notesOccupied is greater than 1.\n *\n *   yOffset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Glyphs } from './glyphs';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var TupletLocation;\n(function (TupletLocation) {\n    TupletLocation[TupletLocation[\"BOTTOM\"] = -1] = \"BOTTOM\";\n    TupletLocation[TupletLocation[\"TOP\"] = 1] = \"TOP\";\n})(TupletLocation || (TupletLocation = {}));\nexport class Tuplet extends Element {\n    static get CATEGORY() {\n        return Category.Tuplet;\n    }\n    static get LOCATION_TOP() {\n        return TupletLocation.TOP;\n    }\n    static get LOCATION_BOTTOM() {\n        return TupletLocation.BOTTOM;\n    }\n    static get NESTING_OFFSET() {\n        return 15;\n    }\n    constructor(notes, options = {}) {\n        super();\n        if (!notes || !notes.length) {\n            throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n        }\n        this.options = options;\n        this.notes = notes;\n        this.numNotes = this.options.numNotes !== undefined ? this.options.numNotes : notes.length;\n        this.notesOccupied = this.options.notesOccupied || 2;\n        if (this.options.bracketed !== undefined) {\n            this.bracketed = this.options.bracketed;\n        }\n        else {\n            this.bracketed = notes.some((note) => !note.hasBeam());\n        }\n        this.ratioed =\n            this.options.ratioed !== undefined ? this.options.ratioed : Math.abs(this.notesOccupied - this.numNotes) > 1;\n        this.textElement = new Element('Tuplet');\n        this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n        Formatter.AlignRestsToNotes(notes, true, true);\n        this.resolveGlyphs();\n        this.attach();\n    }\n    attach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.setTuplet(this);\n        }\n    }\n    detach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.resetTuplet(this);\n        }\n    }\n    /**\n     * Set whether or not the bracket is drawn.\n     */\n    setBracketed(bracketed) {\n        this.bracketed = !!bracketed;\n        return this;\n    }\n    /**\n     * Set whether or not the ratio is shown.\n     */\n    setRatioed(ratioed) {\n        this.ratioed = !!ratioed;\n        return this;\n    }\n    /**\n     * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n     */\n    setTupletLocation(location) {\n        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n            // eslint-disable-next-line\n            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n            location = Tuplet.LOCATION_TOP;\n        }\n        this.location = location;\n        return this;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    getNoteCount() {\n        return this.numNotes;\n    }\n    getNotesOccupied() {\n        return this.notesOccupied;\n    }\n    setNotesOccupied(notes) {\n        this.detach();\n        this.notesOccupied = notes;\n        this.resolveGlyphs();\n        this.attach();\n    }\n    resolveGlyphs() {\n        let numerator = '';\n        let denominator = '';\n        let n = this.numNotes;\n        while (n >= 1) {\n            numerator = String.fromCharCode(0xe880 /* tuplet0 */ + (n % 10)) + numerator;\n            n = Math.floor(n / 10);\n        }\n        if (this.ratioed) {\n            n = this.notesOccupied;\n            while (n >= 1) {\n                denominator = String.fromCharCode(0xe880 /* tuplet0 */ + (n % 10)) + denominator;\n                n = Math.floor(n / 10);\n            }\n            denominator = Glyphs.tupletColon + denominator;\n        }\n        this.textElement.setText(numerator + denominator);\n    }\n    // determine how many tuplets are nested within this tuplet\n    // on the same side (above/below), to calculate a y\n    // offset for this tuplet:\n    getNestedTupletCount() {\n        const location = this.location;\n        const firstNote = this.notes[0];\n        let maxTupletCount = countTuplets(firstNote, location);\n        let minTupletCount = countTuplets(firstNote, location);\n        // Count the tuplets that are on the same side (above/below)\n        // as this tuplet:\n        function countTuplets(note, location) {\n            return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n        }\n        this.notes.forEach((note) => {\n            const tupletCount = countTuplets(note, location);\n            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n        });\n        return maxTupletCount - minTupletCount;\n    }\n    // determine the y position of the tuplet:\n    getYPosition() {\n        var _a;\n        // offset the tuplet for any nested tuplets between\n        // it and the notes:\n        const nestedTupletYOffset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n        // offset the tuplet for any manual yOffset:\n        const yOffset = (_a = this.options.yOffset) !== null && _a !== void 0 ? _a : 0;\n        // now iterate through the notes and find our highest\n        // or lowest locations, to form a base yPosition\n        const firstNote = this.notes[0];\n        let yPosition;\n        if (this.location === Tuplet.LOCATION_TOP) {\n            yPosition = firstNote.checkStave().getYForLine(0) - 1.5 * Tables.STAVE_LINE_DISTANCE;\n            // check modifiers above note to see if they will collide with tuplet beam\n            for (let i = 0; i < this.notes.length; ++i) {\n                const note = this.notes[i];\n                let modLines = 0;\n                const mc = note.getModifierContext();\n                if (mc) {\n                    modLines = Math.max(modLines, mc.getState().topTextLine);\n                }\n                const modY = note.getYForTopText(modLines) - 2 * Tables.STAVE_LINE_DISTANCE;\n                if (note.hasStem() || note.isRest()) {\n                    const topY = note.getStemDirection() === Stem.UP\n                        ? note.getStemExtents().topY - Tables.STAVE_LINE_DISTANCE\n                        : note.getStemExtents().baseY - 2 * Tables.STAVE_LINE_DISTANCE;\n                    yPosition = Math.min(topY, yPosition);\n                    if (modLines > 0) {\n                        yPosition = Math.min(modY, yPosition);\n                    }\n                }\n            }\n        }\n        else {\n            let lineCheck = 4; // tuplet default on line 4\n            // check modifiers below note to see if they will collide with tuplet beam\n            this.notes.forEach((nn) => {\n                const mc = nn.getModifierContext();\n                if (mc) {\n                    lineCheck = Math.max(lineCheck, mc.getState().textLine + 1);\n                }\n            });\n            yPosition = firstNote.checkStave().getYForLine(lineCheck) + 2 * Tables.STAVE_LINE_DISTANCE;\n            for (let i = 0; i < this.notes.length; ++i) {\n                if (this.notes[i].hasStem() || this.notes[i].isRest()) {\n                    const bottomY = this.notes[i].getStemDirection() === Stem.UP\n                        ? this.notes[i].getStemExtents().baseY + 2 * Tables.STAVE_LINE_DISTANCE\n                        : this.notes[i].getStemExtents().topY + Tables.STAVE_LINE_DISTANCE;\n                    if (bottomY > yPosition) {\n                        yPosition = bottomY;\n                    }\n                }\n            }\n        }\n        return yPosition + nestedTupletYOffset + yOffset;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        let xPos = 0;\n        let yPos = 0;\n        this.setRendered();\n        // determine x value of left bound of tuplet\n        const firstNote = this.notes[0];\n        const lastNote = this.notes[this.notes.length - 1];\n        if (!this.bracketed) {\n            xPos = firstNote.getStemX();\n            this.width = lastNote.getStemX() - xPos;\n        }\n        else {\n            xPos = firstNote.getTieLeftX() - 5;\n            this.width = lastNote.getTieRightX() - xPos + 5;\n        }\n        // determine y value for tuplet\n        yPos = this.getYPosition();\n        const notationCenterX = xPos + this.width / 2;\n        const notationStartX = notationCenterX - this.textElement.getWidth() / 2;\n        // draw bracket if the tuplet is not beamed\n        if (this.bracketed) {\n            const lineWidth = this.width / 2 - this.textElement.getWidth() / 2 - 5;\n            // only draw the bracket if it has positive length\n            if (lineWidth > 0) {\n                ctx.fillRect(xPos, yPos, lineWidth, 1);\n                ctx.fillRect(xPos + this.width / 2 + this.textElement.getWidth() / 2 + 5, yPos, lineWidth, 1);\n                ctx.fillRect(xPos, yPos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n                ctx.fillRect(xPos + this.width, yPos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n            }\n        }\n        // draw text\n        this.textElement.renderText(ctx, notationStartX, yPos + this.textElement.getHeight() / 2);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _Beam_stemDirection, _Beam_ticks, _Beam_yShift, _Beam_breakOnIndexes, _Beam_beamCount, _Beam_unbeamable, _Beam_forcedPartialDirections;\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TupletLocation } from './tuplet';\nimport { Category, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nfunction calculateStemDirection(notes) {\n    let lineSum = 0;\n    notes.forEach((note) => {\n        if (note.keyProps) {\n            note.keyProps.forEach((keyProp) => {\n                lineSum += keyProp.line - 3;\n            });\n        }\n    });\n    if (lineSum >= 0) {\n        return Stem.DOWN;\n    }\n    return Stem.UP;\n}\nfunction getStemSlope(firstNote, lastNote) {\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    const firstStemX = firstNote.getStemX();\n    const lastStemTipY = lastNote.getStemExtents().topY;\n    const lastStemX = lastNote.getStemX();\n    return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\nexport const BEAM_LEFT = 'L';\nexport const BEAM_RIGHT = 'R';\nexport const BEAM_BOTH = 'B';\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n    static get CATEGORY() {\n        return Category.Beam;\n    }\n    /** Get the direction of the beam */\n    getStemDirection() {\n        return __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n    }\n    /**\n     * Get the default beam groups for a provided time signature.\n     * Attempt to guess if the time signature is not found in table.\n     * Currently this is fairly naive.\n     */\n    static getDefaultBeamGroups(timeSig) {\n        if (!timeSig || timeSig === 'c') {\n            timeSig = '4/4';\n        }\n        const defaults = {\n            '1/2': ['1/2'],\n            '2/2': ['1/2'],\n            '3/2': ['1/2'],\n            '4/2': ['1/2'],\n            '1/4': ['1/4'],\n            '2/4': ['1/4'],\n            '3/4': ['1/4'],\n            '4/4': ['1/4'],\n            '1/8': ['1/8'],\n            '2/8': ['2/8'],\n            '3/8': ['3/8'],\n            '4/8': ['2/8'],\n            '1/16': ['1/16'],\n            '2/16': ['2/16'],\n            '3/16': ['3/16'],\n            '4/16': ['2/16'],\n        };\n        const groups = defaults[timeSig];\n        if (groups === undefined) {\n            // If no beam groups found, naively determine\n            // the beam groupings from the time signature\n            const beatTotal = parseInt(timeSig.split('/')[0], 10);\n            const beatValue = parseInt(timeSig.split('/')[1], 10);\n            const tripleMeter = beatTotal % 3 === 0;\n            if (tripleMeter) {\n                return [new Fraction(3, beatValue)];\n            }\n            else if (beatValue > 4) {\n                return [new Fraction(2, beatValue)];\n            }\n            else if (beatValue <= 4) {\n                return [new Fraction(1, beatValue)];\n            }\n        }\n        else {\n            return groups.map((group) => new Fraction().parse(group));\n        }\n        return [new Fraction(1, 4)];\n    }\n    /**\n     * A helper function to automatically build basic beams for a voice. For more\n     * complex auto-beaming use `Beam.generateBeams()`.\n     * @param voice the voice to generate the beams for\n     * @param stemDirection a stem direction to apply to the entire voice\n     * @param groups an array of `Fraction` representing beat groupings for the beam\n     */\n    static applyAndGetBeams(voice, stemDirection, groups) {\n        return Beam.generateBeams(voice.getTickables(), { groups, stemDirection });\n    }\n    /**\n     * A helper function to autimatically build beams for a voice with\n     * configuration options.\n     *\n     * Example configuration object:\n     *\n     * ```\n     * config = {\n     *   groups: [new VexFlow.Fraction(2, 8)],\n     *   stemDirection: -1,\n     *   beamRests: true,\n     *   beamMiddleOnly: true,\n     *   showStemlets: false\n     * };\n     * ```\n     * @param notes an array of notes to create the beams for\n     * @param config the configuration object\n     * @param config.stemDirection set to apply the same direction to all notes\n     * @param config.beamRests set to `true` to include rests in the beams\n     * @param config.beamMiddleOnly set to `true` to only beam rests in the middle of the beat\n     * @param config.showStemlets set to `true` to draw stemlets for rests\n     * @param config.maintainStemDirections set to `true` to not apply new stem directions\n     * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n     *\n     */\n    static generateBeams(notes, config = {}) {\n        if (!config.groups || !config.groups.length) {\n            config.groups = [new Fraction(2, 8)];\n        }\n        // Convert beam groups to tick amounts\n        const tickGroups = config.groups.map((group) => {\n            if (!group.multiply) {\n                throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of VexFlow.Fractions');\n            }\n            return group.clone().multiply(Tables.RESOLUTION, 1);\n        });\n        const unprocessedNotes = notes;\n        let currentTickGroup = 0;\n        let noteGroups = [];\n        let currentGroup = [];\n        function getTotalTicks(notes) {\n            return notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n        }\n        function nextTickGroup() {\n            if (tickGroups.length - 1 > currentTickGroup) {\n                currentTickGroup += 1;\n            }\n            else {\n                currentTickGroup = 0;\n            }\n        }\n        function createGroups() {\n            let nextGroup = [];\n            // number of ticks in current group\n            let currentGroupTotalTicks = new Fraction(0, 1);\n            unprocessedNotes.forEach((unprocessedNote) => {\n                nextGroup = [];\n                if (unprocessedNote.shouldIgnoreTicks()) {\n                    noteGroups.push(currentGroup);\n                    currentGroup = nextGroup;\n                    return; // Ignore untickables (like bar notes)\n                }\n                currentGroup.push(unprocessedNote);\n                const ticksPerGroup = tickGroups[currentTickGroup].clone();\n                const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n                // Double the amount of ticks in a group, if it's an unbeamable tuplet\n                const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\n                if (unbeamable && unprocessedNote.getTuplet()) {\n                    ticksPerGroup.numerator *= 2;\n                }\n                // If the note that was just added overflows the group tick total\n                if (totalTicks.greaterThan(ticksPerGroup)) {\n                    // If the overflow note can be beamed, start the next group\n                    // with it. Unbeamable notes leave the group overflowed.\n                    if (!unbeamable) {\n                        const note = currentGroup.pop();\n                        if (note)\n                            nextGroup.push(note);\n                    }\n                    noteGroups.push(currentGroup);\n                    // We have overflown, so we're going to next tick group. As we might have\n                    // overflown by more than 1 group, we need to go forward as many times as\n                    // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n                    // in current groups as we go forward.\n                    do {\n                        currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n                        nextTickGroup();\n                    } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n                    currentGroup = nextGroup;\n                }\n                else if (totalTicks.equals(ticksPerGroup)) {\n                    noteGroups.push(currentGroup);\n                    currentGroupTotalTicks = new Fraction(0, 1);\n                    currentGroup = nextGroup;\n                    nextTickGroup();\n                }\n            });\n            // Adds any remainder notes beam\n            if (currentGroup.length > 0) {\n                noteGroups.push(currentGroup);\n            }\n        }\n        function getBeamGroups() {\n            return noteGroups.filter((group) => {\n                if (group.length > 1) {\n                    let beamable = true;\n                    group.forEach((note) => {\n                        if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\n                            beamable = false;\n                        }\n                    });\n                    return beamable;\n                }\n                return false;\n            });\n        }\n        // Splits up groups by Rest\n        function sanitizeGroups() {\n            const sanitizedGroups = [];\n            noteGroups.forEach((group) => {\n                let tempGroup = [];\n                group.forEach((note, index, group) => {\n                    const isFirstOrLast = index === 0 || index === group.length - 1;\n                    const prevNote = group[index - 1];\n                    const breaksOnEachRest = !config.beamRests && note.isRest();\n                    const breaksOnFirstOrLastRest = config.beamRests && config.beamMiddleOnly && note.isRest() && isFirstOrLast;\n                    let breakOnStemChange = false;\n                    if (config.maintainStemDirections && prevNote && !note.isRest() && !prevNote.isRest()) {\n                        const prevDirection = prevNote.getStemDirection();\n                        const currentDirection = note.getStemDirection();\n                        breakOnStemChange = currentDirection !== prevDirection;\n                    }\n                    const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n                    // Determine if the group should be broken at this note\n                    const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n                    if (shouldBreak) {\n                        // Add current group\n                        if (tempGroup.length > 0) {\n                            sanitizedGroups.push(tempGroup);\n                        }\n                        // Start a new group. Include the current note if the group\n                        // was broken up by stem direction, as that note needs to start\n                        // the next group of notes\n                        tempGroup = breakOnStemChange ? [note] : [];\n                    }\n                    else {\n                        // Add note to group\n                        tempGroup.push(note);\n                    }\n                });\n                // If there is a remaining group, add it as well\n                if (tempGroup.length > 0) {\n                    sanitizedGroups.push(tempGroup);\n                }\n            });\n            noteGroups = sanitizedGroups;\n        }\n        function formatStems() {\n            noteGroups.forEach((group) => {\n                let stemDirection;\n                if (config.maintainStemDirections) {\n                    const note = findFirstNote(group);\n                    stemDirection = note ? note.getStemDirection() : Stem.UP;\n                }\n                else {\n                    if (config.stemDirection) {\n                        stemDirection = config.stemDirection;\n                    }\n                    else {\n                        stemDirection = calculateStemDirection(group);\n                    }\n                }\n                applyStemDirection(group, stemDirection);\n            });\n        }\n        function findFirstNote(group) {\n            for (let i = 0; i < group.length; i++) {\n                const note = group[i];\n                if (!note.isRest()) {\n                    return note;\n                }\n            }\n            return false;\n        }\n        function applyStemDirection(group, direction) {\n            group.forEach((note) => {\n                note.setStemDirection(direction);\n            });\n        }\n        // Get all of the tuplets in all of the note groups\n        function getTuplets() {\n            const uniqueTuplets = [];\n            // Go through all of the note groups and inspect for tuplets\n            noteGroups.forEach((group) => {\n                let tuplet;\n                group.forEach((note) => {\n                    const noteTuplet = note.getTuplet();\n                    if (noteTuplet && tuplet !== noteTuplet) {\n                        tuplet = noteTuplet;\n                        uniqueTuplets.push(tuplet);\n                    }\n                });\n            });\n            return uniqueTuplets;\n        }\n        // Using closures to store the variables throughout the various functions\n        // IMO Keeps it this process lot cleaner - but not super consistent with\n        // the rest of the API's style - Silverwolf90 (Cyril)\n        createGroups();\n        sanitizeGroups();\n        formatStems();\n        // Get the notes to be beamed\n        const beamedNoteGroups = getBeamGroups();\n        // Get the tuplets in order to format them accurately\n        const allTuplets = getTuplets();\n        // Create a VexFlow.Beam from each group of notes to be beamed\n        const beams = [];\n        beamedNoteGroups.forEach((group) => {\n            const beam = new Beam(group);\n            if (config.showStemlets) {\n                beam.renderOptions.showStemlets = true;\n            }\n            if (config.secondaryBreaks) {\n                beam.renderOptions.secondaryBreakTicks = Tables.durationToTicks(config.secondaryBreaks);\n            }\n            if (config.flatBeams === true) {\n                beam.renderOptions.flatBeams = true;\n                beam.renderOptions.flatBeamOffset = config.flatBeamOffset;\n            }\n            beams.push(beam);\n        });\n        // Reformat tuplets\n        allTuplets.forEach((tuplet) => {\n            // Set the tuplet location based on the stem direction\n            const direction = tuplet.notes[0].stemDirection === Stem.DOWN ? TupletLocation.BOTTOM : TupletLocation.TOP;\n            tuplet.setTupletLocation(direction);\n            // If any of the notes in the tuplet are not beamed, draw a bracket.\n            let bracketed = false;\n            for (let i = 0; i < tuplet.notes.length; i++) {\n                const note = tuplet.notes[i];\n                if (!note.hasBeam()) {\n                    bracketed = true;\n                    break;\n                }\n            }\n            tuplet.setBracketed(bracketed);\n        });\n        return beams;\n    }\n    constructor(notes, autoStem = false) {\n        super();\n        this.slope = 0;\n        _Beam_stemDirection.set(this, void 0);\n        _Beam_ticks.set(this, void 0);\n        _Beam_yShift.set(this, 0);\n        _Beam_breakOnIndexes.set(this, void 0);\n        _Beam_beamCount.set(this, void 0);\n        _Beam_unbeamable.set(this, void 0);\n        /**\n         * Overrides to default beam directions for secondary-level beams that do not\n         * connect to any other note. See further explanation at\n         * `setPartialBeamSideAt`\n         */\n        _Beam_forcedPartialDirections.set(this, {});\n        if (!notes || notes.length === 0) {\n            throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n        }\n        if (notes.length === 1) {\n            throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n        }\n        // Validate beam line, direction and ticks.\n        __classPrivateFieldSet(this, _Beam_ticks, notes[0].getIntrinsicTicks(), \"f\");\n        if (__classPrivateFieldGet(this, _Beam_ticks, \"f\") >= Tables.durationToTicks('4')) {\n            throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n        }\n        let i; // shared iterator\n        let note;\n        __classPrivateFieldSet(this, _Beam_stemDirection, notes[0].getStemDirection(), \"f\");\n        let stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // Figure out optimal stem direction based on given notes\n        if (autoStem && isStaveNote(notes[0])) {\n            stemDirection = calculateStemDirection(notes);\n        }\n        else if (autoStem && isTabNote(notes[0])) {\n            // Auto Stem TabNotes\n            const stemWeight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n            stemDirection = stemWeight > -1 ? Stem.UP : Stem.DOWN;\n        }\n        // Apply stem directions and attach beam to notes\n        for (i = 0; i < notes.length; ++i) {\n            note = notes[i];\n            if (autoStem) {\n                note.setStemDirection(stemDirection);\n                __classPrivateFieldSet(this, _Beam_stemDirection, stemDirection, \"f\");\n            }\n            note.setBeam(this);\n        }\n        this.postFormatted = false;\n        this.notes = notes;\n        __classPrivateFieldSet(this, _Beam_beamCount, this.getBeamCount(), \"f\");\n        __classPrivateFieldSet(this, _Beam_breakOnIndexes, [], \"f\");\n        this.renderOptions = {\n            beamWidth: 5,\n            maxSlope: 0.25,\n            minSlope: -0.25,\n            slopeIterations: 20,\n            slopeCost: 100,\n            showStemlets: false,\n            stemletExtension: 7,\n            partialBeamLength: 10,\n            flatBeams: false,\n            minFlatBeamOffset: 15,\n        };\n    }\n    /** Get the notes in this beam. */\n    getNotes() {\n        return this.notes;\n    }\n    /** Get the max number of beams in the set of notes. */\n    getBeamCount() {\n        const beamCounts = this.notes.map((note) => note.getGlyphProps().beamCount);\n        const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n        return maxBeamCount;\n    }\n    /** Set which note `indexes` to break the secondary beam at. */\n    breakSecondaryAt(indexes) {\n        __classPrivateFieldSet(this, _Beam_breakOnIndexes, indexes, \"f\");\n        return this;\n    }\n    /**\n     * Forces the direction of a partial beam (a secondary-level beam that exists\n     * on one note only of the beam group). This is useful in rhythms such as 6/8\n     * eighth-sixteenth-eighth-sixteenth, where the direction of the beam on the\n     * first sixteenth note can help imply whether the rhythm is to be felt as\n     * three groups of eighth notes (typical) or as two groups of three-sixteenths\n     * (less common):\n     * ```\n     *  ┌───┬──┬──┐      ┌──┬──┬──┐\n     *  │   ├─ │ ─┤  vs  │ ─┤  │ ─┤\n     *  │   │  │  │      │  │  │  │\n     * ```\n     */\n    setPartialBeamSideAt(noteIndex, side) {\n        __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex] = side;\n        return this;\n    }\n    /**\n     * Restore the default direction of a partial beam (a secondary-level beam\n     * that does not connect to any other notes).\n     */\n    unsetPartialBeamSideAt(noteIndex) {\n        delete __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex];\n        return this;\n    }\n    /**\n     * @param firstX specified in pixels.\n     * @param firstY specified in pixels.\n     *\n     * @return the y coordinate for linear function.\n     */\n    getSlopeY(x, firstX, firstY, slope) {\n        return firstY + (x - firstX) * slope;\n    }\n    /** Calculate the best possible slope for the provided notes. */\n    calculateSlope() {\n        const { notes, renderOptions: { maxSlope, minSlope, slopeIterations, slopeCost }, } = this;\n        const stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        const firstNote = notes[0];\n        const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n        const increment = (maxSlope - minSlope) / slopeIterations;\n        let minCost = Number.MAX_VALUE;\n        let bestSlope = 0;\n        let yShift = 0;\n        // iterate through slope values to find best weighted fit\n        for (let slope = minSlope; slope <= maxSlope; slope += increment) {\n            let totalStemExtension = 0;\n            let yShiftTemp = 0;\n            // iterate through notes, calculating y shift and stem extension\n            for (let i = 1; i < notes.length; ++i) {\n                const note = notes[i];\n                if (note.hasStem() || note.isRest()) {\n                    const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n                    const stemTipY = note.getStemExtents().topY;\n                    // beam needs to be shifted up to accommodate note\n                    if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n                        const diff = Math.abs(stemTipY - adjustedStemTipY);\n                        yShiftTemp += diff * -stemDirection;\n                        totalStemExtension += diff * i;\n                    }\n                    else {\n                        // beam overshoots note, account for the difference\n                        totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n                    }\n                }\n            }\n            // most engraving books suggest aiming for a slope about half the angle of the\n            // difference between the first and last notes' stem length;\n            const idealSlope = initialSlope / 2;\n            const distanceFromIdeal = Math.abs(idealSlope - slope);\n            // This tries to align most beams to something closer to the idealSlope, but\n            // doesn't go crazy. To disable, set this.renderOptions.slopeCost = 0\n            const cost = slopeCost * distanceFromIdeal + Math.abs(totalStemExtension);\n            // update state when a more ideal slope is found\n            if (cost < minCost) {\n                minCost = cost;\n                bestSlope = slope;\n                yShift = yShiftTemp;\n            }\n        }\n        this.slope = bestSlope;\n        __classPrivateFieldSet(this, _Beam_yShift, yShift, \"f\");\n    }\n    /** Calculate a slope and y-shift for flat beams. */\n    calculateFlatSlope() {\n        const { notes, renderOptions: { beamWidth, minFlatBeamOffset, flatBeamOffset }, } = this;\n        const stemDirection = __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // If a flat beam offset has not yet been supplied or calculated,\n        // generate one based on the notes in this particular note group\n        let total = 0;\n        let extremeY = 0; // Store the highest or lowest note here\n        let extremeBeamCount = 0; // The beam count of the extreme note\n        let currentExtreme = 0;\n        for (let i = 0; i < notes.length; i++) {\n            // Total up all of the offsets so we can average them out later\n            const note = notes[i];\n            const stemTipY = note.getStemExtents().topY;\n            total += stemTipY;\n            // Store the highest (stems-up) or lowest (stems-down) note so the\n            //  offset can be adjusted in case the average isn't enough\n            if (stemDirection === Stem.DOWN && currentExtreme < stemTipY) {\n                currentExtreme = stemTipY;\n                extremeY = Math.max(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n            else if (stemDirection === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n                currentExtreme = stemTipY;\n                extremeY = Math.min(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n        }\n        // Average the offsets to try and come up with a reasonable one that\n        // works for all of the notes in the beam group.\n        let offset = total / notes.length;\n        // In case the average isn't long enough, add or subtract some more\n        // based on the highest or lowest note (again, based on the stem\n        // direction). This also takes into account the added height due to\n        // the width of the beams.\n        const extremeTest = minFlatBeamOffset + extremeBeamCount * beamWidth * 1.5;\n        const newOffset = extremeY + extremeTest * -stemDirection;\n        if (stemDirection === Stem.DOWN && offset < newOffset) {\n            offset = extremeY + extremeTest;\n        }\n        else if (stemDirection === Stem.UP && offset > newOffset) {\n            offset = extremeY - extremeTest;\n        }\n        if (!flatBeamOffset) {\n            // Set the offset for the group based on the calculations above.\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        else if (stemDirection === Stem.DOWN && offset > flatBeamOffset) {\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        else if (stemDirection === Stem.UP && offset < flatBeamOffset) {\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        // For flat beams, the slope and yShift are 0.\n        this.slope = 0;\n        __classPrivateFieldSet(this, _Beam_yShift, 0, \"f\");\n    }\n    /** Return the Beam y offset. */\n    getBeamYToDraw() {\n        const firstNote = this.notes[0];\n        const firstStemTipY = firstNote.getStemExtents().topY;\n        let beamY = firstStemTipY;\n        // For flat beams, set the first and last Y to the offset, rather than\n        //  using the note's stem extents.\n        if (this.renderOptions.flatBeams && this.renderOptions.flatBeamOffset) {\n            beamY = this.renderOptions.flatBeamOffset;\n        }\n        return beamY;\n    }\n    /**\n     * Create new stems for the notes in the beam, so that each stem\n     * extends into the beams.\n     */\n    applyStemExtensions() {\n        const { notes, slope, renderOptions: { showStemlets, stemletExtension, beamWidth }, } = this;\n        const yShift = __classPrivateFieldGet(this, _Beam_yShift, \"f\");\n        const beamCount = __classPrivateFieldGet(this, _Beam_beamCount, \"f\");\n        const firstNote = notes[0];\n        const firstStemTipY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                const { topY: stemTipY } = note.getStemExtents();\n                const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + yShift;\n                const preBeamExtension = stem.getExtension();\n                const beamExtension = note.getStemDirection() === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n                // Determine necessary extension for cross-stave notes in the beam group\n                let crossStemExtension = 0;\n                if (note.getStemDirection() !== __classPrivateFieldGet(this, _Beam_stemDirection, \"f\")) {\n                    const beamCount = note.getGlyphProps().beamCount;\n                    crossStemExtension = (1 + (beamCount - 1) * 1.5) * this.renderOptions.beamWidth;\n                    /* This will be required if the partial beams are moved to the note side.\n                    if (i > 0 && note.getGlyph().beamCount > 1) {\n                      const prevBeamCount = this.notes[i - 1].getGlyph().beamCount;\n                      const beamDiff = Math.abs(prevBeamCount - beamCount);\n                      if (beamDiff > 0) crossStemExtension -= beamDiff * (this.renderOptions.beamWidth * 1.5);\n                    }\n                    */\n                }\n                stem.setExtension(preBeamExtension + beamExtension + crossStemExtension);\n                stem.adjustHeightForBeam();\n                if (note.isRest() && showStemlets) {\n                    const totalBeamWidth = (beamCount - 1) * beamWidth * 1.5 + beamWidth;\n                    stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemletExtension);\n                }\n            }\n        }\n    }\n    /** Return upper level beam direction. */\n    lookupBeamDirection(duration, prevTick, tick, nextTick, noteIndex) {\n        if (duration === '4') {\n            return BEAM_LEFT;\n        }\n        const forcedBeamDirection = __classPrivateFieldGet(this, _Beam_forcedPartialDirections, \"f\")[noteIndex];\n        if (forcedBeamDirection)\n            return forcedBeamDirection;\n        const lookupDuration = `${Tables.durationToNumber(duration) / 2}`;\n        const prevNoteGetsBeam = prevTick < Tables.durationToTicks(lookupDuration);\n        const nextNoteGetsBeam = nextTick < Tables.durationToTicks(lookupDuration);\n        const noteGetsBeam = tick < Tables.durationToTicks(lookupDuration);\n        if (prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_BOTH;\n        }\n        else if (prevNoteGetsBeam && !nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_LEFT;\n        }\n        else if (!prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_RIGHT;\n        }\n        return this.lookupBeamDirection(lookupDuration, prevTick, tick, nextTick, noteIndex);\n    }\n    /** Get the x coordinates for the beam lines of specific `duration`. */\n    getBeamLines(duration) {\n        const tickOfDuration = Tables.durationToTicks(duration);\n        let beamStarted = false;\n        const beamLines = [];\n        let currentBeam = undefined;\n        const partialBeamLength = this.renderOptions.partialBeamLength;\n        let previousShouldBreak = false;\n        let tickTally = 0;\n        for (let i = 0; i < this.notes.length; ++i) {\n            const note = this.notes[i];\n            // See if we need to break secondary beams on this note.\n            const ticks = note.getTicks().value();\n            tickTally += ticks;\n            let shouldBreak = false;\n            // 8th note beams are always drawn.\n            if (parseInt(duration, 10) >= 8) {\n                // First, check to see if any indexes were set up through breakSecondaryAt()\n                shouldBreak = __classPrivateFieldGet(this, _Beam_breakOnIndexes, \"f\").indexOf(i) !== -1;\n                // If the secondary breaks were auto-configured in the render options,\n                //  handle that as well.\n                if (this.renderOptions.secondaryBreakTicks && tickTally >= this.renderOptions.secondaryBreakTicks) {\n                    tickTally = 0;\n                    shouldBreak = true;\n                }\n            }\n            const noteGetsBeam = note.getIntrinsicTicks() < tickOfDuration;\n            const stemX = note.getStemX() - Stem.WIDTH / 2;\n            // Check to see if the next note in the group will get a beam at this\n            //  level. This will help to inform the partial beam logic below.\n            const prevNote = this.notes[i - 1];\n            const nextNote = this.notes[i + 1];\n            const nextNoteGetsBeam = nextNote && nextNote.getIntrinsicTicks() < tickOfDuration;\n            const prevNoteGetsBeam = prevNote && prevNote.getIntrinsicTicks() < tickOfDuration;\n            const beamAlone = prevNote && nextNote && noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;\n            // const beamAlone = noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;\n            if (noteGetsBeam) {\n                // This note gets a beam at the current level\n                if (beamStarted) {\n                    // We're currently in the middle of a beam. Just continue it on to\n                    //  the stem X of the current note.\n                    currentBeam = beamLines[beamLines.length - 1];\n                    currentBeam.end = stemX;\n                    // If a secondary beam break is set up, end the beam right now.\n                    if (shouldBreak) {\n                        beamStarted = false;\n                        if (nextNote && !nextNoteGetsBeam && currentBeam.end === undefined) {\n                            // This note gets a beam,.but the next one does not. This means\n                            //  we need a partial pointing right.\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                    }\n                }\n                else {\n                    // No beam started yet. Start a new one.\n                    currentBeam = { start: stemX, end: undefined };\n                    beamStarted = true;\n                    if (beamAlone) {\n                        // previous and next beam exists and does not get a beam but current gets it.\n                        const prevTick = prevNote.getIntrinsicTicks();\n                        const nextTick = nextNote.getIntrinsicTicks();\n                        const tick = note.getIntrinsicTicks();\n                        const beamDirection = this.lookupBeamDirection(duration, prevTick, tick, nextTick, i);\n                        if ([BEAM_LEFT, BEAM_BOTH].includes(beamDirection)) {\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                        else {\n                            currentBeam.end = currentBeam.start + partialBeamLength;\n                        }\n                    }\n                    else if (!nextNoteGetsBeam) {\n                        // The next note doesn't get a beam. Draw a partial.\n                        if ((previousShouldBreak || i === 0) && nextNote) {\n                            // This is the first note (but not the last one), or it is\n                            //  following a secondary break. Draw a partial to the right.\n                            currentBeam.end = currentBeam.start + partialBeamLength;\n                        }\n                        else {\n                            // By default, draw a partial to the left.\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                    }\n                    else if (shouldBreak) {\n                        // This note should have a secondary break after it. Even though\n                        //  we just started a beam, it needs to end immediately.\n                        currentBeam.end = currentBeam.start - partialBeamLength;\n                        beamStarted = false;\n                    }\n                    beamLines.push(currentBeam);\n                }\n            }\n            else {\n                // The current note does not get a beam.\n                beamStarted = false;\n            }\n            // Store the secondary break flag to inform the partial beam logic in\n            //  the next iteration of the loop.\n            previousShouldBreak = shouldBreak;\n        }\n        // Add a partial beam pointing left if this is the last note in the group\n        const lastBeam = beamLines[beamLines.length - 1];\n        if (lastBeam && lastBeam.end === undefined) {\n            lastBeam.end = lastBeam.start - partialBeamLength;\n        }\n        return beamLines;\n    }\n    /** Render the stems for each note. */\n    drawStems(ctx) {\n        this.notes.forEach((note) => {\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                stem.setNoteHeadXBounds(stemX, stemX);\n                stem.setContext(ctx).draw();\n            }\n        }, this);\n    }\n    // Render the beam lines\n    drawBeamLines(ctx) {\n        const validBeamDurations = ['4', '8', '16', '32', '64'];\n        const firstNote = this.notes[0];\n        let beamY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        const beamThickness = this.renderOptions.beamWidth * __classPrivateFieldGet(this, _Beam_stemDirection, \"f\");\n        // Draw the beams.\n        for (let i = 0; i < validBeamDurations.length; ++i) {\n            const duration = validBeamDurations[i];\n            const beamLines = this.getBeamLines(duration);\n            for (let j = 0; j < beamLines.length; ++j) {\n                const beamLine = beamLines[j];\n                const startBeamX = beamLine.start;\n                const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n                const lastBeamX = beamLine.end;\n                if (lastBeamX) {\n                    const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n                    ctx.beginPath();\n                    ctx.moveTo(startBeamX, startBeamY);\n                    ctx.lineTo(startBeamX, startBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY);\n                    ctx.closePath();\n                    ctx.fill();\n                }\n                else {\n                    throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n                }\n            }\n            beamY += beamThickness * 1.5;\n        }\n    }\n    /** Pre-format the beam. */\n    preFormat() {\n        return this;\n    }\n    /**\n     * Post-format the beam. This can only be called after\n     * the notes in the beam have both `x` and `y` values. ie: they've\n     * been formatted and have staves.\n     */\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        // Calculate a smart slope if we're not forcing the beams to be flat.\n        if (isTabNote(this.notes[0]) || this.renderOptions.flatBeams) {\n            this.calculateFlatSlope();\n        }\n        else {\n            this.calculateSlope();\n        }\n        this.applyStemExtensions();\n        this.postFormatted = true;\n    }\n    /** Render the beam to the canvas context */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (__classPrivateFieldGet(this, _Beam_unbeamable, \"f\"))\n            return;\n        if (!this.postFormatted) {\n            this.postFormat();\n        }\n        this.drawStems(ctx);\n        this.applyStyle();\n        ctx.openGroup('beam', this.getAttribute('id'));\n        this.drawBeamLines(ctx);\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n_Beam_stemDirection = new WeakMap(), _Beam_ticks = new WeakMap(), _Beam_yShift = new WeakMap(), _Beam_breakOnIndexes = new WeakMap(), _Beam_beamCount = new WeakMap(), _Beam_unbeamable = new WeakMap(), _Beam_forcedPartialDirections = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\n// MIT License\nimport { Clef } from './clef';\nimport { Note } from './note';\nimport { Category } from './typeguard';\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n    static get CATEGORY() {\n        return Category.ClefNote;\n    }\n    constructor(type, size = 'default', annotation) {\n        super({ duration: 'b' });\n        this.setType(type, size, annotation);\n        this.ignoreTicks = true;\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size, annotation) {\n        this.clef = new Clef(type, size, annotation);\n        this.setWidth(this.clef.getWidth());\n        return this;\n    }\n    /** Get associated clef. */\n    getClef() {\n        return this.clef;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render clef note. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.clef.renderText(ctx, this.getAbsoluteX() - this.x, stave.getYForLine(this.clef.line));\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\nimport { Note } from './note';\nimport { TickContext } from './tickcontext';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `VexFlow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Crescendo.DEBUG)\n        log('VexFlow.Crescendo', args);\n}\n// Helper to draw the hairpin.\nfunction renderHairpin(ctx, params) {\n    const beginX = params.beginX;\n    const endX = params.endX;\n    const y = params.y;\n    const halfHeight = params.height / 2;\n    ctx.beginPath();\n    if (params.reverse) {\n        ctx.moveTo(beginX, y - halfHeight);\n        ctx.lineTo(endX, y);\n        ctx.lineTo(beginX, y + halfHeight);\n    }\n    else {\n        ctx.moveTo(endX, y - halfHeight);\n        ctx.lineTo(beginX, y);\n        ctx.lineTo(endX, y + halfHeight);\n    }\n    ctx.stroke();\n    ctx.closePath();\n}\nexport class Crescendo extends Note {\n    /** Crescendo category string. */\n    static get CATEGORY() {\n        return Category.Crescendo;\n    }\n    // Initialize the crescendo's properties\n    constructor(noteStruct) {\n        var _a;\n        super(noteStruct);\n        this.options = {\n            // Extensions to the length of the crescendo on either side\n            extendLeft: 0,\n            extendRight: 0,\n            // Vertical shift\n            yShift: 0,\n        };\n        // Whether the object is a decrescendo\n        this.decrescendo = false;\n        // The staff line to be placed on\n        this.line = (_a = noteStruct.line) !== null && _a !== void 0 ? _a : 0;\n        // The height at the open end of the cresc/decresc\n        this.height = 15;\n    }\n    // Set the line to center the element on\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Set the full height at the open end\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    // Set whether the sign should be a descresendo by passing a bool\n    // to `decresc`\n    setDecrescendo(decresc) {\n        this.decrescendo = decresc;\n        return this;\n    }\n    // Preformat the note\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    // Render the Crescendo object onto the canvas\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        this.setRendered();\n        const tickContext = this.getTickContext();\n        const nextContext = TickContext.getNextContext(tickContext);\n        const beginX = this.getAbsoluteX();\n        const endX = nextContext ? nextContext.getX() : stave.getX() + stave.getWidth();\n        const y = stave.getYForLine(this.line + -3) + 1;\n        L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', beginX - endX);\n        renderHairpin(ctx, {\n            beginX: beginX - this.options.extendLeft,\n            endX: endX + this.options.extendRight,\n            y: y + this.options.yShift,\n            height: this.height,\n            reverse: this.decrescendo,\n        });\n    }\n}\nCrescendo.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements curves (for slurs)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var CurvePosition;\n(function (CurvePosition) {\n    CurvePosition[CurvePosition[\"NEAR_HEAD\"] = 1] = \"NEAR_HEAD\";\n    CurvePosition[CurvePosition[\"NEAR_TOP\"] = 2] = \"NEAR_TOP\";\n})(CurvePosition || (CurvePosition = {}));\nexport class Curve extends Element {\n    static get CATEGORY() {\n        return Category.Curve;\n    }\n    static get Position() {\n        return CurvePosition;\n    }\n    static get PositionString() {\n        return {\n            nearHead: CurvePosition.NEAR_HEAD,\n            nearTop: CurvePosition.NEAR_TOP,\n        };\n    }\n    // from: Start note\n    // to: End note\n    // options:\n    //    cps: List of control points\n    //    xShift: pixels to shift\n    //    yShift: pixels to shift\n    constructor(from, to, options) {\n        super();\n        this.renderOptions = Object.assign({ thickness: 2, xShift: 0, yShift: 10, position: CurvePosition.NEAR_HEAD, positionEnd: CurvePosition.NEAR_HEAD, invert: false, cps: [\n                { x: 0, y: 10 },\n                { x: 0, y: 10 },\n            ] }, options);\n        this.from = from;\n        this.to = to;\n    }\n    setNotes(from, to) {\n        if (!from && !to) {\n            throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n        }\n        this.from = from;\n        this.to = to;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.from || !this.to;\n    }\n    renderCurve(params) {\n        var _a, _b;\n        const ctx = this.checkContext();\n        this.applyStyle();\n        const xShift = this.renderOptions.xShift;\n        const yShift = this.renderOptions.yShift * params.direction;\n        const firstX = params.firstX + xShift;\n        const firstY = params.firstY + yShift;\n        const lastX = params.lastX - xShift;\n        const lastY = params.lastY + yShift;\n        const thickness = this.renderOptions.thickness;\n        const cps = this.renderOptions.cps;\n        const { x: cp0x, y: cp0y } = cps[0];\n        const { x: cp1x, y: cp1y } = cps[1];\n        const controlPointSpacing = (lastX - firstX) / (cps.length + 2);\n        ctx.beginPath();\n        ctx.moveTo(firstX, firstY);\n        ctx.bezierCurveTo(firstX + controlPointSpacing + cp0x, firstY + cp0y * params.direction, lastX - controlPointSpacing + cp1x, lastY + cp1y * params.direction, lastX, lastY);\n        if (!((_a = this.style) === null || _a === void 0 ? void 0 : _a.lineDash))\n            ctx.bezierCurveTo(lastX - controlPointSpacing + cp1x, lastY + (cp1y + thickness) * params.direction, firstX + controlPointSpacing + cp0x, firstY + (cp0y + thickness) * params.direction, firstX, firstY);\n        ctx.stroke();\n        ctx.closePath();\n        if (!((_b = this.style) === null || _b === void 0 ? void 0 : _b.lineDash))\n            ctx.fill();\n        this.restoreStyle();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.from;\n        const lastNote = this.to;\n        let firstX;\n        let lastX;\n        let firstY;\n        let lastY;\n        let stemDirection = 0;\n        let metric = 'baseY';\n        let endMetric = 'baseY';\n        function getPosition(position) {\n            return typeof position === 'string' ? Curve.PositionString[position] : position;\n        }\n        const position = getPosition(this.renderOptions.position);\n        const positionEnd = getPosition(this.renderOptions.positionEnd);\n        if (position === CurvePosition.NEAR_TOP) {\n            metric = 'topY';\n            endMetric = 'topY';\n        }\n        if (positionEnd === CurvePosition.NEAR_HEAD) {\n            endMetric = 'baseY';\n        }\n        else if (positionEnd === CurvePosition.NEAR_TOP) {\n            endMetric = 'topY';\n        }\n        if (firstNote) {\n            firstX = firstNote.getTieRightX();\n            stemDirection = firstNote.getStemDirection();\n            firstY = firstNote.getStemExtents()[metric];\n        }\n        else {\n            const stave = lastNote.checkStave();\n            firstX = stave.getTieStartX();\n            firstY = lastNote.getStemExtents()[metric];\n        }\n        if (lastNote) {\n            lastX = lastNote.getTieLeftX();\n            stemDirection = lastNote.getStemDirection();\n            lastY = lastNote.getStemExtents()[endMetric];\n        }\n        else {\n            const stave = firstNote.checkStave();\n            lastX = stave.getTieEndX();\n            lastY = firstNote.getStemExtents()[endMetric];\n        }\n        this.renderCurve({\n            firstX,\n            lastX,\n            firstY,\n            lastY,\n            direction: stemDirection * (this.renderOptions.invert === true ? -1 : 1),\n        });\n        return true;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// A generic text parsing class for VexFlow.\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `VexFlow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Parser.DEBUG)\n        log('VexFlow.Parser', args);\n}\nconst NO_ERROR_POS = -1;\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r) {\n    if ('matchedString' in r)\n        return r.matchedString; // string\n    if ('results' in r)\n        return flattenMatches(r.results);\n    const results = r;\n    if (results.length === 1)\n        return flattenMatches(results[0]);\n    if (results.length === 0)\n        return null;\n    return results.map(flattenMatches); // nested array\n}\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n    // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n    // the EasyScore grammar in easyscore.ts.\n    constructor(grammar) {\n        this.grammar = grammar;\n        this.line = '';\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Parse `line` using current grammar. Returns `{success: true}` if the\n    // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n    // where `errorPos` is the location of the error in the string.\n    parse(line) {\n        this.line = line;\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n        const result = this.expect(this.grammar.begin());\n        result.errorPos = this.errorPos;\n        return result;\n    }\n    matchFail(returnPos) {\n        if (this.errorPos === NO_ERROR_POS)\n            this.errorPos = this.pos;\n        this.pos = returnPos;\n    }\n    matchSuccess() {\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Look for `token` in this.line[this.pos], and return success\n    // if one is found. `token` is specified as a regular expression.\n    matchToken(token, noSpace = false) {\n        const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n        const workingLine = this.line.slice(this.pos);\n        const result = workingLine.match(regexp);\n        if (result !== null) {\n            return {\n                success: true,\n                matchedString: result[2],\n                incrementPos: result[1].length,\n                pos: this.pos,\n            };\n        }\n        else {\n            return { success: false, pos: this.pos };\n        }\n    }\n    // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n    // set, then return success even if the token is not found, but reset\n    // the position before exiting.\n    // TODO: expectOne(...) is never called with the `maybe` parameter.\n    expectOne(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let allMatches = true;\n        let oneMatch = false;\n        maybe = maybe === true || rule.maybe === true;\n        // Execute all sub rules in sequence.\n        if (rule.expect) {\n            for (const next of rule.expect) {\n                const localPos = this.pos;\n                const result = this.expect(next);\n                // If `rule.or` is set, then return success if any one\n                // of the subrules match, else all subrules must match.\n                if (result.success) {\n                    results.push(result);\n                    oneMatch = true;\n                    if (rule.or)\n                        break;\n                }\n                else {\n                    allMatches = false;\n                    if (!rule.or) {\n                        this.pos = localPos;\n                        break;\n                    }\n                }\n            }\n        }\n        const gotOne = (rule.or && oneMatch) || allMatches;\n        const success = gotOne || maybe === true;\n        const numMatches = gotOne ? 1 : 0;\n        if (maybe && !gotOne)\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n    // then a failed match is also a success (but the position is reset).\n    expectOneOrMore(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let numMatches = 0;\n        let more = true;\n        do {\n            const result = this.expectOne(rule);\n            if (result.success && result.results) {\n                numMatches++;\n                results.push(result.results);\n            }\n            else {\n                more = false;\n            }\n        } while (more);\n        const success = numMatches > 0 || maybe === true;\n        if (maybe && !(numMatches > 0))\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n    expectZeroOrMore(rule) {\n        return this.expectOneOrMore(rule, true);\n    }\n    // Execute the rule produced by the provided `rules` function. This\n    // offloads to one of the above matchers and consolidates the results. It is also\n    // responsible for executing any code triggered by the rule (in `rule.run`.)\n    expect(ruleFunc) {\n        L('Evaluating rule function:', ruleFunc);\n        if (!ruleFunc) {\n            throw new RuntimeError('Invalid rule function');\n        }\n        let result;\n        // Get rule from Grammar class.\n        // expect(...) handles both lexing & parsing:\n        // - lexer rules produce tokens.\n        // - parser rules produce expressions which may trigger code via the\n        //   { run: () => ... } trigger functions in easyscore.ts.\n        //   These functions build the VexFlow objects that are displayed on screen.\n        const rule = ruleFunc.bind(this.grammar)();\n        if (rule.token) {\n            // A lexer rule has a `token` property.\n            // Base case: parse the regex and throw an error if the\n            // line doesn't match.\n            result = this.matchToken(rule.token, rule.noSpace === true);\n            if (result.success) {\n                // Token match! Update position and throw away parsed portion\n                // of string.\n                this.pos += result.incrementPos;\n            }\n        }\n        else if (rule.expect) {\n            // A parser rule has an `expect` property.\n            if (rule.oneOrMore) {\n                result = this.expectOneOrMore(rule);\n            }\n            else if (rule.zeroOrMore) {\n                result = this.expectZeroOrMore(rule);\n            }\n            else {\n                result = this.expectOne(rule);\n            }\n        }\n        else {\n            L(rule);\n            throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n        }\n        // If there's a trigger attached to this rule, then run it.\n        // Make the matches accessible through `state.matches` in the\n        // `run: (state) => ...` trigger.\n        const matches = [];\n        result.matches = matches;\n        if (result.results) {\n            result.results.forEach((r) => matches.push(flattenMatches(r)));\n        }\n        if (rule.run && result.success) {\n            rule.run({ matches });\n        }\n        return result;\n    }\n}\nParser.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Articulation } from './articulation';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Music } from './music';\nimport { Parser } from './parser';\nimport { Stem } from './stem';\nimport { defined, log, RuntimeError } from './util';\n// To enable logging for this class. Set `VexFlow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (EasyScore.DEBUG)\n        log('VexFlow.EasyScore', args);\n}\nexport class EasyScoreGrammar {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    begin() {\n        return this.LINE;\n    }\n    LINE() {\n        return {\n            expect: [this.PIECE, this.PIECES, this.EOL],\n        };\n    }\n    PIECE() {\n        return {\n            expect: [this.CHORDORNOTE, this.PARAMS],\n            run: () => this.builder.commitPiece(),\n        };\n    }\n    PIECES() {\n        return {\n            expect: [this.COMMA, this.PIECE],\n            zeroOrMore: true,\n        };\n    }\n    PARAMS() {\n        return {\n            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n        };\n    }\n    CHORDORNOTE() {\n        return {\n            expect: [this.CHORD, this.SINGLENOTE],\n            or: true,\n        };\n    }\n    CHORD() {\n        return {\n            expect: [this.LPAREN, this.NOTES, this.RPAREN],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addChord(state.matches[1]),\n        };\n    }\n    NOTES() {\n        return {\n            expect: [this.NOTE],\n            oneOrMore: true,\n        };\n    }\n    NOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n        };\n    }\n    SINGLENOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n            run: (state) => {\n                // eslint-disable-next-line\n                const s = state;\n                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\n            },\n        };\n    }\n    ACCIDENTAL() {\n        return {\n            expect: [this.MICROTONES, this.ACCIDENTALS],\n            maybe: true,\n            or: true,\n        };\n    }\n    DOTS() {\n        return {\n            expect: [this.DOT],\n            zeroOrMore: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDots(state.matches),\n        };\n    }\n    TYPE() {\n        return {\n            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteType(state.matches[2]),\n        };\n    }\n    DURATION() {\n        return {\n            expect: [this.SLASH, this.DURATIONS],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDuration(state.matches[1]),\n        };\n    }\n    OPTS() {\n        return {\n            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n            maybe: true,\n        };\n    }\n    KEYVALS() {\n        return {\n            expect: [this.COMMA, this.KEYVAL],\n            zeroOrMore: true,\n        };\n    }\n    KEYVAL() {\n        const unquote = (str) => str.slice(1, -1);\n        return {\n            expect: [this.KEY, this.EQUALS, this.VAL],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\n        };\n    }\n    VAL() {\n        return {\n            expect: [this.SVAL, this.DVAL],\n            or: true,\n        };\n    }\n    KEY() {\n        return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n    }\n    DVAL() {\n        return { token: '[\"][^\"]*[\"]' };\n    }\n    SVAL() {\n        return { token: \"['][^']*[']\" };\n    }\n    NOTENAME() {\n        return { token: '[a-gA-G]' };\n    }\n    OCTAVE() {\n        return { token: '[0-9]+' };\n    }\n    ACCIDENTALS() {\n        return { token: 'bb|b|##|#|n' };\n    }\n    MICROTONES() {\n        return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n    }\n    DURATIONS() {\n        return { token: '[0-9whq]+' };\n    }\n    TYPES() {\n        return { token: '[rRsSmMhHgG]' };\n    }\n    LPAREN() {\n        return { token: '[(]' };\n    }\n    RPAREN() {\n        return { token: '[)]' };\n    }\n    COMMA() {\n        return { token: '[,]' };\n    }\n    DOT() {\n        return { token: '[.]' };\n    }\n    SLASH() {\n        return { token: '[/]' };\n    }\n    MAYBESLASH() {\n        return { token: '[/]?' };\n    }\n    EQUALS() {\n        return { token: '[=]' };\n    }\n    LBRACKET() {\n        return { token: '\\\\[' };\n    }\n    RBRACKET() {\n        return { token: '\\\\]' };\n    }\n    EOL() {\n        return { token: '$' };\n    }\n}\nexport class Piece {\n    constructor(duration) {\n        this.chord = [];\n        this.dots = 0;\n        this.options = {};\n        this.duration = duration;\n    }\n}\nexport class Builder {\n    constructor(factory) {\n        this.commitHooks = [];\n        this.factory = factory;\n        this.reset();\n    }\n    reset(options) {\n        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);\n        this.elements = { notes: [], accidentals: [] };\n        this.rollingDuration = '8';\n        this.resetPiece();\n    }\n    getFactory() {\n        return this.factory;\n    }\n    getElements() {\n        return this.elements;\n    }\n    addCommitHook(commitHook) {\n        this.commitHooks.push(commitHook);\n    }\n    resetPiece() {\n        L('resetPiece');\n        this.piece = new Piece(this.rollingDuration);\n    }\n    setNoteDots(dots) {\n        L('setNoteDots:', dots);\n        if (dots)\n            this.piece.dots = dots.length;\n    }\n    setNoteDuration(duration) {\n        L('setNoteDuration:', duration);\n        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n    }\n    setNoteType(type) {\n        L('setNoteType:', type);\n        if (type)\n            this.piece.type = type;\n    }\n    addNoteOption(key, value) {\n        L('addNoteOption: key:', key, 'value:', value);\n        this.piece.options[key] = value;\n    }\n    addNote(key, accid, octave) {\n        L('addNote:', key, accid, octave);\n        this.piece.chord.push({\n            key: key,\n            accid,\n            octave,\n        });\n    }\n    addSingleNote(key, accid, octave) {\n        L('addSingleNote:', key, accid, octave);\n        this.addNote(key, accid, octave);\n    }\n    // notes is an array with 3 entries\n    addChord(notes) {\n        L('startChord');\n        if (typeof notes[0] !== 'object') {\n            this.addSingleNote(notes[0]);\n        }\n        else {\n            notes.forEach((n) => {\n                if (n)\n                    this.addNote(...n); // n => [string, string | null, string]\n            });\n        }\n        L('endChord');\n    }\n    commitPiece() {\n        L('commitPiece');\n        const { factory } = this;\n        if (!factory)\n            return;\n        const options = Object.assign(Object.assign({}, this.options), this.piece.options);\n        // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n        // e.g., auto | up | down\n        const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n        // e.g., treble | bass\n        const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n        const { chord, duration, dots, type } = this.piece;\n        // Create a string[] that will be assigned to the .keys property of the StaveNote.\n        // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n        // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n        const standardAccidentals = Music.accidentals;\n        const keys = chord.map((notePiece) => {\n            var _a;\n            return notePiece.key +\n                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +\n                '/' +\n                notePiece.octave;\n        });\n        const autoStem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n        // Build a GhostNote or StaveNote using the information we gathered.\n        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) === 'g'\n            ? factory.GhostNote({ duration, dots })\n            : factory.StaveNote({ keys, duration, dots, type, clef, autoStem });\n        if (!autoStem)\n            note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n        // Attach accidentals.\n        const accidentals = [];\n        chord.forEach((notePiece, index) => {\n            const accid = notePiece.accid;\n            if (typeof accid === 'string') {\n                const accidental = factory.Accidental({ type: accid });\n                note.addModifier(accidental, index);\n                accidentals.push(accidental);\n            }\n            else {\n                accidentals.push(undefined);\n            }\n        });\n        // Attach dots.\n        for (let i = 0; i < dots; i++)\n            Dot.buildAndAttach([note], { all: true });\n        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n        this.elements.notes.push(note);\n        this.elements.accidentals.push(accidentals);\n        this.resetPiece();\n    }\n}\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options, note) {\n    if (options.id === undefined)\n        return;\n    note.setAttribute('id', options.id);\n}\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options, note) {\n    if (options.class === undefined)\n        return;\n    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));\n}\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n    constructor(options = {}) {\n        this.defaults = {\n            clef: 'treble',\n            time: '4/4',\n            stem: 'auto',\n        };\n        this.setOptions(options);\n    }\n    /**\n     * Set the score defaults.\n     * clef must be set appropriately to avoid errors when adding Staves.\n     * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n     * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n     * @param defaults.stem default stem arrangement (auto | up | down)\n     * @returns this\n     */\n    set(defaults) {\n        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\n        return this;\n    }\n    /**\n     * @param options.factory is required.\n     * @returns this\n     */\n    setOptions(options) {\n        var _a, _b;\n        // eslint-disable-next-line\n        const factory = options.factory; // ! operator, because options.factory was set in Factory.EasyScore().\n        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\n        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,\n            builder });\n        this.factory = factory;\n        this.builder = builder;\n        this.grammar = new EasyScoreGrammar(this.builder);\n        this.parser = new Parser(this.grammar);\n        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));\n        return this;\n    }\n    setContext(context) {\n        this.factory.setContext(context);\n        return this;\n    }\n    parse(line, options = {}) {\n        this.builder.reset(options);\n        const result = this.parser.parse(line);\n        if (!result.success && this.options.throwOnError) {\n            L(result);\n            throw new RuntimeError('Error parsing line: ' + line);\n        }\n        return result;\n    }\n    beam(notes, options) {\n        this.factory.Beam({ notes, options });\n        return notes;\n    }\n    tuplet(notes, options) {\n        this.factory.Tuplet({ notes, options });\n        return notes;\n    }\n    notes(line, options = {}) {\n        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\n        this.parse(line, options);\n        return this.builder.getElements().notes;\n    }\n    voice(notes, options = {}) {\n        options = Object.assign({ time: this.defaults.time }, options);\n        return this.factory.Voice(options).addTickables(notes);\n    }\n    addCommitHook(commitHook) {\n        this.builder.addCommitHook(commitHook);\n    }\n}\nEasyScore.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isAnnotation } from './typeguard';\nimport { RuntimeError } from './util';\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\nexport class GhostNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.GhostNote;\n    }\n    constructor(parameter) {\n        if (!parameter) {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        let noteStruct;\n        if (typeof parameter === 'string') {\n            // Preserve backwards-compatibility\n            noteStruct = { duration: parameter };\n        }\n        else if (typeof parameter === 'object') {\n            noteStruct = parameter;\n        }\n        else {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        super(noteStruct);\n        // Note properties\n        this.setWidth(0);\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        return true;\n    }\n    setStave(stave) {\n        super.setStave(stave);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        // Draw Annotations\n        this.setRendered();\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            const modifier = this.modifiers[i];\n            if (isAnnotation(modifier)) {\n                modifier.setContext(this.getContext());\n                modifier.drawWithStyle();\n            }\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// Any glyph that is set to appear on a Stave and take up musical time and graphical space.\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class GlyphNote extends Note {\n    static get CATEGORY() {\n        return Category.GlyphNote;\n    }\n    constructor(glyph, noteStruct, options) {\n        super(noteStruct);\n        this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);\n        // Note properties\n        this.ignoreTicks = this.options.ignoreTicks;\n        this.setGlyph(glyph);\n    }\n    setGlyph(glyph) {\n        this.text = glyph;\n        return this;\n    }\n    preFormat() {\n        if (!this.preFormatted && this.modifierContext) {\n            this.modifierContext.preFormat();\n        }\n        this.preFormatted = true;\n        return this;\n    }\n    drawModifiers() {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            modifier.setContext(ctx);\n            modifier.drawWithStyle();\n        }\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('glyphNote', this.getAttribute('id'));\n        const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n        this.renderText(ctx, x, stave.getYForLine(this.options.line));\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class GraceNote extends StaveNote {\n    static get CATEGORY() {\n        return Category.GraceNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 2;\n    }\n    constructor(noteStruct) {\n        super(Object.assign({ strokePx: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));\n        this.slash = noteStruct.slash || false;\n        this.slur = true;\n        this.buildNoteHeads();\n        this.width = 3;\n    }\n    getStemExtension() {\n        if (this.stemExtensionOverride) {\n            return this.stemExtensionOverride;\n        }\n        let ret = super.getStemExtension();\n        ret = Stem.HEIGHT * this.getFontScale() - Stem.HEIGHT + ret;\n        return ret;\n    }\n    draw() {\n        super.draw();\n        this.setRendered();\n        const stem = this.stem;\n        if (this.slash && stem) {\n            const scale = this.getFontScale();\n            let slashBBox = undefined;\n            const beam = this.beam;\n            if (beam) {\n                // FIXME: should render slash after beam?\n                if (!beam.postFormatted) {\n                    beam.postFormat();\n                }\n                slashBBox = this.calcBeamedNotesSlashBBox(8 * scale, 8 * scale, {\n                    stem: 6 * scale,\n                    beam: 5 * scale,\n                });\n            }\n            else {\n                const stemDirection = this.getStemDirection();\n                const noteHeadBounds = this.getNoteHeadBounds();\n                const noteHeadWidth = this.noteHeads[0].getWidth();\n                const x = stemDirection === Stem.DOWN ? this.getAbsoluteX() : this.getAbsoluteX() + noteHeadWidth;\n                const defaultOffsetY = (Tables.STEM_HEIGHT * scale) / 2;\n                const y = stemDirection === Stem.DOWN ? noteHeadBounds.yBottom + defaultOffsetY : noteHeadBounds.yTop - defaultOffsetY;\n                if (stemDirection === Stem.DOWN) {\n                    slashBBox = {\n                        x1: x - noteHeadWidth,\n                        y1: y - noteHeadWidth,\n                        x2: x + noteHeadWidth,\n                        y2: y + noteHeadWidth,\n                    };\n                }\n                else {\n                    slashBBox = {\n                        x1: x - noteHeadWidth,\n                        y1: y + noteHeadWidth,\n                        x2: x + noteHeadWidth,\n                        y2: y - noteHeadWidth,\n                    };\n                }\n            }\n            // FIXME: avoid staff lines, ledger lines or others.\n            const ctx = this.checkContext();\n            ctx.save();\n            ctx.setLineWidth(1 * scale); // FIXME: use more appropriate value.\n            ctx.beginPath();\n            ctx.moveTo(slashBBox.x1, slashBBox.y1);\n            ctx.lineTo(slashBBox.x2, slashBBox.y2);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n    }\n    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n        const beam = this.beam;\n        if (!beam)\n            throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n        const beamSlope = beam.slope;\n        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n        const scaleX = isBeamEndNote ? -1 : 1;\n        const beamAngle = Math.atan(beamSlope * scaleX);\n        // slash line intersecting point on beam.\n        const iPointOnBeam = {\n            dx: Math.cos(beamAngle) * slashBeamOffset,\n            dy: Math.sin(beamAngle) * slashBeamOffset,\n        };\n        slashStemOffset *= this.getStemDirection();\n        const slashAngle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n        const protrusionStemDeltaX = Math.cos(slashAngle) * protrusions.stem * scaleX;\n        const protrusionStemDeltaY = Math.sin(slashAngle) * protrusions.stem;\n        const protrusionBeamDeltaX = Math.cos(slashAngle) * protrusions.beam * scaleX;\n        const protrusionBeamDeltaY = Math.sin(slashAngle) * protrusions.beam;\n        const stemX = this.getStemX();\n        const stem0X = beam.notes[0].getStemX();\n        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beamSlope;\n        const ret = {\n            x1: stemX - protrusionStemDeltaX,\n            y1: stemY + slashStemOffset - protrusionStemDeltaY,\n            x2: stemX + iPointOnBeam.dx * scaleX + protrusionBeamDeltaX,\n            y2: stemY + iPointOnBeam.dy + protrusionBeamDeltaY,\n        };\n        return ret;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Mark Meeus 2019\nimport { KeySignature } from './keysignature';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class KeySigNote extends Note {\n    static get CATEGORY() {\n        return Category.KeySigNote;\n    }\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super({ duration: 'b' });\n        this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n        // Note properties\n        this.ignoreTicks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        this.keySignature.setStave(this.checkStave());\n        this.setWidth(this.keySignature.getWidth());\n        return this;\n    }\n    draw() {\n        const ctx = this.checkStave().checkContext();\n        this.setRendered();\n        this.keySignature.setX(this.getAbsoluteX());\n        this.keySignature.setContext(ctx);\n        this.keySignature.draw();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements multiple measure rests.\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _MultiMeasureRest_hasPaddingLeft, _MultiMeasureRest_hasPaddingRight, _MultiMeasureRest_hasLineThickness, _MultiMeasureRest_hasSymbolSpacing;\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category, isBarline } from './typeguard';\nimport { defined } from './util';\nexport class MultiMeasureRest extends Element {\n    static get CATEGORY() {\n        return Category.MultiMeasureRest;\n    }\n    /**\n     *\n     * @param numberOfMeasures Number of measures.\n     * @param options The options object.\n     */\n    constructor(numberOfMeasures, options) {\n        var _a;\n        super();\n        this.xs = { left: NaN, right: NaN };\n        _MultiMeasureRest_hasPaddingLeft.set(this, false);\n        _MultiMeasureRest_hasPaddingRight.set(this, false);\n        _MultiMeasureRest_hasLineThickness.set(this, false);\n        _MultiMeasureRest_hasSymbolSpacing.set(this, false);\n        const fontSize = (_a = options.numberGlyphPoint) !== null && _a !== void 0 ? _a : Metrics.get('MultiMeasureRest.fontSize'); // same as TimeSignature.\n        this.fontInfo.size = fontSize;\n        this.numberOfMeasures = numberOfMeasures;\n        this.text = '';\n        const t = `${this.numberOfMeasures}`;\n        for (const digit of t) {\n            // 0xe080 is timeSig0. We calculate the code point for timeSigN to assemble the digits via SMuFL glyphs.\n            this.text += String.fromCodePoint(0xe080 + Number(digit));\n        }\n        // Keep track of whether these four options were provided.\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasPaddingLeft, typeof options.paddingLeft === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasPaddingRight, typeof options.paddingRight === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasLineThickness, typeof options.lineThickness === 'number', \"f\");\n        __classPrivateFieldSet(this, _MultiMeasureRest_hasSymbolSpacing, typeof options.symbolSpacing === 'number', \"f\");\n        this.renderOptions = Object.assign({ useSymbols: false, showNumber: true, numberLine: -0.5, numberGlyphPoint: fontSize, line: 2, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, serifThickness: 2, semibreveRestGlyphScale: Metrics.get('fontSize'), paddingLeft: 0, paddingRight: 0, lineThickness: 5, symbolSpacing: 0 }, options);\n    }\n    getXs() {\n        return this.xs;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    drawLine(stave, ctx, left, right) {\n        const options = this.renderOptions;\n        const y = stave.getYForLine(options.line);\n        const padding = (right - left) * 0.1;\n        left += padding;\n        right -= padding;\n        let txt = '\\ue4ef'; /*restHBarLeft*/\n        const el = new Element();\n        el.setText(txt);\n        // Add middle bars until the right padding is reached\n        for (let i = 1; (i + 2) * el.getWidth() + left <= right; i++) {\n            txt += '\\ue4f0'; /*restHBarMiddle*/\n        }\n        txt += '\\ue4f1'; /*restHBarRight*/\n        el.setText(txt);\n        el.renderText(ctx, left + (right - left) * 0.5 - el.getWidth() * 0.5, y);\n    }\n    drawSymbols(stave, ctx, left, right) {\n        const n4 = Math.floor(this.numberOfMeasures / 4);\n        const n = this.numberOfMeasures % 4;\n        const n2 = Math.floor(n / 2);\n        const n1 = n % 2;\n        const options = this.renderOptions;\n        const elMiddle = new Element();\n        let txt = '';\n        for (let i = 0; i < n4; ++i) {\n            txt += Glyphs.restLonga + ' ';\n        }\n        for (let i = 0; i < n2; ++i) {\n            txt += Glyphs.restDoubleWhole + ' ';\n        }\n        elMiddle.setText(txt);\n        const elTop = new Element();\n        txt = '';\n        for (let i = 0; i < n1; ++i) {\n            txt += Glyphs.restWhole + ' ';\n        }\n        elTop.setText(txt);\n        const width = elMiddle.getWidth() + elTop.getWidth();\n        let x = left + (right - left) * 0.5 - width * 0.5;\n        const line = options.line;\n        const yTop = stave.getYForLine(line - 1);\n        const yMiddle = stave.getYForLine(line);\n        elMiddle.renderText(ctx, x, yMiddle);\n        x += elMiddle.getWidth();\n        elTop.renderText(ctx, x, yTop);\n        x += elTop.getWidth();\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const stave = this.checkStave();\n        let left = stave.getNoteStartX();\n        let right = stave.getNoteEndX();\n        // FIXME: getNoteStartX() returns x + 5(barline width)\n        //        getNoteEndX() returns x + width(no barline width)\n        // See Stave constructor. How do we fix this?\n        // Here, we subtract the barline width.\n        const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n        if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n            left -= begModifiers[0].getWidth();\n        }\n        const options = this.renderOptions;\n        if (__classPrivateFieldGet(this, _MultiMeasureRest_hasPaddingLeft, \"f\")) {\n            left = stave.getX() + options.paddingLeft;\n        }\n        if (__classPrivateFieldGet(this, _MultiMeasureRest_hasPaddingRight, \"f\")) {\n            right = stave.getX() + stave.getWidth() - options.paddingRight;\n        }\n        this.xs.left = left;\n        this.xs.right = right;\n        if (options.useSymbols) {\n            this.drawSymbols(stave, ctx, left, right);\n        }\n        else {\n            this.drawLine(stave, ctx, left, right);\n        }\n        if (options.showNumber) {\n            this.renderText(ctx, left + (right - left) * 0.5 - this.width * 0.5, stave.getYForLine(options.numberLine) - this.height * 0.5);\n        }\n    }\n}\n_MultiMeasureRest_hasPaddingLeft = new WeakMap(), _MultiMeasureRest_hasPaddingRight = new WeakMap(), _MultiMeasureRest_hasLineThickness = new WeakMap(), _MultiMeasureRest_hasSymbolSpacing = new WeakMap();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (PedalMarking.DEBUG)\n        log('VexFlow.PedalMarking', args);\n}\n/**\n * Draws a pedal glyph with the provided `name` on a rendering `context`\n * at the coordinates `x` and `y. Takes into account the glyph data\n * coordinate shifts.\n */\nfunction drawPedalGlyph(name, ctx, x, y) {\n    var _a;\n    const glyph = new Element(PedalMarking.CATEGORY);\n    glyph.setText((_a = PedalMarking.GLYPHS[name]) !== null && _a !== void 0 ? _a : name);\n    glyph.renderText(ctx, x - (glyph.getWidth() - Tables.STAVE_LINE_DISTANCE) / 2, y);\n}\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n    static get CATEGORY() {\n        return Category.PedalMarking;\n    }\n    /**\n     * Create a sustain pedal marking. Returns the defaults PedalMarking.\n     * Which uses the traditional \"Ped\" and \"*\"\" markings.\n     */\n    static createSustain(notes) {\n        const pedal = new PedalMarking(notes);\n        return pedal;\n    }\n    /** Create a sostenuto pedal marking */\n    static createSostenuto(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.MIXED);\n        pedal.setCustomText('Sost. Ped.');\n        return pedal;\n    }\n    /** Create an una corda pedal marking */\n    static createUnaCorda(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.TEXT);\n        pedal.setCustomText('una corda', 'tre corda');\n        return pedal;\n    }\n    constructor(notes) {\n        super();\n        this.notes = notes;\n        this.type = PedalMarking.type.TEXT;\n        this.line = 0;\n        // Custom text for the release/depress markings\n        this.customDepressText = '';\n        this.customReleaseText = '';\n        this.renderOptions = {\n            bracketHeight: 10,\n            textMarginRight: 6,\n            bracketLineWidth: 1,\n            color: 'black',\n        };\n    }\n    /** Set pedal type. */\n    setType(type) {\n        type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n        if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n            this.type = type;\n        }\n        return this;\n    }\n    /**\n     * Set custom text for the `depress`/`release` pedal markings. No text is\n     * set if the parameter is falsy.\n     */\n    setCustomText(depress, release) {\n        this.customDepressText = depress || '';\n        this.customReleaseText = release || '';\n        return this;\n    }\n    /** Set the staff line to render the markings on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Draw the bracket based pedal markings. */\n    drawBracketed() {\n        const ctx = this.checkContext();\n        let isPedalDepressed = false;\n        let prevX;\n        let prevY;\n        // Iterate through each note\n        this.notes.forEach((note, index, notes) => {\n            // Each note triggers the opposite pedal action\n            isPedalDepressed = !isPedalDepressed;\n            // Get the initial coordinates for the note\n            const x = note.getAbsoluteX();\n            const y = note.checkStave().getYForBottomText(this.line + 3);\n            // Throw if current note is positioned before the previous note\n            if (x < prevX) {\n                throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n            }\n            // Determine if the previous or next note are the same\n            // as the current note. We need to keep track of this for\n            // when adjustments are made for the release+depress action\n            const nextNoteIsSame = notes[index + 1] === note;\n            const prevNoteIsSame = notes[index - 1] === note;\n            let xShift = 0;\n            if (isPedalDepressed) {\n                // Adjustment for release+depress\n                xShift = prevNoteIsSame ? 5 : 0;\n                if (this.type === PedalMarking.type.MIXED && !prevNoteIsSame) {\n                    // For MIXED style, start with text instead of bracket\n                    if (this.customDepressText) {\n                        // If we have custom text, use instead of the default \"Ped\" glyph\n                        const textWidth = ctx.measureText(this.customDepressText).width;\n                        ctx.fillText(this.customDepressText, x - textWidth / 2, y);\n                        xShift = textWidth / 2 + this.renderOptions.textMarginRight;\n                    }\n                    else {\n                        // Render the Ped glyph in position\n                        drawPedalGlyph('pedalDepress', ctx, x, y);\n                        xShift = 20 + this.renderOptions.textMarginRight;\n                    }\n                }\n                else {\n                    // Draw start bracket\n                    ctx.beginPath();\n                    ctx.moveTo(x, y - this.renderOptions.bracketHeight);\n                    ctx.lineTo(x + xShift, y);\n                    ctx.stroke();\n                    ctx.closePath();\n                }\n            }\n            else {\n                // Adjustment for release+depress\n                xShift = nextNoteIsSame ? -5 : 0;\n                // Draw end bracket\n                ctx.beginPath();\n                ctx.moveTo(prevX, prevY);\n                ctx.lineTo(x + xShift, y);\n                ctx.lineTo(x, y - this.renderOptions.bracketHeight);\n                ctx.stroke();\n                ctx.closePath();\n            }\n            // Store previous coordinates\n            prevX = x + xShift;\n            prevY = y;\n        });\n    }\n    /**\n     * Draw the text based pedal markings. This defaults to the traditional\n     * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n     */\n    drawText() {\n        const ctx = this.checkContext();\n        let isPedalDepressed = false;\n        // Iterate through each note, placing glyphs or custom text accordingly\n        this.notes.forEach((note) => {\n            isPedalDepressed = !isPedalDepressed;\n            const stave = note.checkStave();\n            const x = note.getAbsoluteX();\n            const y = stave.getYForBottomText(this.line + 3);\n            let textWidth = 0;\n            if (isPedalDepressed) {\n                if (this.customDepressText) {\n                    textWidth = ctx.measureText(this.customDepressText).width;\n                    ctx.fillText(this.customDepressText, x - textWidth / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedalDepress', ctx, x, y);\n                }\n            }\n            else {\n                if (this.customReleaseText) {\n                    textWidth = ctx.measureText(this.customReleaseText).width;\n                    ctx.fillText(this.customReleaseText, x - textWidth / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedalRelease', ctx, x, y);\n                }\n            }\n        });\n    }\n    /** Render the pedal marking in position on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setStrokeStyle(this.renderOptions.color);\n        ctx.setFillStyle(this.renderOptions.color);\n        ctx.setFont(Metrics.getFontInfo('PedalMarking.text'));\n        L('Rendering Pedal Marking');\n        if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n            ctx.setLineWidth(this.renderOptions.bracketLineWidth);\n            this.drawBracketed();\n        }\n        else if (this.type === PedalMarking.type.TEXT) {\n            this.drawText();\n        }\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.PedalMarking.DEBUG` to `true`. */\nPedalMarking.DEBUG = false;\n/** Glyph data */\nPedalMarking.GLYPHS = {\n    pedalDepress: Glyphs.keyboardPedalPed,\n    pedalRelease: Glyphs.keyboardPedalUp,\n};\n/** Pedal type as number. */\nPedalMarking.type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n};\n/** Pedal type as string. */\nPedalMarking.typeString = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { GlyphNote } from './glyphnote';\nimport { Glyphs } from './glyphs';\nimport { Category } from './typeguard';\n// Map `type` to SMuFL glyph code.\nconst CODES = {\n    '1': Glyphs.repeat1Bar,\n    '2': Glyphs.repeat2Bars,\n    '4': Glyphs.repeat4Bars,\n    slash: Glyphs.repeatBarSlash,\n};\nexport class RepeatNote extends GlyphNote {\n    static get CATEGORY() {\n        return Category.RepeatNote;\n    }\n    constructor(type, noteStruct, options) {\n        const glyphCode = CODES[type] || '\\uE500'; /*repeat1Bar*/\n        super(glyphCode, Object.assign({ duration: 'q', alignCenter: type !== 'slash' }, noteStruct), options);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `renderOptions`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { TextJustification } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n    // all cases do this.\n    ctx.beginPath();\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x0, y0);\n    ctx.closePath();\n    ctx.fill();\n}\nexport class StaveLine extends Element {\n    static get CATEGORY() {\n        return Category.StaveLine;\n    }\n    // Initialize the StaveLine with the given `notes`.\n    //\n    // `notes` is a struct that has:\n    //\n    //  ```\n    //  {\n    //    firstNote: Note,\n    //    lastNote: Note,\n    //    firstIndexes: [n1, n2, n3],\n    //    lastIndexes: [n1, n2, n3]\n    //  }\n    //  ```\n    constructor(notes) {\n        super();\n        this.setNotes(notes);\n        this.text = '';\n        this.renderOptions = {\n            // Space to add to the left or the right\n            paddingLeft: 4,\n            paddingRight: 3,\n            // The width of the line in pixels\n            lineWidth: 1,\n            // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n            lineDash: undefined,\n            // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n            roundedEnd: true,\n            // The color of the line and arrowheads\n            color: undefined,\n            // Flags to draw arrows on each end of the line\n            drawStartArrow: false,\n            drawEndArrow: false,\n            // The length of the arrowhead sides\n            arrowheadLength: 10,\n            // The angle of the arrowhead\n            arrowheadAngle: Math.PI / 8,\n            // The position of the text\n            textPositionVertical: StaveLine.TextVerticalPosition.TOP,\n            textJustification: StaveLine.TextJustification.CENTER,\n        };\n    }\n    // The the annotation for the `StaveLine`\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    // Set the notes for the `StaveLine`\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Notes needs to have either firstNote or lastNote set.');\n        }\n        if (!notes.firstIndexes)\n            notes.firstIndexes = [0];\n        if (!notes.lastIndexes)\n            notes.lastIndexes = [0];\n        if (notes.firstIndexes.length !== notes.lastIndexes.length) {\n            throw new RuntimeError('BadArguments', 'Connected notes must have same number of indexes.');\n        }\n        this.notes = notes;\n        this.firstNote = notes.firstNote;\n        this.firstIndexes = notes.firstIndexes;\n        this.lastNote = notes.lastNote;\n        this.lastIndexes = notes.lastIndexes;\n        return this;\n    }\n    // Apply the style of the `StaveLine` to the context\n    applyLineStyle() {\n        const ctx = this.checkContext();\n        const renderOptions = this.renderOptions;\n        if (renderOptions.lineDash) {\n            ctx.setLineDash(renderOptions.lineDash);\n        }\n        if (renderOptions.lineWidth) {\n            ctx.setLineWidth(renderOptions.lineWidth);\n        }\n        if (renderOptions.roundedEnd) {\n            ctx.setLineCap('round');\n        }\n        else {\n            ctx.setLineCap('square');\n        }\n    }\n    // Helper function to draw a line with arrow heads\n    drawArrowLine(ctx, pt1, pt2) {\n        const bothArrows = this.renderOptions.drawStartArrow && this.renderOptions.drawEndArrow;\n        const x1 = pt1.x;\n        const y1 = pt1.y;\n        const x2 = pt2.x;\n        const y2 = pt2.y;\n        // For ends with arrow we actually want to stop before we get to the arrow\n        // so that wide lines won't put a flat end on the arrow.\n        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        const ratio = (distance - this.renderOptions.arrowheadLength / 3) / distance;\n        let endX;\n        let endY;\n        let startX;\n        let startY;\n        if (this.renderOptions.drawEndArrow || bothArrows) {\n            endX = Math.round(x1 + (x2 - x1) * ratio);\n            endY = Math.round(y1 + (y2 - y1) * ratio);\n        }\n        else {\n            endX = x2;\n            endY = y2;\n        }\n        if (this.renderOptions.drawStartArrow || bothArrows) {\n            startX = x1 + (x2 - x1) * (1 - ratio);\n            startY = y1 + (y2 - y1) * (1 - ratio);\n        }\n        else {\n            startX = x1;\n            startY = y1;\n        }\n        if (this.renderOptions.color) {\n            ctx.setStrokeStyle(this.renderOptions.color);\n            ctx.setFillStyle(this.renderOptions.color);\n        }\n        // Draw the shaft of the arrow\n        ctx.beginPath();\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n        ctx.closePath();\n        // calculate the angle of the line\n        const lineAngle = Math.atan2(y2 - y1, x2 - x1);\n        // h is the line length of a side of the arrow head\n        const h = Math.abs(this.renderOptions.arrowheadLength / Math.cos(this.renderOptions.arrowheadAngle));\n        let angle1;\n        let angle2;\n        let topX;\n        let topY;\n        let bottomX;\n        let bottomY;\n        if (this.renderOptions.drawEndArrow || bothArrows) {\n            angle1 = lineAngle + Math.PI + this.renderOptions.arrowheadAngle;\n            topX = x2 + Math.cos(angle1) * h;\n            topY = y2 + Math.sin(angle1) * h;\n            angle2 = lineAngle + Math.PI - this.renderOptions.arrowheadAngle;\n            bottomX = x2 + Math.cos(angle2) * h;\n            bottomY = y2 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, topX, topY, x2, y2, bottomX, bottomY);\n        }\n        if (this.renderOptions.drawStartArrow || bothArrows) {\n            angle1 = lineAngle + this.renderOptions.arrowheadAngle;\n            topX = x1 + Math.cos(angle1) * h;\n            topY = y1 + Math.sin(angle1) * h;\n            angle2 = lineAngle - this.renderOptions.arrowheadAngle;\n            bottomX = x1 + Math.cos(angle2) * h;\n            bottomY = y1 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, topX, topY, x1, y1, bottomX, bottomY);\n        }\n    }\n    // Renders the `StaveLine` on the context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const firstNote = this.firstNote;\n        const lastNote = this.lastNote;\n        const renderOptions = this.renderOptions;\n        ctx.save();\n        this.applyLineStyle();\n        // Cycle through each set of indexes and draw lines\n        let startPosition = { x: 0, y: 0 };\n        let endPosition = { x: 0, y: 0 };\n        this.firstIndexes.forEach((firstIndex, i) => {\n            const lastIndex = this.lastIndexes[i];\n            // Get initial coordinates for the start/end of the line\n            startPosition = firstNote.getModifierStartXY(2, firstIndex);\n            endPosition = lastNote.getModifierStartXY(1, lastIndex);\n            const upwardsSlope = startPosition.y > endPosition.y;\n            // Adjust `x` coordinates for modifiers\n            startPosition.x += firstNote.getMetrics().modRightPx + renderOptions.paddingLeft;\n            endPosition.x -= lastNote.getMetrics().modLeftPx + renderOptions.paddingRight;\n            // Adjust first `x` coordinates for displacements\n            const noteheadWidth = firstNote.getGlyphWidth();\n            const firstDisplaced = firstNote.getKeyProps()[firstIndex].displaced;\n            if (firstDisplaced && firstNote.getStemDirection() === 1) {\n                startPosition.x += noteheadWidth + renderOptions.paddingLeft;\n            }\n            // Adjust last `x` coordinates for displacements\n            const lastDisplaced = lastNote.getKeyProps()[lastIndex].displaced;\n            if (lastDisplaced && lastNote.getStemDirection() === -1) {\n                endPosition.x -= noteheadWidth + renderOptions.paddingRight;\n            }\n            // Adjust y position better if it's not coming from the center of the note\n            startPosition.y += upwardsSlope ? -3 : 1;\n            endPosition.y += upwardsSlope ? 2 : 0;\n            this.drawArrowLine(ctx, startPosition, endPosition);\n        });\n        ctx.restore();\n        // Determine the x coordinate where to start the text\n        const textWidth = this.width;\n        const justification = renderOptions.textJustification;\n        let x = 0;\n        if (justification === StaveLine.TextJustification.LEFT) {\n            x = startPosition.x;\n        }\n        else if (justification === StaveLine.TextJustification.CENTER) {\n            const deltaX = endPosition.x - startPosition.x;\n            const centerX = deltaX / 2 + startPosition.x;\n            x = centerX - textWidth / 2;\n        }\n        else if (justification === StaveLine.TextJustification.RIGHT) {\n            x = endPosition.x - textWidth;\n        }\n        // Determine the y value to start the text\n        let y = 0;\n        const verticalPosition = renderOptions.textPositionVertical;\n        if (verticalPosition === StaveLine.TextVerticalPosition.TOP) {\n            y = firstNote.checkStave().getYForTopText();\n        }\n        else if (verticalPosition === StaveLine.TextVerticalPosition.BOTTOM) {\n            y = firstNote.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n        }\n        // Draw the text\n        const color = renderOptions.color;\n        this.applyStyle(ctx, { fillStyle: color, strokeStyle: color });\n        this.renderText(ctx, x, y);\n        this.restoreStyle(ctx);\n        return this;\n    }\n}\n// Text Positioning\nStaveLine.TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n};\nStaveLine.TextJustification = TextJustification;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Note } from './note';\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n    static get CATEGORY() {\n        return Category.System;\n    }\n    constructor(params = {}) {\n        super();\n        this.setOptions(params);\n        this.partStaves = [];\n        this.partStaveInfos = [];\n        this.partVoices = [];\n    }\n    /** Set formatting options. */\n    setOptions(options = {}) {\n        if (!options.factory) {\n            throw new RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');\n        }\n        this.factory = options.factory;\n        this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });\n        if (this.options.noJustification === false && typeof options.width === 'undefined') {\n            this.options.autoWidth = true;\n        }\n    }\n    /** Get origin X. */\n    getX() {\n        return this.options.x;\n    }\n    /** Set origin X. */\n    setX(x) {\n        this.options.x = x;\n        this.partStaves.forEach((s) => {\n            s.setX(x);\n        });\n        return this;\n    }\n    /** Get origin y. */\n    getY() {\n        return this.options.y;\n    }\n    /** Set origin y. */\n    setY(y) {\n        this.options.y = y;\n        this.partStaves.forEach((s) => {\n            s.setY(y);\n        });\n        return this;\n    }\n    /** Get associated staves. */\n    getStaves() {\n        return this.partStaves;\n    }\n    /** Get associated voices. */\n    getVoices() {\n        return this.partVoices;\n    }\n    /** Set associated context. */\n    setContext(context) {\n        super.setContext(context);\n        this.factory.setContext(context);\n        return this;\n    }\n    /**\n     * Add connector between staves.\n     * @param type see {@link StaveConnector.typeString}\n     */\n    addConnector(type = 'double') {\n        this.connector = this.factory.StaveConnector({\n            topStave: this.partStaves[0],\n            bottomStave: this.partStaves[this.partStaves.length - 1],\n            type,\n        });\n        return this.connector;\n    }\n    /**\n     * Add a stave to the system.\n     *\n     * Example (one voice):\n     *\n     * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n     *\n     * Example (two voices):\n     *\n     * `system.addStave({voices: [`\n     *   `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n     *   `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))`\n     * `]});`\n     */\n    addStave(params) {\n        var _a;\n        const staveOptions = Object.assign({ leftBar: false }, params.options);\n        const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n        const p = Object.assign(Object.assign({ spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });\n        const ctx = this.getContext();\n        p.voices.forEach((voice) => {\n            voice\n                .setContext(ctx)\n                .setStave(stave)\n                .getTickables()\n                .forEach((tickable) => tickable.setStave(stave));\n            this.partVoices.push(voice);\n        });\n        this.partStaves.push(stave);\n        this.partStaveInfos.push(p);\n        return stave;\n    }\n    /**\n     * Add voices to the system with stave already assigned.\n     */\n    addVoices(voices) {\n        const ctx = this.getContext();\n        voices.forEach((voice) => {\n            voice.setContext(ctx);\n            this.partVoices.push(voice);\n        });\n    }\n    /** Format the system. */\n    format() {\n        const optionsDetails = this.options.details;\n        let justifyWidth = 0;\n        const formatter = new Formatter(optionsDetails);\n        this.formatter = formatter;\n        let y = this.options.y;\n        let startX = 0;\n        const debugNoteMetricsYs = [];\n        this.partStaves.forEach((part, index) => {\n            y = y + part.space(this.partStaveInfos[index].spaceAbove);\n            part.setY(y);\n            y = y + part.space(this.partStaveInfos[index].spaceBelow);\n            y = y + part.space(this.options.spaceBetweenStaves);\n            if (this.partStaveInfos[index].debugNoteMetrics) {\n                debugNoteMetricsYs.push({ y, stave: part });\n                y += 15;\n            }\n            startX = Math.max(startX, part.getNoteStartX());\n        });\n        // Re-assign Stave to update y position\n        this.partVoices.forEach((voice) => {\n            voice.getTickables().forEach((tickable) => {\n                const stave = tickable.getStave();\n                if (stave)\n                    tickable.setStave(stave);\n            });\n        });\n        // Join the voices\n        formatter.joinVoices(this.partVoices);\n        // Update the start position of all staves.\n        this.partStaves.forEach((part) => part.setNoteStartX(startX));\n        if (this.options.autoWidth && this.partVoices.length > 0) {\n            justifyWidth = formatter.preCalculateMinTotalWidth(this.partVoices);\n            this.options.width = justifyWidth + Stave.rightPadding + (startX - this.options.x);\n            this.partStaves.forEach((part) => {\n                part.setWidth(this.options.width);\n            });\n        }\n        else {\n            justifyWidth = this.options.noPadding\n                ? this.options.width - (startX - this.options.x)\n                : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n        }\n        if (this.partVoices.length > 0) {\n            formatter.format(this.partVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n        }\n        formatter.postFormat();\n        for (let i = 0; i < this.options.formatIterations; i++) {\n            formatter.tune(optionsDetails);\n        }\n        this.startX = startX;\n        this.debugNoteMetricsYs = debugNoteMetricsYs;\n        this.lastY = y;\n        Stave.formatBegModifiers(this.partStaves);\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        var _a;\n        return new BoundingBox(this.options.x, this.options.y, this.options.width, ((_a = this.lastY) !== null && _a !== void 0 ? _a : 0) - this.options.y);\n    }\n    /** Render the system. */\n    draw() {\n        // Render debugging information, if requested.\n        const ctx = this.checkContext();\n        if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n            throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n        }\n        this.setRendered();\n        if (this.options.debugFormatter) {\n            Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n        }\n        this.debugNoteMetricsYs.forEach((d) => {\n            this.partVoices.forEach((voice) => {\n                voice.getTickables().forEach((tickable) => {\n                    if (tickable.getStave() === d.stave)\n                        Note.plotMetrics(ctx, tickable, d.y);\n                });\n            });\n        });\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isDot } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Gets the unused strings grouped together if consecutive.\n * @param numLines The number of lines.\n * @param stringsUsed An array of numbers representing which strings have fret positions.\n * @returns\n */\nfunction getUnusedStringGroups(numLines, stringsUsed) {\n    const stemThrough = [];\n    let group = [];\n    for (let string = 1; string <= numLines; string++) {\n        const isUsed = stringsUsed.indexOf(string) > -1;\n        if (!isUsed) {\n            group.push(string);\n        }\n        else {\n            stemThrough.push(group);\n            group = [];\n        }\n    }\n    if (group.length > 0)\n        stemThrough.push(group);\n    return stemThrough;\n}\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stemY - The `y` coordinate the stem is located on\n// * unusedStrings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stemDirection - The direction of the stem\nfunction getPartialStemLines(stemY, unusedStrings, stave, stemDirection) {\n    const upStem = stemDirection !== 1;\n    const downStem = stemDirection !== -1;\n    const lineSpacing = stave.getSpacingBetweenLines();\n    const totalLines = stave.getNumLines();\n    const stemLines = [];\n    unusedStrings.forEach((strings) => {\n        const containsLastString = strings.indexOf(totalLines) > -1;\n        const containsFirstString = strings.indexOf(1) > -1;\n        if ((upStem && containsFirstString) || (downStem && containsLastString)) {\n            return;\n        }\n        // If there's only one string in the group, push a duplicate value.\n        // We do this because we need 2 strings to convert into upper/lower y\n        // values.\n        if (strings.length === 1) {\n            strings.push(strings[0]);\n        }\n        const lineYs = [];\n        // Iterate through each group string and store it's y position\n        strings.forEach((string, index, strings) => {\n            const isTopBound = string === 1;\n            const isBottomBound = string === totalLines;\n            // Get the y value for the appropriate staff line,\n            // we adjust for a 0 index array, since string numbers are index 1\n            let y = stave.getYForLine(string - 1);\n            // Unless the string is the first or last, add padding to each side\n            // of the line\n            if (index === 0 && !isTopBound) {\n                y -= lineSpacing / 2 - 1;\n            }\n            else if (index === strings.length - 1 && !isBottomBound) {\n                y += lineSpacing / 2 - 1;\n            }\n            // Store the y value\n            lineYs.push(y);\n            // Store a subsequent y value connecting this group to the main\n            // stem above/below the stave if it's the top/bottom string\n            if (stemDirection === 1 && isTopBound) {\n                lineYs.push(stemY - 2);\n            }\n            else if (stemDirection === -1 && isBottomBound) {\n                lineYs.push(stemY + 2);\n            }\n        });\n        // Add the sorted y values to the\n        stemLines.push(lineYs.sort((a, b) => a - b));\n    });\n    return stemLines;\n}\nexport class TabNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.TabNote;\n    }\n    // Initialize the TabNote with a `noteStruct` full of properties\n    // and whether to `drawStem` when rendering the note\n    constructor(noteStruct, drawStem = false) {\n        super(noteStruct);\n        this.fretElement = [];\n        // Return the number of the greatest string, which is the string lowest on the display\n        this.greatestString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));\n        };\n        // Return the number of the least string, which is the string highest on the display\n        this.leastString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));\n        };\n        this.ghost = false; // Renders parenthesis around notes\n        // Note properties\n        // The fret positions in the note. An array of `{ str: X, fret: X }`\n        this.positions = noteStruct.positions || [];\n        // Render Options\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // Flag to draw a stem\n            drawStem, \n            // Flag to draw dot modifiers\n            drawDots: drawStem, \n            // Flag to extend the main stem through the stave and fret positions\n            drawStemThroughStave: false, \n            // vertical shift from stave line\n            yShift: 0 });\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        this.buildStem();\n        if (noteStruct.stemDirection) {\n            this.setStemDirection(noteStruct.stemDirection);\n        }\n        else {\n            this.setStemDirection(Stem.UP);\n        }\n        // Renders parenthesis around notes\n        this.ghost = false;\n        this.updateWidth();\n    }\n    reset() {\n        super.reset();\n        if (this.stave)\n            this.setStave(this.stave);\n        return this;\n    }\n    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n    // Often used for indicating frets that are being bent to\n    setGhost(ghost) {\n        this.ghost = ghost;\n        this.updateWidth();\n        return this;\n    }\n    // Determine if the note has a stem\n    hasStem() {\n        if (this.renderOptions.drawStem)\n            return true;\n        return false;\n    }\n    // Get the default stem extension for the note\n    getStemExtension() {\n        if (this.stemExtensionOverride !== undefined) {\n            return this.stemExtensionOverride;\n        }\n        return this.flag.getHeight() > Stem.HEIGHT ? this.flag.getHeight() - Stem.HEIGHT : 0;\n    }\n    static tabToElement(fret) {\n        let el;\n        if (fret.toUpperCase() === 'X') {\n            el = new Element('TabNote');\n            el.setText(Glyphs.accidentalDoubleSharp);\n        }\n        else {\n            el = new Element('TabNote.text');\n            el.setText(fret);\n            el.setYShift(el.getHeight() / 2);\n        }\n        return el;\n    }\n    // Calculate and store the width of the note\n    updateWidth() {\n        this.fretElement = [];\n        this.width = 0;\n        for (let i = 0; i < this.positions.length; ++i) {\n            let fret = this.positions[i].fret;\n            if (this.ghost)\n                fret = '(' + fret + ')';\n            const el = TabNote.tabToElement(fret.toString());\n            this.fretElement.push(el);\n            this.width = Math.max(el.getWidth(), this.width);\n        }\n    }\n    // Set the `stave` to the note\n    setStave(stave) {\n        super.setStave(stave);\n        const ctx = stave.getContext();\n        this.setContext(ctx);\n        // we subtract 1 from `line` because getYForLine expects a 0-based index,\n        // while the position.str is a 1-based index\n        const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n        this.setYs(ys);\n        if (this.stem) {\n            this.stem.setYBounds(this.getStemY(), this.getStemY());\n        }\n        return this;\n    }\n    // Get the fret positions for the note\n    getPositions() {\n        return this.positions;\n    }\n    // Get the default `x` and `y` coordinates for a modifier at a specific\n    // `position` at a fret position `index`\n    getModifierStartXY(position, index) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        let x = 0;\n        if (position === Modifier.Position.LEFT) {\n            x = -1 * 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.RIGHT) {\n            x = this.width + 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n            const noteGlyphWidth = this.width;\n            x = noteGlyphWidth / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    // Get the default line for rest\n    getLineForRest() {\n        return Number(this.positions[0].str);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (this.modifierContext)\n            this.modifierContext.preFormat();\n        // width is already set during init()\n        this.preFormatted = true;\n    }\n    // Get the x position for the stem\n    getStemX() {\n        return this.getCenterGlyphX();\n    }\n    // Get the y position for the stem\n    getStemY() {\n        const numLines = this.checkStave().getNumLines();\n        // The decimal staff line amounts provide optimal spacing between the\n        // fret number and the stem\n        const stemUpLine = -0.5;\n        const stemDownLine = numLines - 0.5;\n        const stemStartLine = Stem.UP === this.stemDirection ? stemUpLine : stemDownLine;\n        return this.checkStave().getYForLine(stemStartLine);\n    }\n    // Get the stem extents for the tabnote\n    getStemExtents() {\n        return this.checkStem().getExtents();\n    }\n    // Draw the fal onto the context\n    drawFlag() {\n        const { beam, glyphProps, renderOptions: { drawStem }, } = this;\n        const context = this.checkContext();\n        const shouldDrawFlag = beam === undefined && drawStem;\n        // Now it's the flag's turn.\n        if (glyphProps.codeFlagUp && shouldDrawFlag) {\n            const flagX = this.getStemX();\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() - this.getStemExtension()\n                : // Up stems are above the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() + this.getStemExtension();\n            // Draw the Flag\n            this.applyStyle(context, this.flagStyle);\n            this.flag.renderText(context, flagX, flagY);\n            this.restoreStyle(context, this.flagStyle);\n        }\n    }\n    // Render the modifiers onto the context.\n    drawModifiers() {\n        this.modifiers.forEach((modifier) => {\n            // Only draw the dots if enabled.\n            if (isDot(modifier) && !this.renderOptions.drawDots) {\n                return;\n            }\n            modifier.setContext(this.getContext());\n            modifier.drawWithStyle();\n        });\n    }\n    // Render the stem extension through the fret positions\n    drawStemThrough() {\n        const stemX = this.getStemX();\n        const stemY = this.getStemY();\n        const ctx = this.checkContext();\n        const drawStem = this.renderOptions.drawStem;\n        const stemThrough = this.renderOptions.drawStemThroughStave;\n        if (drawStem && stemThrough) {\n            const numLines = this.checkStave().getNumLines();\n            const stringsUsed = this.positions.map((position) => Number(position.str));\n            const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);\n            const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());\n            ctx.save();\n            ctx.setLineWidth(Stem.WIDTH);\n            stemLines.forEach((bounds) => {\n                if (bounds.length === 0)\n                    return;\n                ctx.beginPath();\n                ctx.moveTo(stemX, bounds[0]);\n                ctx.lineTo(stemX, bounds[bounds.length - 1]);\n                ctx.stroke();\n                ctx.closePath();\n            });\n            ctx.restore();\n        }\n    }\n    // Render the fret positions onto the context\n    drawPositions() {\n        const ctx = this.checkContext();\n        const x = this.getAbsoluteX();\n        const ys = this.ys;\n        for (let i = 0; i < this.positions.length; ++i) {\n            const y = ys[i] + this.renderOptions.yShift;\n            const el = this.fretElement[i];\n            // Center the fret text beneath the stem\n            const tabX = x - el.getWidth() / 2;\n            // FIXME: Magic numbers.\n            ctx.clearRect(tabX - 2, y - 3, el.getWidth() + 4, 6);\n            el.renderText(ctx, tabX, y);\n        }\n    }\n    // The main rendering function for the entire note.\n    draw() {\n        const ctx = this.checkContext();\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        this.setRendered();\n        const renderStem = this.beam === undefined && this.renderOptions.drawStem;\n        this.applyStyle();\n        ctx.openGroup('tabnote', this.getAttribute('id'));\n        this.drawPositions();\n        this.drawStemThrough();\n        if (this.stem && renderStem) {\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n            this.stem.setContext(ctx).draw();\n        }\n        this.drawFlag();\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nexport class TabStave extends Stave {\n    static get CATEGORY() {\n        return Category.TabStave;\n    }\n    constructor(x, y, width, options) {\n        const tabOptions = Object.assign({ spacingBetweenLinesPx: 13, numLines: 6, topTextPosition: 1 }, options);\n        super(x, y, width, tabOptions);\n    }\n    getYForGlyphs() {\n        return this.getYForLine(2.5);\n    }\n    // Deprecated\n    addTabGlyph() {\n        this.addClef('tab');\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n//\n// This file implements `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Renderer } from './renderer';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `VexFlow.TextBracket.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextBracket.DEBUG)\n        log('VexFlow.TextBracket', args);\n}\nexport var TextBracketPosition;\n(function (TextBracketPosition) {\n    TextBracketPosition[TextBracketPosition[\"TOP\"] = 1] = \"TOP\";\n    TextBracketPosition[TextBracketPosition[\"BOTTOM\"] = -1] = \"BOTTOM\";\n})(TextBracketPosition || (TextBracketPosition = {}));\nexport class TextBracket extends Element {\n    static get CATEGORY() {\n        return Category.TextBracket;\n    }\n    static get Position() {\n        return TextBracketPosition;\n    }\n    static get PositionString() {\n        return {\n            top: TextBracketPosition.TOP,\n            bottom: TextBracketPosition.BOTTOM,\n        };\n    }\n    constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {\n        super();\n        this.start = start;\n        this.stop = stop;\n        this.textElement = new Element('TextBracket');\n        this.textElement.setText(text);\n        this.superscriptElement = new Element('TextBracket');\n        this.superscriptElement.setText(superscript);\n        const smallerFontSize = Font.scaleSize(this.fontInfo.size, 0.714286);\n        this.superscriptElement.setFontSize(smallerFontSize);\n        this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n        this.line = 1;\n        this.renderOptions = {\n            dashed: true,\n            dash: [5],\n            color: 'black',\n            lineWidth: 1,\n            showBracket: true,\n            bracketHeight: 8,\n            // In the BOTTOM position, the bracket line can extend\n            // under the superscript.\n            underlineSuperscript: true,\n        };\n    }\n    /**\n     * Apply the text backet styling to the provided context.\n     * @param ctx\n     * @returns this\n     */\n    applyStyle(ctx) {\n        this.textElement.setFont(this.fontInfo);\n        // We called this.resetFont() in the constructor, so we know this.textFont is available.\n        const { family, size, weight, style } = this.fontInfo;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        const smallerFontSize = Font.scaleSize(size, 0.714286);\n        this.superscriptElement.setFont(family, smallerFontSize, weight, style);\n        const options = this.renderOptions;\n        ctx.setStrokeStyle(options.color);\n        ctx.setFillStyle(options.color);\n        ctx.setLineWidth(options.lineWidth);\n        return this;\n    }\n    // Set whether the bracket line should be `dashed`. You can also\n    // optionally set the `dash` pattern by passing in an array of numbers\n    setDashed(dashed, dash) {\n        this.renderOptions.dashed = dashed;\n        if (dash)\n            this.renderOptions.dash = dash;\n        return this;\n    }\n    // Set the rendering `context` for the octave bracket\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Draw the octave bracket on the rendering context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let y = 0;\n        switch (this.position) {\n            case TextBracketPosition.TOP:\n                y = this.start.checkStave().getYForTopText(this.line);\n                break;\n            case TextBracketPosition.BOTTOM:\n                y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n        }\n        // Get the preliminary start and stop coordintates for the bracket\n        const start = { x: this.start.getAbsoluteX(), y };\n        const stop = { x: this.stop.getAbsoluteX(), y };\n        L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n        const bracketHeight = this.renderOptions.bracketHeight * this.position;\n        ctx.save();\n        this.applyStyle(ctx);\n        // Draw text\n        this.textElement.renderText(ctx, start.x, start.y);\n        // Get the width and height for the octave number\n        const mainWidth = this.textElement.getWidth();\n        const mainHeight = this.textElement.getHeight();\n        // Calculate the y position for the super script\n        const superY = start.y - mainHeight / 2.5;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        this.superscriptElement.renderText(ctx, start.x + mainWidth + 1, superY);\n        // Determine width and height of the superscript\n        const superWidth = this.superscriptElement.getWidth();\n        const superHeight = this.superscriptElement.getHeight();\n        // Setup initial coordinates for the bracket line\n        let startX = start.x;\n        let lineY = superY;\n        const endX = stop.x + this.stop.getGlyphWidth();\n        // Adjust x and y coordinates based on position\n        if (this.position === TextBracketPosition.TOP) {\n            startX += mainWidth + superWidth + 5;\n            lineY -= superHeight / 2.7;\n        }\n        else if (this.position === TextBracketPosition.BOTTOM) {\n            lineY += superHeight / 2.7;\n            startX += mainWidth + 2;\n            if (!this.renderOptions.underlineSuperscript) {\n                startX += superWidth;\n            }\n        }\n        if (this.renderOptions.dashed) {\n            // Main line\n            Renderer.drawDashedLine(ctx, startX, lineY, endX, lineY, this.renderOptions.dash);\n            // Ending Bracket\n            if (this.renderOptions.showBracket) {\n                Renderer.drawDashedLine(ctx, endX, lineY + 1 * this.position, endX, lineY + bracketHeight, this.renderOptions.dash);\n            }\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(startX, lineY);\n            // Main line\n            ctx.lineTo(endX, lineY);\n            if (this.renderOptions.showBracket) {\n                // Ending bracket\n                ctx.lineTo(endX, lineY + bracketHeight);\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n}\nTextBracket.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextDynamics.DEBUG)\n        log('VexFlow.TextDynamics', args);\n}\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n    static get CATEGORY() {\n        return Category.TextDynamics;\n    }\n    /** The glyph data for each dynamics letter. */\n    static get GLYPHS() {\n        return {\n            f: Glyphs.dynamicForte,\n            p: Glyphs.dynamicPiano,\n            m: Glyphs.dynamicMezzo,\n            s: Glyphs.dynamicSforzando,\n            z: Glyphs.dynamicZ,\n            r: Glyphs.dynamicRinforzando,\n        };\n    }\n    /**\n     * Create the dynamics marking.\n     *\n     * A `TextDynamics` object inherits from `Note` so that it can be formatted\n     * within a `Voice`.\n     *\n     * @param noteStruct an object that contains a `duration` property and a\n     * `sequence` of letters that represents the letters to render.\n     */\n    constructor(noteStruct) {\n        var _a, _b;\n        super(noteStruct);\n        this.sequence = ((_a = noteStruct.text) !== null && _a !== void 0 ? _a : '').toLowerCase();\n        this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;\n        this.text = '';\n        L('New Dynamics Text: ', this.sequence);\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Preformat the dynamics text. */\n    preFormat() {\n        // length of this.glyphs must be <=\n        // length of this.sequence, so if we're formatted before\n        // create new glyphs.\n        this.text = '';\n        // Iterate through each letter\n        this.sequence.split('').forEach((letter) => {\n            // Get the glyph data for the letter\n            const glyph = TextDynamics.GLYPHS[letter];\n            if (!glyph)\n                throw new RuntimeError('Invalid dynamics character: ' + letter);\n            // Add the glyph\n            this.text += glyph;\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the dynamics text on the rendering context. */\n    draw() {\n        this.setRendered();\n        const x = this.getAbsoluteX();\n        const y = this.checkStave().getYForLine(this.line + -3);\n        L('Rendering Dynamics: ', this.sequence);\n        this.renderText(this.checkContext(), x, y);\n    }\n}\n/** To enable logging for this class. Set `VexFlow.TextDynamics.DEBUG` to `true`. */\nTextDynamics.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\nimport { Note } from './note';\nimport { TimeSignature } from './timesignature';\nimport { Category } from './typeguard';\nexport class TimeSigNote extends Note {\n    static get CATEGORY() {\n        return Category.TimeSigNote;\n    }\n    constructor(timeSpec, customPadding) {\n        super({ duration: 'b' });\n        this.timeSig = new TimeSignature(timeSpec, customPadding);\n        this.setWidth(this.timeSig.getWidth());\n        // Note properties\n        this.ignoreTicks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.timeSig.drawAt(ctx, stave, this.getAbsoluteX());\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Balazs Forian-Szabo\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { log } from './util';\nimport { Vibrato } from './vibrato';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (VibratoBracket.DEBUG)\n        log('VexFlow.VibratoBracket', args);\n}\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n    static get CATEGORY() {\n        return Category.VibratoBracket;\n    }\n    /**\n     * Either the stop or start note must be set, or both of them.\n     * An undefined value for the start or stop note indicates that the vibrato\n     * is drawn from the beginning or until the end of the stave accordingly.\n     */\n    constructor(bracketData) {\n        super();\n        this.vibrato = new Vibrato();\n        if (bracketData.start)\n            this.start = bracketData.start;\n        if (bracketData.stop)\n            this.stop = bracketData.stop;\n        this.line = 1;\n    }\n    /** Set line position of the vibrato bracket. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Set vibrato code. */\n    setVibratoCode(code) {\n        this.vibrato.setVibratoCode(code);\n        return this;\n    }\n    /** Draw the vibrato bracket on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n            (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n            0;\n        // If start note is not set then vibrato will be drawn\n        // from the beginning of the stave\n        const startX = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n        // If stop note is not set then vibrato will be drawn\n        // until the end of the stave\n        const stopX = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n            (this.start && this.start.checkStave().getTieEndX() - 10) ||\n            0;\n        this.vibrato.setVibratoWidth(stopX - startX);\n        L('Rendering VibratoBracket: startX:', startX, 'stopX:', stopX, 'y:', y);\n        this.vibrato.renderText(ctx, startX, y);\n    }\n}\n/** To enable logging for this class. Set `VexFlow.VibratoBracket.DEBUG` to `true`. */\nVibratoBracket.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n// MIT License\nimport { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { ChordSymbol } from './chordsymbol';\nimport { ClefNote } from './clefnote';\nimport { Curve } from './curve';\nimport { EasyScore } from './easyscore';\nimport { Formatter } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { KeySigNote } from './keysignote';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { PedalMarking } from './pedalmarking';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StaveLine } from './staveline';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { StringNumber } from './stringnumber';\nimport { System } from './system';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSigNote } from './timesignote';\nimport { Tuplet } from './tuplet';\nimport { defined, log, RuntimeError } from './util';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\nimport { isHTMLCanvas } from './web';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Factory.DEBUG)\n        log('VexFlow.Factory', args);\n}\n/**\n * Factory implements a high level API around VexFlow.\n */\nexport class Factory {\n    /**\n     * Static simplified function to access constructor without providing FactoryOptions\n     *\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = VexFlow.Factory.newFromElementId('boo', 1200, 600 );`\n     */\n    static newFromElementId(elementId, width = 500, height = 200) {\n        return new Factory({ renderer: { elementId, width, height } });\n    }\n    /**\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = new VexFlow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n     */\n    constructor(options = {}) {\n        L('New factory: ', options);\n        this.options = {\n            stave: {\n                space: 10,\n            },\n            renderer: {\n                elementId: '',\n                width: 500,\n                height: 200,\n                background: '#FFF',\n            },\n        };\n        this.setOptions(options);\n    }\n    reset() {\n        this.renderQ = [];\n        this.systems = [];\n        this.staves = [];\n        this.voices = [];\n        this.stave = undefined; // current stave\n    }\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.initRenderer();\n        this.reset();\n    }\n    initRenderer() {\n        const { elementId, width, height, background } = this.options.renderer;\n        if (elementId === null) {\n            return;\n        }\n        if (elementId === '') {\n            L(this);\n            throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n        }\n        let backend = this.options.renderer.backend;\n        if (backend === undefined) {\n            const elem = document.getElementById(elementId);\n            // We use a custom type check here, because node-canvas mimics canvas,\n            // but is not an instance of window.HTMLCanvasElement.\n            // In fact, `window` might be undefined here.\n            // See: https://www.npmjs.com/package/canvas\n            if (isHTMLCanvas(elem)) {\n                backend = Renderer.Backends.CANVAS;\n            }\n            else {\n                backend = Renderer.Backends.SVG;\n            }\n        }\n        this.context = Renderer.buildContext(elementId, backend, width, height, background);\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    getVoices() {\n        return this.voices;\n    }\n    /** Return pixels from current stave spacing. */\n    Stave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.0 } }, params);\n        const stave = new Stave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    TabStave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.3 } }, params);\n        const stave = new TabStave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    StaveNote(noteStruct) {\n        const note = new StaveNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GlyphNote(glyph, noteStruct, options) {\n        const note = new GlyphNote(glyph, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    RepeatNote(type, noteStruct, options) {\n        const note = new RepeatNote(type, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GhostNote(noteStruct) {\n        const ghostNote = new GhostNote(noteStruct);\n        if (this.stave)\n            ghostNote.setStave(this.stave);\n        ghostNote.setContext(this.context);\n        this.renderQ.push(ghostNote);\n        return ghostNote;\n    }\n    TextNote(noteStruct) {\n        const textNote = new TextNote(noteStruct);\n        if (this.stave)\n            textNote.setStave(this.stave);\n        textNote.setContext(this.context);\n        this.renderQ.push(textNote);\n        return textNote;\n    }\n    BarNote(params = {}) {\n        const barNote = new BarNote(params.type);\n        if (this.stave)\n            barNote.setStave(this.stave);\n        barNote.setContext(this.context);\n        this.renderQ.push(barNote);\n        return barNote;\n    }\n    ClefNote(params) {\n        const p = Object.assign({ type: 'treble', options: {\n                size: 'default',\n                annotation: undefined,\n            } }, params);\n        const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n        if (this.stave)\n            clefNote.setStave(this.stave);\n        clefNote.setContext(this.context);\n        this.renderQ.push(clefNote);\n        return clefNote;\n    }\n    TimeSigNote(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const timeSigNote = new TimeSigNote(p.time);\n        if (this.stave)\n            timeSigNote.setStave(this.stave);\n        timeSigNote.setContext(this.context);\n        this.renderQ.push(timeSigNote);\n        return timeSigNote;\n    }\n    KeySigNote(params) {\n        const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n        if (this.stave)\n            keySigNote.setStave(this.stave);\n        keySigNote.setContext(this.context);\n        this.renderQ.push(keySigNote);\n        return keySigNote;\n    }\n    TabNote(noteStruct) {\n        const note = new TabNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GraceNote(noteStruct) {\n        const note = new GraceNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        return note;\n    }\n    GraceNoteGroup(params) {\n        const group = new GraceNoteGroup(params.notes, params.slur);\n        group.setContext(this.context);\n        return group;\n    }\n    Accidental(params) {\n        const accid = new Accidental(params.type);\n        accid.setContext(this.context);\n        return accid;\n    }\n    Annotation(params) {\n        const p = Object.assign({ text: 'p', hJustify: AnnotationHorizontalJustify.CENTER, vJustify: AnnotationVerticalJustify.BOTTOM }, params);\n        const annotation = new Annotation(p.text);\n        annotation.setJustification(p.hJustify);\n        annotation.setVerticalJustification(p.vJustify);\n        annotation.setFont(p.font);\n        annotation.setContext(this.context);\n        return annotation;\n    }\n    ChordSymbol(params) {\n        const p = Object.assign({ vJustify: 'top', hJustify: 'center' }, params);\n        const chordSymbol = new ChordSymbol();\n        chordSymbol.setHorizontal(p.hJustify);\n        chordSymbol.setVertical(p.vJustify);\n        // There is a default font based on the engraving font.  Only set then\n        // font if it is specific, else use the default\n        if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n            if (typeof p.fontWeight === 'string')\n                chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n            else\n                chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n        }\n        else if (typeof p.fontSize === 'number') {\n            chordSymbol.setFontSize(p.fontSize);\n        }\n        chordSymbol.setContext(this.context);\n        return chordSymbol;\n    }\n    Articulation(params) {\n        var _a;\n        const articulation = new Articulation((_a = params === null || params === void 0 ? void 0 : params.type) !== null && _a !== void 0 ? _a : 'a.');\n        if ((params === null || params === void 0 ? void 0 : params.position) !== undefined)\n            articulation.setPosition(params.position);\n        if ((params === null || params === void 0 ? void 0 : params.betweenLines) !== undefined)\n            articulation.setBetweenLines(params.betweenLines);\n        articulation.setContext(this.context);\n        return articulation;\n    }\n    Ornament(type, params) {\n        const options = Object.assign({ type, accidental: '' }, params);\n        const ornament = new Ornament(type);\n        if ((params === null || params === void 0 ? void 0 : params.position) !== undefined) {\n            ornament.setPosition(params.position);\n        }\n        if (options.upperAccidental) {\n            ornament.setUpperAccidental(options.upperAccidental);\n        }\n        if (options.lowerAccidental) {\n            ornament.setLowerAccidental(options.lowerAccidental);\n        }\n        if (typeof options.delayed !== 'undefined') {\n            ornament.setDelayed(options.delayed);\n        }\n        ornament.setContext(this.context);\n        return ornament;\n    }\n    TextDynamics(params) {\n        const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);\n        const text = new TextDynamics({\n            text: p.text,\n            line: p.line,\n            duration: p.duration,\n            dots: p.dots,\n        });\n        if (this.stave)\n            text.setStave(this.stave);\n        text.setContext(this.context);\n        this.renderQ.push(text);\n        return text;\n    }\n    Fingering(params) {\n        const p = Object.assign({ number: '0', position: 'left' }, params);\n        const fingering = new FretHandFinger(p.number);\n        fingering.setPosition(p.position);\n        fingering.setContext(this.context);\n        return fingering;\n    }\n    StringNumber(params, drawCircle = true) {\n        const stringNumber = new StringNumber(params.number);\n        stringNumber.setPosition(params.position);\n        stringNumber.setContext(this.context);\n        stringNumber.setDrawCircle(drawCircle);\n        return stringNumber;\n    }\n    TickContext() {\n        return new TickContext();\n    }\n    ModifierContext() {\n        return new ModifierContext();\n    }\n    MultiMeasureRest(params) {\n        const numMeasures = defined(params.numberOfMeasures, 'NoNumberOfMeasures');\n        const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n        multiMeasureRest.setContext(this.context);\n        this.renderQ.push(multiMeasureRest);\n        return multiMeasureRest;\n    }\n    Voice(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const voice = new Voice(p.time);\n        this.voices.push(voice);\n        return voice;\n    }\n    StaveConnector(params) {\n        const connector = new StaveConnector(params.topStave, params.bottomStave);\n        connector.setType(params.type).setContext(this.context);\n        this.renderQ.push(connector);\n        return connector;\n    }\n    Formatter(options) {\n        return new Formatter(options);\n    }\n    Tuplet(params) {\n        const p = Object.assign({ notes: [], options: {} }, params);\n        const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n        this.renderQ.push(tuplet);\n        return tuplet;\n    }\n    Beam(params) {\n        var _a, _b, _c, _d, _e;\n        const beam = new Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);\n        beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);\n        if ((_d = params.options) === null || _d === void 0 ? void 0 : _d.partialBeamDirections) {\n            Object.entries((_e = params.options) === null || _e === void 0 ? void 0 : _e.partialBeamDirections).forEach(([noteIndex, direction]) => {\n                beam.setPartialBeamSideAt(Number(noteIndex), direction);\n            });\n        }\n        this.renderQ.push(beam);\n        return beam;\n    }\n    Curve(params) {\n        const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n        this.renderQ.push(curve);\n        return curve;\n    }\n    StaveTie(params) {\n        var _a;\n        const tie = new StaveTie({\n            firstNote: params.from,\n            lastNote: params.to,\n            firstIndexes: params.firstIndexes,\n            lastIndexes: params.lastIndexes,\n        }, params.text);\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)\n            tie.setDirection(params.options.direction);\n        tie.setContext(this.context);\n        this.renderQ.push(tie);\n        return tie;\n    }\n    StaveLine(params) {\n        var _a, _b;\n        const line = new StaveLine({\n            firstNote: params.from,\n            lastNote: params.to,\n            firstIndexes: params.firstIndexes,\n            lastIndexes: params.lastIndexes,\n        });\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)\n            line.setText(params.options.text);\n        if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)\n            line.setFont(params.options.font);\n        line.setContext(this.context);\n        this.renderQ.push(line);\n        return line;\n    }\n    VibratoBracket(params) {\n        const vibratoBracket = new VibratoBracket({\n            start: params.from,\n            stop: params.to,\n        });\n        if (params.options.line)\n            vibratoBracket.setLine(params.options.line);\n        if (params.options.code)\n            vibratoBracket.setVibratoCode(params.options.code);\n        vibratoBracket.setContext(this.context);\n        this.renderQ.push(vibratoBracket);\n        return vibratoBracket;\n    }\n    TextBracket(params) {\n        const textBracket = new TextBracket({\n            start: params.from,\n            stop: params.to,\n            text: params.text,\n            superscript: params.options.superscript,\n            position: params.options.position,\n        });\n        if (params.options.line)\n            textBracket.setLine(params.options.line);\n        if (params.options.font)\n            textBracket.setFont(params.options.font);\n        textBracket.setContext(this.context);\n        this.renderQ.push(textBracket);\n        return textBracket;\n    }\n    System(params = {}) {\n        params.factory = this;\n        const system = new System(params).setContext(this.context);\n        this.systems.push(system);\n        return system;\n    }\n    /**\n     * Creates EasyScore. Normally the first step after constructing a Factory. For example:\n     * ```\n     * const vf: Factory = new VexFlow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\n     * const score: EasyScore = vf.EasyScore();\n     * ```\n     * @param options.factory optional instance of Factory\n     * @param options.builder instance of Builder\n     * @param options.commitHooks function to call after a note element is created\n     * @param options.throwOnError throw error in case of parsing error\n     */\n    EasyScore(options = {}) {\n        options.factory = this;\n        return new EasyScore(options);\n    }\n    PedalMarking(params) {\n        const p = Object.assign({ notes: [], options: {\n                style: 'mixed',\n            } }, params);\n        const pedal = new PedalMarking(p.notes);\n        pedal.setType(PedalMarking.typeString[p.options.style]);\n        pedal.setContext(this.context);\n        this.renderQ.push(pedal);\n        return pedal;\n    }\n    NoteSubGroup(params) {\n        const p = Object.assign({ notes: [] }, params);\n        const group = new NoteSubGroup(p.notes);\n        group.setContext(this.context);\n        return group;\n    }\n    /** Render the score. */\n    draw() {\n        const ctx = this.context;\n        this.systems.forEach((s) => s.setContext(ctx).format());\n        this.staves.forEach((s) => s.setContext(ctx).draw());\n        this.voices.forEach((v) => v.setContext(ctx).draw());\n        this.renderQ.forEach((e) => {\n            if (!e.isRendered())\n                e.setContext(ctx).draw();\n        });\n        this.systems.forEach((s) => s.setContext(ctx).draw());\n        this.reset();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Factory.DEBUG` to `true`. */\nFactory.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// @author Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveHairpin extends Element {\n    static get CATEGORY() {\n        return Category.StaveHairpin;\n    }\n    /* Helper function to convert ticks into pixels.\n     * Requires a Formatter with voices joined and formatted (to\n     * get pixels per tick)\n     *\n     * options is struct that has:\n     *\n     *  {\n     *   height: px,\n     *   yShift: px,         // vertical offset\n     *   leftShiftTicks: 0, // left horizontal offset expressed in ticks\n     *   rightShiftTicks: 0 // right horizontal offset expressed in ticks\n     *  }\n     *\n     **/\n    static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n        var _a, _b;\n        const ppt = formatter.pixelsPerTick;\n        if (ppt === null) {\n            throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n        }\n        const leftShiftPx = ppt * ((_a = options.leftShiftTicks) !== null && _a !== void 0 ? _a : 0);\n        const rightShiftPx = ppt * ((_b = options.rightShiftTicks) !== null && _b !== void 0 ? _b : 0);\n        const hairpinOptions = {\n            height: options.height,\n            yShift: options.yShift,\n            leftShiftPx,\n            rightShiftPx,\n            rightShiftTicks: 0,\n            leftShiftTicks: 0,\n        };\n        new StaveHairpin({\n            firstNote: notes.firstNote,\n            lastNote: notes.lastNote,\n        }, type)\n            .setContext(ctx)\n            .setRenderOptions(hairpinOptions)\n            .setPosition(position)\n            .draw();\n    }\n    /**\n     * Create a new hairpin from the specified notes.\n     *\n     * @param {!Object} notes The notes to tie up.\n     * Notes is a struct that has:\n     *\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *  }\n     * @param {!Object} type The type of hairpin\n     */\n    constructor(notes, type) {\n        super();\n        this.setNotes(notes);\n        this.hairpin = type;\n        this.position = Modifier.Position.BELOW;\n        this.renderOptions = {\n            height: 10,\n            yShift: 0, // vertical offset\n            leftShiftPx: 0, // left horizontal offset\n            rightShiftPx: 0, // right horizontal offset\n            rightShiftTicks: 0,\n            leftShiftTicks: 0,\n        };\n    }\n    setPosition(position) {\n        if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n            this.position = position;\n        }\n        return this;\n    }\n    setRenderOptions(options) {\n        this.renderOptions = options;\n        return this;\n    }\n    /**\n     * Set the notes to attach this hairpin to.\n     *\n     * @param {!Object} notes The start and end notes.\n     */\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Hairpin needs to have either firstNote or lastNote set.');\n        }\n        this.notes = notes;\n        this.firstNote = notes.firstNote;\n        this.lastNote = notes.lastNote;\n        return this;\n    }\n    renderHairpin(params) {\n        const ctx = this.checkContext();\n        let dis = this.renderOptions.yShift + 20;\n        let yShift = params.firstY;\n        if (this.position === Modifier.Position.ABOVE) {\n            dis = -dis + 30;\n            yShift = params.firstY - params.staffHeight;\n        }\n        const leftShiftPx = this.renderOptions.leftShiftPx;\n        const rightShiftPx = this.renderOptions.rightShiftPx;\n        ctx.beginPath();\n        switch (this.hairpin) {\n            case StaveHairpin.type.CRESC:\n                ctx.moveTo(params.lastX + rightShiftPx, yShift + dis);\n                ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height / 2 + dis);\n                ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height + dis);\n                break;\n            case StaveHairpin.type.DECRESC:\n                ctx.moveTo(params.firstX + leftShiftPx, yShift + dis);\n                ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height / 2 + dis);\n                ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height + dis);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.stroke();\n        ctx.closePath();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.firstNote;\n        const lastNote = this.lastNote;\n        if (!firstNote || !lastNote)\n            throw new RuntimeError('NoNote', 'Notes required to draw');\n        const start = firstNote.getModifierStartXY(this.position, 0);\n        const end = lastNote.getModifierStartXY(this.position, 0);\n        this.renderHairpin({\n            firstX: start.x,\n            lastX: end.x,\n            firstY: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n            lastY: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n            staffHeight: firstNote.checkStave().getHeight(),\n        });\n    }\n}\nStaveHairpin.type = {\n    CRESC: 1,\n    DECRESC: 2,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { TabTie } from './tabtie';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class TabSlide extends TabTie {\n    static get CATEGORY() {\n        return Category.TabSlide;\n    }\n    static get SLIDE_UP() {\n        return 1;\n    }\n    static get SLIDE_DOWN() {\n        return -1;\n    }\n    static createSlideUp(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_UP);\n    }\n    static createSlideDown(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n    }\n    /**\n     * @param notes is a struct of the form:\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     * @param notes.firstNote the starting note of the slide\n     * @param notes.lastNote the ending note of the slide\n     * @param notes.firstIndexes specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n     * @param notes.lastIndexes currently unused. we assume it's the same as firstIndexes.\n     *\n     * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n     */\n    constructor(notes, direction) {\n        super(notes, 'sl.');\n        // Determine the direction automatically if it is not provided.\n        if (!direction) {\n            let firstFret = notes.firstNote.getPositions()[0].fret;\n            if (typeof firstFret === 'string') {\n                firstFret = parseInt(firstFret, 10);\n            }\n            let lastFret = notes.lastNote.getPositions()[0].fret;\n            if (typeof lastFret === 'string') {\n                lastFret = parseInt(lastFret, 10);\n            }\n            // If either of the frets are 'X', parseInt() above will return NaN.\n            // Choose TabSlide.SLIDE_UP by default.\n            if (isNaN(firstFret) || isNaN(lastFret)) {\n                direction = TabSlide.SLIDE_UP;\n            }\n            else {\n                direction = firstFret > lastFret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n            }\n        }\n        this.direction = direction;\n        this.renderOptions.cp1 = 11;\n        this.renderOptions.cp2 = 14;\n        this.renderOptions.yShift = 0.5;\n    }\n    /**\n     * @param params.firstX is specified in pixels.\n     * @param params.lastX is specified in pixels.\n     */\n    renderTie(params) {\n        if (params.firstYs.length === 0 || params.lastYs.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        const firstX = params.firstX; // pixel units\n        const firstYs = params.firstYs;\n        const lastX = params.lastX; // pixel units\n        const direction = params.direction;\n        if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n            throw new RuntimeError('BadSlide', 'Invalid slide direction');\n        }\n        // eslint-disable-next-line\n        const firstIndexes = this.notes.firstIndexes;\n        for (let i = 0; i < firstIndexes.length; ++i) {\n            const slideY = firstYs[firstIndexes[i]] + this.renderOptions.yShift;\n            if (isNaN(slideY)) {\n                throw new RuntimeError('BadArguments', 'Bad indexes for slide rendering.');\n            }\n            ctx.beginPath();\n            ctx.moveTo(firstX, slideY + 3 * direction);\n            ctx.lineTo(lastX, slideY - 3 * direction);\n            ctx.closePath();\n            ctx.stroke();\n        }\n        this.setRendered();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n    static get names() {\n        return {\n            standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n            dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n            dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n            eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n            standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n        };\n    }\n    /**\n     * Constructor.\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n        this.tuningValues = [];\n        // Default to standard tuning.\n        this.setTuning(tuningString);\n    }\n    /** Return the note number associated to the note string. */\n    noteToInteger(noteString) {\n        var _a;\n        return (_a = Tables.keyProperties(noteString).intValue) !== null && _a !== void 0 ? _a : -1;\n    }\n    /**\n     * Set tuning identified by tuning name (eg. 'dagdad')\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    setTuning(tuningString) {\n        if (Tuning.names[tuningString]) {\n            tuningString = Tuning.names[tuningString];\n        }\n        this.tuningValues = [];\n        const keys = tuningString.split(/\\s*,\\s*/);\n        if (keys.length === 0) {\n            throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n        }\n        for (let i = 0; i < keys.length; ++i) {\n            this.tuningValues[i] = this.noteToInteger(keys[i]);\n        }\n    }\n    /** Return the note number associated with a tablature string. */\n    getValueForString(stringNum) {\n        const s = Number(stringNum);\n        if (s < 1 || s > this.tuningValues.length) {\n            throw new RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);\n        }\n        return this.tuningValues[s - 1];\n    }\n    /** Return the note number associated with a tablature string and fret. */\n    getValueForFret(fretNum, stringNum) {\n        const stringValue = this.getValueForString(stringNum);\n        const f = Number(fretNum);\n        if (f < 0) {\n            throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n        }\n        return stringValue + f;\n    }\n    /** Return the note string associated with tablature string and fret. */\n    getNoteForFret(fretNum, stringNum) {\n        const noteValue = this.getValueForFret(fretNum, stringNum);\n        const octave = Math.floor(noteValue / 12);\n        const value = noteValue % 12;\n        return `${Tables.integerToNote(value)}/${octave}`;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { CanvasContext } from './canvascontext';\nimport { ChordSymbol, ChordSymbolHorizontalJustify, ChordSymbolVerticalJustify, SymbolModifiers } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve, CurvePosition } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { Glyphs } from './glyphs';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Metrics, MetricsDefaults } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Renderer, RendererBackends, RendererLineEndType } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { Repetition } from './staverepetition';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Volta, VoltaType } from './stavevolta';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { SVGContext } from './svgcontext';\nimport { System } from './system';\nimport { Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket, TextBracketPosition } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextJustification, TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { RuntimeError } from './util';\nimport { DATE, ID, VERSION } from './version';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice, VoiceMode } from './voice';\nexport class VexFlow {\n    /**\n     * Load the fonts that are used by your app.\n     *\n     * Call this if you are using `vexflow-core.js` to take advantage of lazy loading for fonts.\n     *\n     * If you are using `vexflow.js` or `vexflow-bravura.js`, this method is unnecessary, since\n     * they already call loadFonts(...) and setFonts(...) for you.\n     *\n     * If `fontNames` is undefined, all fonts in Font.FILES will be loaded.\n     * This is useful for debugging, but not recommended for production because it will load lots of fonts.\n     *\n     * For example, on the `flow.html` test page, you could call:\n     *   `await VexFlow.loadFonts();`\n     *\n     * Alternatively, you may load web fonts with a stylesheet link (e.g., from Google Fonts),\n     * and a @font-face { font-family: ... } rule in your CSS.\n     *\n     * Customize `Font.HOST_URL` and `Font.FILES` to load different fonts for your app.\n     */\n    static loadFonts(...fontNames) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!fontNames) {\n                fontNames = Object.keys(Font.FILES);\n            }\n            const fontLoadPromises = [];\n            for (const fontName of fontNames) {\n                fontLoadPromises.push(Font.load(fontName));\n            }\n            yield Promise.all(fontLoadPromises);\n        });\n    }\n    /**\n     * Call this if you are using `vexflow-core.js` to take advantage of lazy loading for fonts.\n     *\n     * `vexflow.js` and `vexflow-bravura.js` already call setFonts('Bravura', 'Academico'), so you only\n     * need to call this when switching fonts.\n     *\n     * Example:\n     * ```\n     * await VexFlow.loadFonts('Bravura', 'Academico', 'Petaluma', 'Petaluma Script');\n     * VexFlow.setFonts('Bravura', 'Academico');\n     * ... render a score in Bravura ...\n     * VexFlow.setFonts('Petaluma', 'Petaluma Script');\n     * ... render a score in Petaluma...\n     * ```\n     * See `demos/fonts/` for more examples.\n     */\n    static setFonts(...fontNames) {\n        // Convert the array of font names into an array of Font objects.\n        MetricsDefaults.fontFamily = fontNames.join(',');\n    }\n    static getFonts() {\n        return Metrics.get('fontFamily').split(',');\n    }\n    static get RENDER_PRECISION_PLACES() {\n        return Tables.RENDER_PRECISION_PLACES;\n    }\n    static set RENDER_PRECISION_PLACES(precision) {\n        Tables.RENDER_PRECISION_PLACES = precision;\n    }\n    static get SOFTMAX_FACTOR() {\n        return Tables.SOFTMAX_FACTOR;\n    }\n    static set SOFTMAX_FACTOR(factor) {\n        Tables.SOFTMAX_FACTOR = factor;\n    }\n    static get UNISON() {\n        return Tables.UNISON;\n    }\n    static set UNISON(unison) {\n        Tables.UNISON = unison;\n    }\n    static get NOTATION_FONT_SCALE() {\n        return Tables.NOTATION_FONT_SCALE;\n    }\n    static set NOTATION_FONT_SCALE(value) {\n        Tables.NOTATION_FONT_SCALE = value;\n    }\n    static get TABLATURE_FONT_SCALE() {\n        return Tables.TABLATURE_FONT_SCALE;\n    }\n    static set TABLATURE_FONT_SCALE(value) {\n        Tables.TABLATURE_FONT_SCALE = value;\n    }\n    static get RESOLUTION() {\n        return Tables.RESOLUTION;\n    }\n    static set RESOLUTION(value) {\n        Tables.RESOLUTION = value;\n    }\n    static get SLASH_NOTEHEAD_WIDTH() {\n        return Tables.SLASH_NOTEHEAD_WIDTH;\n    }\n    static set SLASH_NOTEHEAD_WIDTH(value) {\n        Tables.SLASH_NOTEHEAD_WIDTH = value;\n    }\n    static get STAVE_LINE_DISTANCE() {\n        return Tables.STAVE_LINE_DISTANCE;\n    }\n    static set STAVE_LINE_DISTANCE(value) {\n        Tables.STAVE_LINE_DISTANCE = value;\n    }\n    static get STAVE_LINE_THICKNESS() {\n        return Tables.STAVE_LINE_THICKNESS;\n    }\n    static set STAVE_LINE_THICKNESS(value) {\n        Tables.STAVE_LINE_THICKNESS = value;\n    }\n    static get STEM_HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    static set STEM_HEIGHT(value) {\n        Tables.STEM_HEIGHT = value;\n    }\n    static get STEM_WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static set STEM_WIDTH(value) {\n        Tables.STEM_WIDTH = value;\n    }\n    static get TIME4_4() {\n        return Tables.TIME4_4;\n    }\n    static get unicode() {\n        return Tables.unicode;\n    }\n    static keySignature(spec) {\n        return Tables.keySignature(spec);\n    }\n    static hasKeySignature(spec) {\n        return Tables.hasKeySignature(spec);\n    }\n    static getKeySignatures() {\n        return Tables.getKeySignatures();\n    }\n    static clefProperties(clef) {\n        return Tables.clefProperties(clef);\n    }\n    // eslint-disable-next-line\n    static keyProperties(key, clef, params) {\n        return Tables.keyProperties(key, clef, params);\n    }\n    static durationToTicks(duration) {\n        return Tables.durationToTicks(duration);\n    }\n}\n// VERSION, ID, and DATE are imported from version.ts.\n// INFO is set by the entry file in vexflow/entry/.\nVexFlow.BUILD = {\n    // version number.\n    VERSION: VERSION,\n    // git commit ID that this library was built from.\n    ID: ID,\n    // The date when this library was compiled.\n    DATE: DATE,\n    // Which build is this? vexflow, vexflow-bravura, vexflow-core, etc.\n    INFO: '',\n};\nVexFlow.Accidental = Accidental;\nVexFlow.Annotation = Annotation;\nVexFlow.Articulation = Articulation;\nVexFlow.Barline = Barline;\nVexFlow.BarNote = BarNote;\nVexFlow.Beam = Beam;\nVexFlow.Bend = Bend;\nVexFlow.BoundingBox = BoundingBox;\nVexFlow.CanvasContext = CanvasContext;\nVexFlow.ChordSymbol = ChordSymbol;\nVexFlow.Clef = Clef;\nVexFlow.ClefNote = ClefNote;\nVexFlow.Crescendo = Crescendo;\nVexFlow.Curve = Curve;\nVexFlow.Dot = Dot;\nVexFlow.EasyScore = EasyScore;\nVexFlow.Element = Element;\nVexFlow.Factory = Factory;\nVexFlow.Font = Font;\nVexFlow.Formatter = Formatter;\nVexFlow.Fraction = Fraction;\nVexFlow.FretHandFinger = FretHandFinger;\nVexFlow.GhostNote = GhostNote;\nVexFlow.GlyphNote = GlyphNote;\nVexFlow.GraceNote = GraceNote;\nVexFlow.GraceNoteGroup = GraceNoteGroup;\nVexFlow.GraceTabNote = GraceTabNote;\nVexFlow.KeyManager = KeyManager;\nVexFlow.KeySignature = KeySignature;\nVexFlow.KeySigNote = KeySigNote;\nVexFlow.Modifier = Modifier;\nVexFlow.ModifierContext = ModifierContext;\nVexFlow.MultiMeasureRest = MultiMeasureRest;\nVexFlow.Music = Music;\nVexFlow.Note = Note;\nVexFlow.NoteHead = NoteHead;\nVexFlow.NoteSubGroup = NoteSubGroup;\nVexFlow.Ornament = Ornament;\nVexFlow.Parenthesis = Parenthesis;\nVexFlow.Parser = Parser;\nVexFlow.PedalMarking = PedalMarking;\nVexFlow.Registry = Registry;\nVexFlow.RenderContext = RenderContext;\nVexFlow.Renderer = Renderer;\nVexFlow.RepeatNote = RepeatNote;\nVexFlow.Repetition = Repetition;\nVexFlow.Stave = Stave;\nVexFlow.StaveConnector = StaveConnector;\nVexFlow.StaveHairpin = StaveHairpin;\nVexFlow.StaveLine = StaveLine;\nVexFlow.StaveModifier = StaveModifier;\nVexFlow.StaveNote = StaveNote;\nVexFlow.StaveTempo = StaveTempo;\nVexFlow.StaveText = StaveText;\nVexFlow.StaveTie = StaveTie;\nVexFlow.Stem = Stem;\nVexFlow.StringNumber = StringNumber;\nVexFlow.Stroke = Stroke;\nVexFlow.SVGContext = SVGContext;\nVexFlow.System = System;\nVexFlow.TabNote = TabNote;\nVexFlow.TabSlide = TabSlide;\nVexFlow.TabStave = TabStave;\nVexFlow.TabTie = TabTie;\nVexFlow.TextBracket = TextBracket;\nVexFlow.TextDynamics = TextDynamics;\nVexFlow.TextNote = TextNote;\nVexFlow.TickContext = TickContext;\nVexFlow.TimeSignature = TimeSignature;\nVexFlow.TimeSigNote = TimeSigNote;\nVexFlow.Tremolo = Tremolo;\nVexFlow.Tuning = Tuning;\nVexFlow.Tuplet = Tuplet;\nVexFlow.Vibrato = Vibrato;\nVexFlow.VibratoBracket = VibratoBracket;\nVexFlow.Voice = Voice;\nVexFlow.Volta = Volta;\nVexFlow.RuntimeError = RuntimeError;\nVexFlow.Test = undefined; // Set by vexflow_test_helpers.ts in the debug version of this library.\n// Exported Enums.\n// Sorted by the module / file they are exported from.\nVexFlow.AnnotationHorizontalJustify = AnnotationHorizontalJustify;\nVexFlow.AnnotationVerticalJustify = AnnotationVerticalJustify;\nVexFlow.ChordSymbolHorizontalJustify = ChordSymbolHorizontalJustify;\nVexFlow.ChordSymbolVerticalJustify = ChordSymbolVerticalJustify;\nVexFlow.SymbolModifiers = SymbolModifiers;\nVexFlow.CurvePosition = CurvePosition;\nVexFlow.FontWeight = FontWeight;\nVexFlow.FontStyle = FontStyle;\nVexFlow.Glyphs = Glyphs;\nVexFlow.ModifierPosition = ModifierPosition;\nVexFlow.RendererBackends = RendererBackends;\nVexFlow.RendererLineEndType = RendererLineEndType;\nVexFlow.BarlineType = BarlineType;\nVexFlow.StaveModifierPosition = StaveModifierPosition;\nVexFlow.VoltaType = VoltaType;\nVexFlow.TextBracketPosition = TextBracketPosition;\nVexFlow.TextJustification = TextJustification;\nVexFlow.VoiceMode = VoiceMode;\n","// Gruntfile.js uses string-replace-loader to replace these values during build time.\nexport const VERSION = '5.0.0-alpha.2';\nexport const ID = '5e2bacc535b3ce3ba7b8dc72a7de5964d36fcc04';\nexport const DATE = '2024-03-09T08:46:38.033Z';\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\nimport { TabNote } from './tabnote';\nimport { Category } from './typeguard';\nexport class GraceTabNote extends TabNote {\n    static get CATEGORY() {\n        return Category.GraceTabNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct, false);\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // vertical shift from stave line\n            yShift: 0.3 });\n        this.updateWidth();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This class implements diatonic key management.\nimport { Music } from './music';\nimport { RuntimeError } from './util';\nexport class KeyManager {\n    constructor(key) {\n        this.music = new Music();\n        this.setKey(key);\n    }\n    setKey(key) {\n        this.key = key;\n        this.reset();\n        return this;\n    }\n    getKey() {\n        return this.key;\n    }\n    reset() {\n        this.keyParts = this.music.getKeyParts(this.key);\n        this.keyString = this.keyParts.root;\n        if (this.keyParts.accidental)\n            this.keyString += this.keyParts.accidental;\n        const isSupportedType = Music.scaleTypes[this.keyParts.type];\n        if (!isSupportedType) {\n            throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n        }\n        this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), Music.scaleTypes[this.keyParts.type]);\n        this.scaleMap = {};\n        this.scaleMapByValue = {};\n        this.originalScaleMapByValue = {};\n        const noteLocation = Music.rootIndexes[this.keyParts.root];\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n            this.scaleMap[rootName] = noteName;\n            this.scaleMapByValue[this.scale[i]] = noteName;\n            this.originalScaleMapByValue[this.scale[i]] = noteName;\n        }\n        return this;\n    }\n    getAccidental(key) {\n        const root = this.music.getKeyParts(key).root;\n        const parts = this.music.getNoteParts(this.scaleMap[root]);\n        return {\n            note: this.scaleMap[root],\n            accidental: parts.accidental,\n        };\n    }\n    selectNote(note) {\n        note = note.toLowerCase();\n        const parts = this.music.getNoteParts(note);\n        // First look for matching note in our altered scale\n        const scaleNote = this.scaleMap[parts.root];\n        const modparts = this.music.getNoteParts(scaleNote);\n        if (scaleNote === note) {\n            return {\n                note: scaleNote,\n                accidental: parts.accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in our altered scale\n        const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n        if (valueNote !== undefined) {\n            return {\n                note: valueNote,\n                accidental: this.music.getNoteParts(valueNote).accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in the original scale\n        const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n        if (originalValueNote !== undefined) {\n            this.scaleMap[modparts.root] = originalValueNote;\n            delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n            this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n            return {\n                note: originalValueNote,\n                accidental: this.music.getNoteParts(originalValueNote).accidental,\n                change: true,\n            };\n        }\n        // Then try to unmodify a currently modified note.\n        if (modparts.root === note) {\n            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n            this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n            this.scaleMap[modparts.root] = modparts.root;\n            return {\n                note: modparts.root,\n                accidental: undefined,\n                change: true,\n            };\n        }\n        // Last resort -- shitshoot\n        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n        this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n        delete this.scaleMap[modparts.root];\n        this.scaleMap[modparts.root] = note;\n        return {\n            note,\n            accidental: parts.accidental,\n            change: true,\n        };\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Mike Corrigan <corrigan@gmail.com>\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Category } from './typeguard';\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n    static get CATEGORY() {\n        return Category.Tremolo;\n    }\n    /**\n     * @param num number of bars\n     */\n    constructor(num) {\n        super();\n        this.num = num;\n        this.position = Modifier.Position.CENTER;\n        this.text = Glyphs.tremolo1;\n    }\n    /** Draw the tremolo on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDirection = note.getStemDirection();\n        const scale = note.getFontScale();\n        const ySpacing = Metrics.get(`Tremolo.spacing`) * stemDirection * scale;\n        const x = note.getAbsoluteX() + (stemDirection === Stem.UP ? note.getGlyphWidth() - Stem.WIDTH / 2 : Stem.WIDTH / 2);\n        let y = note.getStemExtents().topY + (this.num <= 3 ? ySpacing : 0);\n        this.fontInfo.size = Metrics.get(`Tremolo.fontSize`) * scale;\n        for (let i = 0; i < this.num; ++i) {\n            this.renderText(ctx, x, y);\n            y += ySpacing;\n        }\n    }\n}\n","export const Academico = 'data:font/woff2;charset=utf-8;base64,';\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// vexflow-bravura.ts is the entry point for vexflow-bravura.js.\n// This version bundles the Bravura music engraving font and the Academico text font.\nimport { VexFlow } from '../src/vexflow';\nimport { Font } from '../src/font';\nimport { Academico } from '../src/fonts/academico';\nimport { AcademicoBold } from '../src/fonts/academicobold';\nimport { Bravura } from '../src/fonts/bravura';\nconst fontBravura = Font.load('Bravura', Bravura, { display: 'block' });\nconst fontAcademico = Font.load('Academico', Academico, { display: 'swap' });\nconst fontAcademicoBold = Font.load('Academico', AcademicoBold, { display: 'swap', weight: 'bold' });\nVexFlow.BUILD.INFO = 'vexflow-bravura';\nVexFlow.setFonts('Bravura', 'Academico');\nPromise.allSettled([fontBravura, fontAcademico, fontAcademicoBold]).then(() => {\n    //\n});\nexport * from '../src/index';\nexport default VexFlow;\n","export const Bravura = 'data:font/woff2;charset=utf-8;base64,';\n","export const AcademicoBold = 'data:font/woff2;charset=utf-8;base64,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';\n"],"names":["root","factory","exports","module","define","amd","window","globalThis","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","g","Function","e","obj","prop","prototype","hasOwnProperty","call","isCategory","category","checkAncestors","constructorFcn","constructor","CATEGORY","getPrototypeOf","isBarline","Category","Barline","isGraceNote","GraceNote","isNote","Note","isStaveNote","StaveNote","isStemmableNote","StemmableNote","isTabNote","TabNote","RuntimeError","Error","code","message","super","globalObject","self","defined","x","undefined","log","block","args","line","Array","slice","join","console","midLine","a","b","n","parseInt","prefix","text","normalizeAngle","Math","PI","sumArray","arr","reduce","_a","_Fraction_fractionA","_Fraction_fractionB","__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","value","Fraction","GCD","Number","isNaN","t","LCM","LCMM","length","shift","numerator","denominator","set","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","subtract","multiply","divide","equals","compare","copy","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","other","quotient","floor","remainder","makeAbs","abs","toString","toSimplifiedString","toMixedString","s","q","parse","str","i","split","Metrics","getFontInfo","family","size","weight","style","defaultValue","keyParts","lastKeyPart","pop","curr","MetricsDefaults","retVal","keyPart","fontFamily","fontSize","fontScale","fontWeight","fontStyle","Accidental","cautionary","grace","noteheadAccidentalPadding","leftPadding","accidentalSpacing","Annotation","Bend","ChordSymbol","spacing","subscriptOffset","superscriptOffset","superSubRatio","FretHandFinger","GraceTabNote","NoteHead","minPadding","PedalMarking","Repetition","offsetX","offsetY","coda","segno","Stave","padding","endPaddingMax","endPaddingMin","unalignedNotePadding","StaveConnector","StaveLine","StaveSection","StaveTempo","glyph","name","StaveText","StaveTie","StringNumber","verticalPadding","stemPadding","rightPadding","Stroke","TabSlide","TabTie","TextBracket","TextNote","Tremolo","Volta","BoundingBox","that","y","w","h","getX","getY","getW","getH","setX","setY","setW","setH","move","mergeWith","boundingBox","newX","newY","newW","max","newH","FontWeight","FontStyle","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","fontParser","Font","convertSizeToPixelValue","scaleToPxFrom","pt","parseFloat","unit","replace","toLowerCase","convertSizeToPointValue","validate","fromCSSString","NORMAL","cssFontShorthand","document","createElement","font","toCSSString","fontInfo","st","trim","wt","sz","scaleSize","scaleFactor","isBold","parsedWeight","isItalic","ITALIC","load","fontName","url","descriptors","FontFace","files","FILES","HOST_URL","fontFace","fontFaceLoadPromise","fontFaceSet","fonts","getURLForFont","px","em","in","mm","cm","Academico","Bravura","Edwin","Gonville","Gootville","Leipzig","Leland","MuseJazz","Nepomuk","Petaluma","Sebastian","_Registry_defaultRegistry","__classPrivateFieldSet","Index","id","type","class","Registry","getDefaultRegistry","enableDefaultRegistry","registry","disableDefaultRegistry","index","clear","setIndexValue","elem","updateIndex","oldValue","getElementById","getAttribute","register","setAttribute","onRegister","_b","_c","getElementsByAttribute","attribute","indexAttr","indexAttrVal","keys","map","k","getElementsByType","getElementsByClass","className","onUpdate","info","includes","_Element_txtCanvas","_Element_context","_Element_attrs","_Element_fontInfo","_Element_fontScale","_Element_text","_Element_metricsValid","_Element_textMetrics","_Element_height","_Element_width","Element","newID","ID","setTextMeasurementCanvas","canvas","getTextMeasurementCanvas","txtCanvas","OffscreenCanvas","children","fontBoundingBoxAscent","fontBoundingBoxDescent","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","width","alphabeticBaseline","emHeightAscent","emHeightDescent","hangingBaseline","ideographicBaseline","xShift","yShift","rendered","addChildElement","child","push","getCategory","setStyle","setGroupStyle","forEach","getStyle","applyStyle","context","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","lineDash","setLineDash","restoreStyle","restore","drawWithStyle","checkContext","draw","hasClass","indexOf","addClass","removeClass","splice","isRendered","setRendered","getAttributes","getSVGElement","suffix","element","oldID","getBoundingBox","textMetrics","height","getContext","setContext","setFont","defaultTextFont","fontIsObject","fontIsString","sizeWeightStyleAreUndefined","assign","getFont","setFontSize","getFontSize","getFontScale","fontSizeInPoints","fontSizeInPixels","getWidth","measureText","setWidth","setYShift","getYShift","setXShift","getXShift","setText","getText","renderText","ctx","xPos","yPos","fillText","warn","measureWidth","getTextMetrics","getHeight","setOriginX","bbox","setOriginY","setOrigin","WeakMap","_Modifier_spacingFromNextModifier","_Modifier_modifierContext","ModifierPosition","Glyphs","Modifier","Position","PositionString","center","CENTER","above","ABOVE","below","BELOW","left","LEFT","right","RIGHT","textLine","position","reset","getNote","note","checkAttachedNote","setNote","getIndex","checkIndex","setIndex","getModifierContext","checkModifierContext","setModifierContext","c","getPosition","setPosition","setTextLine","setSpacingFromNextModifier","getSpacingFromNextModifier","alignSubNotesWithNote","subNotes","tickContext","getTickContext","metrics","getMetrics","stave","getStave","subNoteXOffset","modLeftPx","modRightPx","subNote","subTickContext","setStave","setXOffset","Music","NUM_TONES","canonicalNotes","roots","rootValues","rootIndexes","diatonicIntervals","diatonicAccidentals","unison","accidental","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","octave","intervals","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","scales","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","scaleTypes","M","m","accidentals","noteValues","rootIndex","intVal","cn","cb","cbb","dn","db","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bb","bbb","isValidNoteValue","isValidIntervalValue","interval","getNoteParts","noteString","match","exec","getKeyParts","keyString","getNoteValue","getIntervalValue","intervalString","getCanonicalNoteName","noteValue","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","direction","sum","getRelativeNoteName","parts","rootValue","multiplier","reverseInterval","relativeNoteName","getScaleTones","tones","nextNote","getIntervalBetween","note1","note2","difference","createScaleMap","keySignature","keySigParts","scaleName","keySigString","scale","noteLocation","scaleMap","rootName","noteName","RESOLUTION","durations","durationAliases","keySignatures","C","num","Am","F","Dm","Bb","Gm","Eb","Cm","Ab","Fm","Db","Bbm","Gb","Ebm","Cb","Abm","G","Em","D","Bm","A","E","B","clefs","treble","lineShift","bass","tenor","alto","soprano","percussion","subbass","french","notesInfo","CN","CB","CBB","DN","DB","DBB","EN","EB","EBB","FN","FB","FBB","GN","GB","GBB","AN","AB","ABB","BN","BB","BBB","R","X","accidentalSharp","accidentalDoubleSharp","accidentalFlat","accidentalDoubleFlat","accidentalNatural","accidentalParensLeft","accidentalParensRight","accidentalThreeQuarterTonesFlatZimmermann","accidentalQuarterToneFlatStein","accidentalThreeQuarterTonesSharpStein","accidentalQuarterToneSharpStein","accidentalKucukMucennebSharp","bs","accidentalBakiyeFlat","bss","accidentalBuyukMucennebFlat","accidentalSori","accidentalKoron","bbs","accidentalBuyukMucennebSharp","ashs","afhf","articulations","augmentationDot","betweenLines","av","aboveCode","articStaccatissimoAbove","belowCode","articStaccatissimoBelow","articAccentAbove","articAccentBelow","articTenutoAbove","articTenutoBelow","articMarcatoAbove","articMarcatoBelow","pluckedLeftHandPizzicato","ao","pluckedSnapPizzicatoAbove","pluckedSnapPizzicatoBelow","ah","stringsHarmonic","fermataAbove","fermataBelow","fermataShortAbove","fermataShortBelow","fermataLongAbove","fermataLongBelow","fermataVeryLongAbove","fermataVeryLongBelow","stringsUpBow","am","stringsDownBow","pictChokeCymbal","ornaments","mordent","ornamentShortTrill","mordentInverted","ornamentMordent","turn","ornamentTurn","turnInverted","ornamentTurnSlash","tr","ornamentTrill","upprall","ornamentPrecompSlideTrillDAnglebert","downprall","ornamentPrecompDoubleCadenceUpperPrefix","prallup","ornamentPrecompTrillSuffixDandrieu","pralldown","ornamentPrecompTrillLowerSuffix","upmordent","ornamentPrecompSlideTrillBach","downmordent","ornamentPrecompDoubleCadenceUpperPrefixTurn","lineprall","ornamentPrecompAppoggTrill","prallprall","ornamentTremblement","scoop","brassScoop","doit","brassDoitMedium","fall","brassFallLipShort","doitLong","brassLiftMedium","fallLong","brassFallRoughMedium","bend","brassBend","plungerClosed","brassMuteClosed","plungerOpen","brassMuteOpen","flip","brassFlip","jazzTurn","brassJazzTurn","smear","brassSmear","Tables","clefProperties","clef","keyProperties","keyOctaveGlyph","params","options","octaveShift","duration","sanitizeDuration","pieces","toUpperCase","intValue","glyphName","codeNoteHead","displaced","integerToNote","integer","textWidth","articulationCodes","artic","accidentalCodes","ornamentCodes","ornament","spec","keySpec","notes","accList","getKeySignatures","hasKeySignature","durationNumber","durationToFraction","durationToNumber","durationToTicks","ticks","noteheadDiamondWhole","noteheadDiamondHalf","noteheadDiamondBlack","noteheadTriangleUpWhole","noteheadTriangleUpHalf","noteheadTriangleUpBlack","noteheadXWhole","noteheadXHalf","noteheadXBlack","noteheadCircleX","noteheadSquareWhite","noteheadSquareBlack","noteheadMoonBlack","noteheadTriangleLeftBlack","noteheadTriangleRightBlack","noteheadBlack","noteheadTriangleRoundDownBlack","noteheadDiamondDoubleWhole","noteheadXDoubleWhole","noteheadCircleXDoubleWhole","noteheadCircleXWhole","noteheadCircleXHalf","noteheadCircledDoubleWhole","noteheadCircledWhole","noteheadCircledHalf","noteheadCircledBlack","noteheadDoubleWholeSquare","noteheadTriangleUpDoubleWhole","noteheadTriangleDownDoubleWhole","noteheadTriangleDownWhole","noteheadTriangleDownHalf","noteheadTriangleDownBlack","noteheadSlashedDoubleWhole1","noteheadSlashedWhole1","noteheadSlashedHalf1","noteheadSlashedBlack1","noteheadSlashedDoubleWhole2","noteheadSlashedWhole2","noteheadSlashedHalf2","noteheadSlashedBlack2","restDoubleWhole","restWhole","restHalf","restQuarter","rest8th","rest16th","rest32nd","rest64th","rest128th","noteheadSlashWhiteDoubleWhole","noteheadSlashWhiteWhole","noteheadSlashWhiteHalf","noteheadSlashVerticalEnds","noteheadDoubleWhole","noteheadWhole","noteheadHalf","null","UNISON","SOFTMAX_FACTOR","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","RENDER_PRECISION_PLACES","durationCodes","stem","beamCount","stemBeamExtension","codeFlagUp","flag8thUp","flag16thUp","flag32ndUp","flag64thUp","flag128thUp","NOTATION_FONT_SCALE","TABLATURE_FONT_SCALE","SLASH_NOTEHEAD_WIDTH","STAVE_LINE_DISTANCE","TEXT_HEIGHT_OFFSET_HACK","accidentalColumnsTable","secondOnBottom","spacedOutTetrachord","spacedOutPentachord","verySpacedOutPentachord","spacedOutHexachord","verySpacedOutHexachord","unicode","sharp","flat","natural","triangle","degrees","circle","validTypes","r","ci","cx","sf","sb","sq","tu","td","TIME4_4","numBeats","beatValue","resolution","_Accidental_checkCollision","AnnotationHorizontalJustify","AnnotationVerticalJustify","L","DEBUG","format","leftShift","additionalPadding","accidentalLinePositionsAndSpaceNeeds","prevNote","extraXSpaceNeededForLeftDisplacedNotehead","props","getKeyProps","getLeftDisplacedHeadPx","lineSpace","getSpacingBetweenLines","getYForLine","accLine","round","extraXSpaceNeeded","spacingBetweenStaveLines","sort","staveLineAccidentalLayoutMetrics","maxExtraXSpaceNeeded","accidentalLinePositionAndSpaceNeeds","accidentalType","priorLineMetric","currentLineMetric","flatLine","dblSharpLine","numAcc","column","totalColumns","noFurtherConflicts","groupStart","groupEnd","getGroupLine","getGroupLines","indexes","lineDifference","indexA","indexB","item","notColliding","indexPairs","every","line1","line2","groupLength","groupMember","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","totalShift","accCount","lastAccOnLine","applyAccidentals","voices","tickPositions","tickNoteMap","voice","tickPosition","getTickables","shouldIgnoreTicks","notesAtPosition","getTicks","music","scaleMapKey","tickPos","tickables","modifiedPitches","processNote","isRest","staveNote","keyIndex","accidentalString","pitch","sameAccidental","previouslyModified","getModifiers","modifier","addModifier","GraceNoteGroup","getGraceNotes","setAsCautionary","start","getModifierStartXY","clearance","clearanceRequired","collision","Stem","UP","DOWN","WIDTH","HEIGHT","_d","_e","_f","_g","stemUpYOffset","stemDownYOffset","stemUpYBaseOffset","stemDownYBaseOffset","xBegin","xEnd","yTop","yBottom","stemExtension","stemDirection","hide","isStemlet","stemletHeight","renderHeightAdjustment","setOptions","setNoteHeadXBounds","setDirection","setExtension","ext","getExtension","setYBounds","yOffset","getExtents","isStemUp","ys","stemHeight","innerMostNoteheadY","min","outerMostNoteheadY","topY","baseY","setVisibility","isVisible","setStemlet","adjustHeightForFlag","adjustHeightForBeam","stemX","stemY","yBaseOffset","stemletYOffset","openGroup","beginPath","moveTo","lineTo","stroke","closeGroup","minAnnotationPadding","annotations","leftWidth","rightWidth","maxLeftGlyphWidth","maxRightGlyphWidth","annotation","verticalSpaceNeeded","glyphWidth","getGlyphWidth","horizontalJustification","hasStem","getStemDirection","lines","renderOptions","drawStem","getStem","getNoteType","getNumLines","verticalJustification","VerticalJustify","TOP","noteLine","getLineNumber","leastString","topTextLine","BOTTOM","greatestString","curBottom","rightOverlap","rightShift","leftOverlap","setVerticalJustification","just","VerticalJustifyString","getJustification","setJustification","HorizontalJustifyString","textHeight","getStemX","stemExt","checkStave","checkStem","getYs","yt","getYForTopText","getYForBottomText","getTopLineTopY","extents","getStemExtents","HorizontalJustify","centerStem","CENTER_STEM","top","bottom","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","ceil","isStaveOrGraceNote","getTopY","stemTipY","stemBaseY","getBottomY","getInitialOffset","isOnStemTip","Articulation","maxGlyphWidth","getIncrement","articulation","increment","curTop","maxWidth","articWidth","overlap","easyScoreHook","builder","articNameToCode","staccato","tenuto","accent","articString","getFactory","heightShift","codePointAt","setBetweenLines","canSitBetweenLines","staffSpace","isTab","shouldSitOutsideStaff","initialOffset","INITIAL_OFFSET","offsetDirection","articLine","snappedLine","snapLineToStaff","RenderContext","_Tickable_preFormatted","_Tickable_postFormatted","StaveModifierPosition","BarlineType","ChordSymbolHorizontalJustify","ChordSymbolVerticalJustify","SymbolModifiers","Tickable","intrinsicTicks","tickMultiplier","modifiers","tupletStack","alignCenter","centerXShift","ignoreTicks","formatterMetrics","freedom","iterations","space","used","mean","deviation","setIgnoreTicks","flag","modifierContext","checkTickContext","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterXShift","setCenterAlignment","getVoice","setVoice","getTuplet","tuplet","getTupletStack","resetTuplet","noteCount","notesOccupied","getNoteCount","getNotesOccupied","applyTickMultiplier","setTuplet","addToModifierContext","mc","addMember","setTickContext","tc","preFormat","preFormatted","postFormat","postFormatted","getIntrinsicTicks","setIntrinsicTicks","getTickMultiplier","setDuration","getAbsoluteX","getGlyphProps","codeHead","plotMetrics","xStart","leftDisplacedHeadPx","xPre1","xAbs","xPost1","notePx","xPost2","rightDisplacedHeadPx","xFreedomRight","xWidth","x1","x2","color","yy","arc","closePath","fill","drawDot","spaceDeviation","parseDuration","durationString","dots","parseNoteStruct","noteStruct","durationProps","customTypes","currentTicks","parsedNoteStruct","JSON","stringify","keyProps","noteType","durationOverride","glyphProps","customGlyphs","playNote","annotationSpacing","strokePx","getPlayNote","setPlayNote","addStroke","setYs","getRightDisplacedHeadPx","setLeftDisplacedHeadPx","setRightDisplacedHeadPx","isTopNote","getLineForRest","getDuration","isDotted","getModifiersByType","Dot","getBeam","beam","checkBeam","hasBeam","setBeam","signature","filter","getRightParenthesisPx","getLeftParenthesisPx","getFirstDotPx","parentheses","getMembers","getState","glyphPx","getNoteStartX","getTieRightX","tieStartX","getTieLeftX","tieEndX","getKeys","StaveModifier","getPadding","setPadding","setLayoutMetrics","layoutMetrics","getLayoutMetrics","typeString","single","SINGLE","double","DOUBLE","end","END","repeatBegin","REPEAT_BEGIN","repeatEnd","REPEAT_END","repeatBoth","REPEAT_BOTH","none","NONE","thickness","TYPE","widths","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","BEGIN","setType","getType","drawVerticalBar","drawVerticalEndBar","drawRepeatBar","doubleBar","staveCtx","botY","getBottomLineBottomY","fillRect","begin","dotX","dotRadius","dotY","BarNote","barline","bends","lastWidth","stringPos","phrase","tap","bendWidth","releaseWidth","updateWidth","setTap","getTextHeight","totalWidth","additionalWidth","drawWidth","lowestY","bendHeight","annotationY","renderBend","cpX","cpY","quadraticCurveTo","renderRelease","renderArrowHead","yBase","renderX","lastBend","lastBendDrawWidth","lastDrawnWidth","ChordSymbolBlock","symbolModifier","vAlign","isSuperscript","SUPERSCRIPT","isSubscript","SUBSCRIPT","spacingBetweenBlocks","symbols","symbol","lineSpaces","j","symbolBlocks","sup","sub","prev","getVertical","getReportWidth","getHorizontal","horizontal","vertical","reportWidth","setReportWidth","getSymbolBlock","symbolBlock","smallerFontSize","addSymbolBlock","parameters","addText","addTextSuperscript","addTextSubscript","addGlyphSuperscript","glyphs","addGlyph","addGlyphOrText","char","addLine","setVertical","vj","setHorizontal","hj","stemBase","diminished","csymDiminished","dim","halfDiminished","csymHalfDiminished","csymAugmented","augmented","majorSeventh","csymMajorSeventh","csymMinor","leftParen","rightParen","leftBracket","csymBracketLeftTall","rightBracket","csymBracketRightTall","leftParenTall","rightParenTall","csymDiagonalArrangementSlash","over","csymAccidentalSharp","csymAccidentalFlat","symbolModifiers","getDots","buildAndAttach","all","dot","dotList","maxShiftMap","noteId","dotShift","lastLine","lastNote","prevDottedSpace","halfShiftY","dotShiftY","setDotShiftY","forceFlagRight","nums","numsList","shiftLeft","shiftRight","pos","shiftL","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","numShift","numWidth","fingerings","fingeringString","number","Fingering","fingering","finger","setFretHandFinger","xOffset","getFretHandFinger","setOffsetX","setOffsetY","customGlyph","ledger","customGlyphCode","slashed","isDisplaced","getLine","setLine","displacementStemAdjustment","getYForNote","flagStyle","setStem","buildStem","buildFlag","hasFlag","flagCode","String","fromCodePoint","getBaseCustomNoteHeadGlyphProps","getStemLength","getStemExtension","getBeamCount","getStemMinimumLength","frac","beamIsUndefined","setStemDirection","getCenterGlyphX","flagHeight","stemExtensionOverride","setStemLength","stemOptions","_StaveNote_noteHeads","_StaveNote_sortedKeyProps","shiftRestVertical","rest","dir","delta","maxLine","minLine","setKeyLine","getKeyLine","LEDGER_LINE_OFFSET","minNoteheadPadding","notesList","minL","stemMax","stemMin","maxL","isrest","voiceShift","getVoiceShiftWidth","noteU","noteM","noteL","voiceXShift","lineSpacing","lineDiff","noteUHead","noteLHead","centerRest","ledgerLineStyle","useDefaultHeadX","calculateKeyProps","autoStem","noteHeadStyles","noteHead","buildNoteHeads","noteHeadStyle","calcNoteDisplacements","noteProps","notehead","calculateOptimalStemDirection","getNoteHeadBounds","noteStemHeight","flagX","flagY","bbFlag","resultLine","thisLine","val","isChord","setNoteDisplaced","getRightShift","restLine","isInnerNoteIndex","restShift","setStemStyle","getStemStyle","setLedgerLineStyle","getLedgerLineStyle","setFlagStyle","getFlagStyle","noteHeads","setKeyStyle","noteHeadPadding","shouldDrawFlag","nonDisplacedX","displacedX","highestDisplacedLine","lowestDisplacedLine","Infinity","highestLine","lowestLine","highestNonDisplacedLine","lowestNonDisplacedLine","getNoteHeadBeginX","getNoteHeadEndX","drawLedgerLines","doubleWidth","minX","drawLedgerLine","normal","ledgerWidth","getDefaultLedgerLineStyle","drawModifiers","noteheadParam","noteheadStyle","hasNoBeam","drawFlag","drawNoteHeads","superStemExtension","midLineDistance","linesOverOctaveFromMidLine","spacingBetweenLines","shouldRenderStem","pointerRect","setNotes","cp1","cp2","textShiftX","firstXShift","lastXShift","tieSpacing","firstNote","firstIndexes","lastIndexes","isPartial","renderTie","firstYs","lastYs","lastX","firstX","firstY","lastY","topControlPointY","bottomControlPointY","renderTieText","centerX","getNotes","getTieStartX","getTieEndX","createHammeron","createPulloff","VoiceMode","Voice","Mode","time","voiceTime","resolutionMultiplier","mode","STRICT","ticksUsed","largestTickWidth","softmaxFactor","totalTicks","smallestTickCount","getTotalTicks","getTicksUsed","getLargestTickWidth","getSmallestTickCount","getMode","setMode","getResolutionMultiplier","getActualResolution","tickable","setStrict","strict","SOFT","isComplete","FULL","setSoftmaxFactor","factor","expTicksUsed","reCalculateExpTicksUsed","pow","softmax","tickValue","v","exp","addTickable","addTickables","gracenoteGroups","groupList","gracenoteGroup","isStavenote","formatWidth","groupShift","graceNotes","showSlur","slur","slurYShift","beams","formatter","Formatter","joinVoices","getMinTotalWidth","beamNotes","Beam","beamWidth","partialBeamLength","graceNote","TieClass","NoteSubGroup","groups","group","Ornament","numLines","ornamentNoteTransition","ornamentAttack","ornamentAlignWithNoteHead","ornamentRelease","ornamentLeft","ornamentRight","ornamentYShift","ornamentArticulation","delayed","accidentalLowerPadding","accidentalUpperPadding","adjustForStemDirection","setDelayed","setUpperAccidental","accid","accidentalUpper","setLowerAccidental","accidentalLower","glyphX","glyphY","delayXShift","startX","nextContext","charCodeAt","Parenthesis","parenthesis","isHTMLCanvas","global","HTMLCanvasElement","toDataURL","CanvasContext","CANVAS_BROWSER_SIZE_LIMIT","sanitizeCanvasDims","limit","err","stack","context2D","curTransfrom","getTransform","clearRect","cls","openRotation","angleDegrees","translate","rotate","closeRotation","setTransform","setBackgroundFillStyle","blur","sqrt","setLineCap","capType","lineCap","dash","resize","devicePixelRatio","dpr","rect","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","cpx","cpy","radius","startAngle","endAngle","counterclockwise","_SVGContext_instances","_SVGContext_getShadowStyle","ATTRIBUTES_TO_IGNORE","path","TWO_PI","SVGContext","precision","backgroundFillStyle","fontCSSString","svg","create","appendChild","parent","pen","NaN","defaultFontAttributes","scaleX","scaleY","attributes","groupAttributes","applyAttributes","stateStack","svgElementType","createElementNS","visibleWidth","visibleHeight","setViewBox","viewBoxOrMinX","minY","viewBoxString","attrNamesToIgnore","nodeName","attrName","setAttributeNS","lastChild","removeChild","rectangle","opacity","y1","y2","x0","cos","y0","sin","tmpStartTest","tmpEndTest","large","sweep","measureTextElement","txt","textContent","structuredClone","savedState","fontAttributes","RendererBackends","RendererLineEndType","WeakSet","Renderer","buildContext","elementId","backend","background","renderer","lastContext","getCanvasContext","Backends","CANVAS","getSVGContext","SVG","drawDashedLine","fromX","fromY","toX","toY","dashPattern","dx","dy","angle","atan2","idx","dashLength","nx","ny","arg0","arg1","maybeElement","willReadFrequently","HTMLDivElement","isHTMLDiv","LineEndType","extraXSpaceForDisplacedNotehead","glyphLine","numXShift","stringNumber","stemOffset","dashed","leg","drawCircle","setLineEndType","setStringNumber","setLastNote","setDashed","setDrawCircle","len","pattern","strokes","strokeList","string","getPositions","strokeShift","allVoices","addEndNote","noteEnd","yPositions","arrow","arrowY","textY","Type","BRUSH_DOWN","ROLL_DOWN","RASGUEADO_DOWN","arrowheadBlackUp","BRUSH_UP","ROLL_UP","RASGUEADO_UP","arrowheadBlackDown","ARPEGGIO_DIRECTIONLESS","lineGlyph","wiggleArpeggiatoDown","wiggleArpeggiatoUp","el","Vibrato","vibratos","vibrato","setVibratoWidth","items","setVibratoCode","vx","vy","ModifierContext","members","formatted","member","getLeftShift","Clef","types","gClef","fClef","cClef","unpitchedPercussionClef1","sixStringTabClef","tab","gClef8va","fClef8va","gClef8vb","fClef8vb","getPoint","KeySignature","cancelKeySpec","alterKeySpec","setKeySig","paddingForced","convertToGlyph","acc","nextAcc","prevGlyph","cancelKey","convertToCancelAccList","cancelAccList","differentTypes","naturals","cancelled","concat","addToStave","convertAccLines","customLines","offset","calculateWidth","alterKey","convertToAlterAccList","firstAccidentalType","getEndClef","getClef","extraWidth","symbolType","setShiftX","setShiftY","CODA_RIGHT","drawCodaFixed","CODA_LEFT","drawSymbolText","SEGNO_LEFT","drawSegnoFixed","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","TO_CODA","drawCoda","textX","getVerticalBarWidth","section","drawRect","setStaveSection","headroom","_StaveTempo_durationToCode","TextJustification","VoltaType","tempo","shiftY","metNoteDoubleWholeSquare","long","metNoteDoubleWhole","breve","metNoteWhole","whole","metNoteHalfUp","half","metNoteQuarterUp","quarter","metNote8thUp","eighth","metNote16thUp","metNote32ndUp","metNote64thUp","metNote128thUp","metNote256thUp","metNote512thUp","metNote1024thUp","setTempo","shiftX","bpm","duration2","dots2","elText","metAugmentationDot","GLYPHS","mordentUpper","mordentLower","dynamicForte","p","dynamicPiano","dynamicMezzo","dynamicSforzando","z","dynamicZ","pedalOpen","keyboardPedalPed","pedalClose","keyboardPedalUp","caesuraStraight","caesura","caesuraCurved","breath","breathMarkComma","tick","breathMarkTick","superscript","subscript","smooth","justification","Justification","getBottomLineY","label","vertHeight","BEGIN_END","TimeSignature","timeSpec","customPadding","validateArgs","isNumeric","topStartX","botStartX","topText","botText","topLine","bottomLine","setTimeSig","getTimeSigCode","smallSig","timeSigCommon","timeSigCutCommon","timeSigPlusSmall","timeSigPlus","timeSigMinus","timeSigParensLeftSmall","timeSigParensLeft","timeSigParensRightSmall","timeSigParensRight","makeTimeSignatureGlyph","topDigits","botDigits","topWidth","botWidth","test","assertIsValidTimeSig","getTimeSpec","getIsNumeric","setIsNumeric","drawAt","SORT_ORDER_BEG_MODIFIERS","SORT_ORDER_END_MODIFIERS","defaultPadding","endX","measure","endClef","verticalBarWidth","leftBar","rightBar","spacingBetweenLinesPx","spaceAboveStaffLn","spaceBelowStaffLn","topTextPosition","bottomTextPosition","lineConfig","bounds","defaultLedgerLineStyle","resetLines","addEndModifier","setDefaultLedgerLineStyle","visible","setNoteStartX","getNoteEndX","setNumLines","mod","setMeasure","getMeasure","getModifierXShift","begBarline","setRepetitionType","setVoltaType","setSection","staveSection","setStaveText","getLineForY","getYForGlyphs","setBegBarType","setEndBarType","setClef","clefSpec","addClef","setEndClef","setKeySignature","addKeySignature","setEndKeySignature","setTimeSignature","timeSignatures","addTimeSignature","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","noPosition","noCategory","sortByCategory","order","temp","endBarline","begModifiers","endModifiers","lastBarlineIdx","getConfigForLines","setConfigForLine","lineNumber","setConfigForLines","linesConfiguration","formatBegModifiers","staves","adjustCategoryStartX","minStartX","adjustX","allModifiers","bAdjust","maxX","drawBoldDoubleLine","topX","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","variableWidth","topStave","bottomStave","texts","newType","values","textElement","SINGLE_RIGHT","THIN_DOUBLE","attachmentHeight","SINGLE_LEFT","BRACE","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","BRACKET","bracketTop","bracketBottom","singleRight","singleLeft","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","TickContext","getNextContext","tContext","contexts","tContexts","tickID","currentTick","maxTicks","maxTickable","minTicks","minTickable","xBase","tickablesByVoice","totalLeftPx","totalRightPx","getTickID","getXBase","setXBase","getXOffset","getMaxTicks","getMinTicks","getMaxTickable","getMinTickable","getTickableForVoice","voiceIndex","getTickablesByVoice","getCenterAlignedTickables","getCurrentTick","setCurrentTick","getRestLineForNextNoteGroup","currRestLine","currNoteIndex","nextRestLine","noteIndex","SimpleFormat","paddingBetween","accumulator","plotDebugging","stavePadding","contextGaps","gaps","gap","totalCost","toFixed","total","FormatAndDraw","autoBeam","alignRests","applyAndGetBeams","formatToStave","FormatAndDrawTab","tabstave","tabnotes","opts","notevoice","tabvoice","AlignRestsToNotes","alignAllNotes","alignTuplets","currTickable","prevTickable","formatterOptions","globalSoftmax","maxIterations","justifyWidth","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","array","list","modifierContexts","lossHistory","preCalculateMinTotalWidth","unalignedPadding","unalignedCtxCount","wsum","dsum","createTickContexts","contextList","contextMap","wavg","wvar","ll","wpads","davg","dvar","dpads","padmax","unalignedPad","createModifierContexts","tickToContextMap","Map","integerTicks","staveTickToContextMap","newContext","makeContext","addToContext","tickList","createContexts","contextArray","getTickContexts","renderingContext","voicesParam","evaluate","firstContext","calculateIdealDistances","adjustedJustifyWidth","backTickable","prevContext","backVoices","matchingVoices","maxNegativeShiftPx","expectedDistance","thisTickable","insideLeftEdge","backMetrics","insideRightEdge","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","configMinPadding","configMaxPadding","targetWidth","distances","actualWidth","minDistance","mdCalc","di","calcMinDistance","paddingMaxCalc","curTargetWidth","lastTickablePadding","lastTickable","tickWidth","paddingMax","paddingMin","prevTick","prevMetrics","currMetrics","leftNoteEdge","rightNote","rightMetrics","stats","count","updateStats","totalDeviation","tune","alpha","current","cost","optionsParam","TupletLocation","Tuplet","LOCATION_TOP","LOCATION_BOTTOM","NESTING_OFFSET","numNotes","bracketed","some","ratioed","setTupletLocation","location","resolveGlyphs","attach","detach","setBracketed","setRatioed","setNotesOccupied","fromCharCode","tupletColon","getNestedTupletCount","maxTupletCount","countTuplets","minTupletCount","tupletCount","getYPosition","nestedTupletYOffset","yPosition","modLines","modY","lineCheck","nn","bottomY","notationStartX","_Beam_stemDirection","_Beam_ticks","_Beam_yShift","_Beam_breakOnIndexes","_Beam_beamCount","_Beam_unbeamable","_Beam_forcedPartialDirections","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_BOTH","getDefaultBeamGroups","timeSig","beatTotal","generateBeams","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","currentGroup","nextTickGroup","nextGroup","currentGroupTotalTicks","unprocessedNote","ticksPerGroup","memo","unbeamable","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","breaksOnEachRest","beamRests","breaksOnFirstOrLastRest","beamMiddleOnly","breakOnStemChange","maintainStemDirections","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","allTuplets","uniqueTuplets","noteTuplet","getTuplets","showStemlets","secondaryBreaks","secondaryBreakTicks","flatBeams","flatBeamOffset","slope","stemWeight","maxSlope","minSlope","slopeIterations","slopeCost","stemletExtension","minFlatBeamOffset","breakSecondaryAt","setPartialBeamSideAt","side","unsetPartialBeamSideAt","getSlopeY","calculateSlope","initialSlope","firstStemTipY","firstStemX","getStemSlope","minCost","MAX_VALUE","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","diff","idealSlope","calculateFlatSlope","extremeY","extremeBeamCount","currentExtreme","extremeTest","newOffset","getBeamYToDraw","beamY","applyStemExtensions","beamedStemTipY","preBeamExtension","beamExtension","crossStemExtension","totalBeamWidth","lookupBeamDirection","nextTick","forcedBeamDirection","lookupDuration","prevNoteGetsBeam","nextNoteGetsBeam","noteGetsBeam","getBeamLines","tickOfDuration","beamStarted","beamLines","currentBeam","previousShouldBreak","tickTally","shouldBreak","beamAlone","beamDirection","lastBeam","drawStems","drawBeamLines","validBeamDurations","beamThickness","beamLine","startBeamX","startBeamY","lastBeamX","lastBeamY","ClefNote","Crescendo","extendLeft","extendRight","decrescendo","setHeight","setDecrescendo","decresc","beginX","halfHeight","reverse","renderHairpin","CurvePosition","Curve","nearHead","NEAR_HEAD","nearTop","NEAR_TOP","from","to","positionEnd","invert","cps","renderCurve","cp0x","cp0y","controlPointSpacing","metric","endMetric","Parser","flattenMatches","matchedString","results","grammar","errorPos","expect","matchFail","returnPos","matchSuccess","matchToken","token","noSpace","regexp","RegExp","success","incrementPos","expectOne","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","expectOneOrMore","more","expectZeroOrMore","ruleFunc","bind","oneOrMore","zeroOrMore","matches","run","EasyScore","EasyScoreGrammar","LINE","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","addSingleNote","MICROTONES","ACCIDENTALS","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Piece","chord","Builder","commitHooks","elements","rollingDuration","resetPiece","getElements","addCommitHook","commitHook","piece","addNote","standardAccidentals","notePiece","GhostNote","setId","commaSeparatedRegex","setClass","defaults","throwOnError","parser","ERROR_MSG","parameter","GlyphNote","setGlyph","slash","ret","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","noteHeadWidth","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beamSlope","beamAngle","atan","iPointOnBeam","slashAngle","protrusionStemDeltaX","protrusionStemDeltaY","protrusionBeamDeltaX","protrusionBeamDeltaY","stem0X","KeySigNote","_MultiMeasureRest_hasPaddingLeft","_MultiMeasureRest_hasPaddingRight","_MultiMeasureRest_hasLineThickness","_MultiMeasureRest_hasSymbolSpacing","MultiMeasureRest","numberOfMeasures","xs","numberGlyphPoint","digit","lineThickness","symbolSpacing","useSymbols","showNumber","numberLine","serifThickness","semibreveRestGlyphScale","getXs","drawLine","drawSymbols","n4","n2","n1","elMiddle","restLonga","elTop","yMiddle","drawPedalGlyph","createSustain","createSostenuto","pedal","MIXED","setCustomText","createUnaCorda","TEXT","customDepressText","customReleaseText","bracketHeight","textMarginRight","bracketLineWidth","depress","release","drawBracketed","prevX","prevY","isPedalDepressed","nextNoteIsSame","prevNoteIsSame","drawText","pedalDepress","pedalRelease","mixed","CODES","repeat1Bar","repeat2Bars","repeat4Bars","repeatBarSlash","RepeatNote","drawArrowHead","roundedEnd","drawStartArrow","drawEndArrow","arrowheadLength","arrowheadAngle","textPositionVertical","TextVerticalPosition","textJustification","applyLineStyle","drawArrowLine","pt1","pt2","bothArrows","distance","ratio","endY","startY","lineAngle","angle1","angle2","bottomX","startPosition","endPosition","firstIndex","lastIndex","upwardsSlope","noteheadWidth","verticalPosition","System","partStaves","partStaveInfos","partVoices","spaceBetweenStaves","autoWidth","noJustification","debugFormatter","formatIterations","noPadding","details","formatOptions","getStaves","getVoices","addConnector","connector","addStave","staveOptions","spaceAbove","spaceBelow","debugNoteMetrics","addVoices","optionsDetails","debugNoteMetricsYs","part","fretElement","positions","ghost","drawDots","drawStemThroughStave","setGhost","tabToElement","fret","getStemY","stemDownLine","stemStartLine","drawStemThrough","stemThrough","unusedStrings","stringsUsed","getUnusedStringGroups","stemLines","upStem","downStem","totalLines","strings","containsLastString","containsFirstString","lineYs","isTopBound","isBottomBound","getPartialStemLines","drawPositions","tabX","renderStem","TabStave","addTabGlyph","TextBracketPosition","stop","superscriptElement","showBracket","underlineSuperscript","mainWidth","mainHeight","superY","superWidth","superHeight","lineY","TextDynamics","dynamicRinforzando","sequence","letter","TimeSigNote","VibratoBracket","bracketData","stopX","Factory","newFromElementId","renderQ","systems","initRenderer","staveSpace","ghostNote","textNote","barNote","clefNote","timeSigNote","keySigNote","hJustify","vJustify","chordSymbol","upperAccidental","lowerAccidental","numMeasures","multiMeasureRest","secondaryBeamBreaks","partialBeamDirections","entries","curve","tie","vibratoBracket","textBracket","system","StaveHairpin","FormatByTicksAndDraw","ppt","pixelsPerTick","leftShiftPx","leftShiftTicks","rightShiftPx","rightShiftTicks","hairpinOptions","setRenderOptions","hairpin","dis","staffHeight","CRESC","DECRESC","SLIDE_UP","SLIDE_DOWN","createSlideUp","createSlideDown","firstFret","lastFret","slideY","Tuning","names","standard","dagdad","dropd","standardBanjo","tuningString","tuningValues","setTuning","noteToInteger","getValueForString","stringNum","getValueForFret","fretNum","stringValue","getNoteForFret","VexFlow","loadFonts","fontNames","fontLoadPromises","setFonts","getFonts","BUILD","VERSION","DATE","INFO","KeyManager","setKey","getKey","scaleMapByValue","originalScaleMapByValue","getAccidental","selectNote","scaleNote","modparts","change","valueNote","originalValueNote","tremolo1","ySpacing","Test","fontBravura","display","fontAcademico","fontAcademicoBold","allSettled"],"sourceRoot":""}